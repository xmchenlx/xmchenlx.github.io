[{"title":"React学习笔记","date":"2021-05-26T09:41:02.000Z","url":"/2021/05/26/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":[["React","/tags/React/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"]],"categories":[["undefined",""]],"content":"1. React简介 轻量级的视图层库！A JavaScript library for building user interfaces React不是一个完整的MVC框架，最多可以认为是MVC中的V（View），甚至React并不非常认可MVC开发模式；React 主要用于构建UI，可以简单地理解为React 将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。 1.1 组件化 什么是模块化：是从代码的角度来进行分析的；把一些可复用的代码，抽离为单个的模块；便于项目的维护和开发； 什么是组件化： 是从 UI 界面的角度 来进行分析的；把一些可复用的UI元素，抽离为单独的组件；便于项目的维护和开发； 组件化的好处：随着项目规模的增大，手里的组件越来越多；很方便就能把现有的组件，拼接为一个完整的页面； Vue是如何实现组件化的： 通过 .vue 文件，来创建对应的组件； template 结构 script 行为 style 样式 React如何实现组件化：大家注意，React中有组件化的概念，但是，并没有像vue这样的组件模板文件；React中，一切都是以js来表现的 1.2 移动APP Vue，结合 Weex 实现移动端App开发 React，结合 ReactNative 实现移动端App开发 2. React的虚拟DOM 真实DOM：是浏览器中的概念是用JS对象来表示页面上的元素，并提供了操作 DOM 对象的API。 虚拟DOM：是框架中的概念是用JS对象来模拟页面上的 DOM 和 DOM嵌套。 本质： 用JS对象，来模拟DOM元素和嵌套关系 目的： 就是为了实现页面元素的高效更新 React 高性能 React Fiber 3. React的特点和优势 虚拟DOM 组件系统 单向数据流 jsx语法 4. 快速构建React开发环境 使用 create-react-app脚手架 快速构建 React 开发环境 引入react、react-dom 创建DOM元素渲染 元素与组件 5. JSX的语法 jsx介绍 jsx 执行更快，因为它在编译为 JavaScript 代码后进行了优化。 它是类型安全的，在编译过程中就能发现错误。 使用 jsx编写模板更加简单快速。 jsx的使用 jsx语法中, 要把js代码写到{}号中 jsx中的注意事项 注释推荐使用{ /* 这是注释 */ } 在jsx创建DOM的时候，所有的节点，必须有唯一的根元素进行包裹； 在 jsx 语法中，标签必须成对出现，如果是单标签，则必须自闭和 6. React中创建组件 组件的创建方式 函数式组件(首字母必须大写) class关键字组件 两种组件的区别: 用函数创建出来的组件：叫做“无状态组件” 用class关键字创建出来的组件：叫做“有状态组件” 这两种组件本质区别就是：有无state属性 组件之间的组合和嵌套 7. JSX原理 JS对象构建DOM结构 上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示： React中构建DOM结构 React.createElement会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等 编译之后将得到的代码: 8. 组件中DOM样式 行内样式 使用class classnames npm install classnames –save styled-components npm install styled-components –save 9. 组件的属性(props) class组件的属性和默认属性 函数组件的属性和默认属性 组件的props.children属性 使用props-type检查props 10. 组件的状态(state) 创建组件状态的两种方式 普通方式 继承方式 设置组件状态(setState) setState方法(有两个参数)设置状态 第一个参数可以是对象，也可以是方法return一个对象。 参数是对象 参数是方法 setState是异步的,所以想要获取最新的state, 没有办法获取,就有了第二个参数,这是一个可选的回调函数 渲染数据 条件渲染 列表渲染 dangerouslySetInnerHTML方法 11. 属性 VS 状态属性 props 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。 它是外部传进来的配置参数，组件内部无法控制也无法修改。 除非外部组件主动传入新的 props，否则组件的 props 永远保持不变。 状态 state 的主要作用是用于组件保存、控制、修改自己的可变状态。 state 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。 state 是一个局部的、只能被组件自身控制的数据源。 state 中状态可以通过 this.setState方法进行更新，setState 会导致组件的重新渲染。 如果搞不清 state 和 props 的使用场景，记住一个简单的规则：**尽量少地用 state，多用 props**。 没有 state 的组件叫无状态组件，设置了 state 的叫做有状态组件。 组件的数据渲染是否被调用者传递的props完全控制，控制则为受控组件，否则非受控组件。 因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。 这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。 12. 事件 绑定事件 采用on+事件名的方式来绑定一个事件，React和原生的事件是有区别的，原生的事件全是小写onclick, React中的事件是驼峰onClick，React的事件并不是原生事件，而是合成事件。 事件用法 直接在render里写行内的箭头函数(不推荐) 在组件内使用箭头函数定义一个方法(推荐) 直接在组件内定义一个非箭头函数的方法，然后在render里直接使用onClick={this.handleClick.bind(this)}(不推荐) 直接在组件内定义一个非箭头函数的方法，然后在constructor里bind(this)(官方推荐) Event对象 和普通浏览器一样，事件handler会被自动传入一个 event 对象，这个对象和普通的浏览器 event 对象所包含的方法和属性都基本一致。不同的是 React中的 event 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有event.stopPropagation、event.preventDefault 这种常用的方法 事件的参数传递 在render里调用方法的地方外面包一层箭头函数 在render里通过this.handleEvent.bind(this, 参数)这样的方式来传递 13. 用户输入案例 创建用户输入组件 添加状态绑定事件 改变状态更新组件 14. 组件的生命周期React中组件也有生命周期，有很多钩子函数供我们使用, 组件的生命周期，分为四个阶段，初始化、运行中、销毁、错误处理(16.3之后) 初始化执行 constructor&nbsp; componentWillMount()&nbsp;/&nbsp;UNSAFE_componentWillMount() 组件被挂载到页面之前，自动被执行 render()&nbsp; 渲染组件 componentDidMount() 组件被挂载到页面之后，自动被执行 更新阶段props或state的改变可能会引起组件的更新，组件重新渲染的过程中会调用以下方法： componentWillReceiveProps()&nbsp;/&nbsp;UNSAFE_componentWillReceiveProps()&nbsp; 子组件要从父组件接受参数，如果这个组件第一次存在于父组件中,不会执行 如果这个组件之前已经存在于父组件中，才会执行 shouldComponentUpdate()&nbsp; 组件被更新之前，自动执行返回true/false来决定 render是否更新 componentWillUpdate()&nbsp;/&nbsp;UNSAFE_componentWillUpdate()&nbsp; 组件被更新之前它会自动执行但是在shouldComponentUpdate之后执行 shouldComponentUpdate返回true它才会执行，如果返回false，这个函数就不会被执行 render()&nbsp; componentDidUpdate() 组件更新完成以后被执行 卸载阶段 componentWillUnmount() 组件即将被从页面中剔除的时候执行 15. ref属性React提供的这个ref属性，表示对组件真正实例的引用，其实就是ReactDOM.render()返回的组件实例,ref可以挂载到组件上也可以是dom元素上。 挂到组件(class声明的组件)上的ref表示对组件实例的引用。不能在函数式组件上使用 ref 属性，因为它们没有实例： 挂载到dom元素上时表示具体的dom元素节点。 16. 组件通信父组件与子组件通信 父组件将自己的状态传递给子组件，子组件当做属性来接收，当父组件更改自己状态的时候，子组件接收到的属性就会发生改变 父组件利用ref对子组件做标记，通过调用子组件的方法以更改子组件的状态,也可以调用子组件的方法 子组件与父组件通信 父组件将自己的某个方法传递给子组件，在方法里可以做任意操作，比如可以更改状态，子组件通过this.props接收到父组件的方法后调用。 跨组件通信在react没有类似vue中的事件总线来解决这个问题，我们只能借助它们共同的父级组件来实现，将非父子关系装换成多维度的父子关系。react提供了context api来实现跨组件通信, React 16.3之后的contextapi较之前的好用。 练习实例，使用context 实现购物车中的加减功能 复杂的非父子组件通信在react中很难处理，多组件间的数据共享也不好处理，在实际的工作中我们会使用flux、redux、mobx来实现 17. HOC(高阶组件) 高阶组件是一个函数接受一个组件作为参数，返回一个新的组件 18. React Router原理： React Router甚至大部分的前端路由都是依赖于history.js的，它是一个独立的第三方js库。可以用来兼容在不同浏览器、不同环境下对历史记录的管理，拥有统一的API。 老浏览器的history: 通过hash来存储在不同状态下的history信息，对应createHashHistory，通过检测location.hash的值的变化，使用location.replace方法来实现url跳转。通过注册监听window对象上的hashChange事件来监听路由的变化，实现历史记录的回退。 高版本浏览器: 利用HTML5里面的history，对应createBrowserHistory, 使用包括pushState， replaceState方法来进行跳转。通过注册监听window对象上的popstate事件来监听路由的变化，实现历史记录的回退。 node环境下: 在内存中进行历史记录的存储，对应createMemoryHistory。直接在内存里push和pop状态。 用法:React Router包含了四个包: 包名 Description react-router React Router核心api react-router-dom React Router的DOM绑定，在浏览器中运行不需要额外安装react-router react-router-native React Native 中使用，而实际的应用中，其实不会使用这个。 react-router-config 静态路由的配置 主要使用:react-router-dom 直接按照官网的demo就理解 路由的使用方式: HashRouter、BrowserRouter、Route、Link、exact、404页面处理、Switch、NavLink、params、link的属性（pathname、search、hash、state)、redirect、push、replace、withRouter、prompt HashRouter和BrowserRouter HashRouter:锚点链接 BrowserRouter:H5的新特性（history）如果上线之后，需要后台做一些处理:重定向处理404bug 19. redux传统MVC框架的缺陷什么是MVC？ MVC的全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范。 V即View视图是指用户看到并与之交互的界面。 M即Model模型是管理数据 ，很多业务逻辑都在模型中完成。在MVC的三个部件中，模型拥有最多的处理任务。 C即Controller控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。 MVC只是看起来很美 MVC框架的数据流很理想，请求先到Controller, 由Controller调用Model中的数据交给View进行渲染，但是在实际的项目中，又是允许Model和View直接通信的。然后就出现了这样的结果： ReduxReact 只是 DOM 的一个抽象层，并不是 Web 应用的完整解决方案。有两个方面，它没涉及。 代码结构 组件之间的通信 2013年 Facebook 提出了 Flux 架构的思想，引发了很多的实现。2015年，Redux 出现，将 Flux 与函数式编程结合一起，很短时间内就成为了最热门的前端架构。 如果你不知道是否需要 Redux，那就是不需要它 只有遇到 React 实在解决不了的问题，你才需要 Redux 简单说，如果你的UI层非常简单，没有很多互动，Redux 就是不必要的，用了反而增加复杂性。 用户的使用方式非常简单 用户之间没有协作 不需要与服务器大量交互，也没有使用 WebSocket 视图层（View）只从单一来源获取数据 需要使用Redux的项目: 用户的使用方式复杂 不同身份的用户有不同的使用方式（比如普通用户和管理员） 多个用户之间可以协作 与服务器大量交互，或者使用了WebSocket View要从多个来源获取数据 从组件层面考虑，什么样子的需要Redux： 某个组件的状态，需要共享 某个状态需要在任何地方都可以拿到 一个组件需要改变全局状态 一个组件需要改变另一个组件的状态 Redux的设计思想： Web 应用是一个状态机，视图与状态是一一对应的。 所有的状态，保存在一个对象里面（唯一数据源）。 注意：flux、redux都不是必须和react搭配使用的，因为flux和redux是完整的架构，在学习react的时候，只是将react的组件作为redux中的视图层去使用了。 Redux的使用的三大原则： Single Source of Truth(唯一的数据源) State is read-only(状态是只读的) Changes are made with pure function(数据的改变必须通过纯函数完成) 什么是纯函数: 纯函数指的是 给定固定的输入就一定会有固定的输出，而且不会有任何副作用。 不固定的话像日期对象、ajax请求、异步操作就不是纯函数了 副作用是对接受的参数进行修改。我们可以复制一份修改复制的 20. redux和react-redux区别 redux:js的状态管理 react-redux:为了在react中方便实用redux redux教程: createStore:(创建store) applyMiddleware:(处理中间件) 一个关键问题没有解决：异步操作怎么办？Action 发出以后，Reducer 立即算出 State，这叫做同步；Action 发出以后，过一段时间再执行 Reducer，这就是异步。 怎么才能 Reducer 在异步操作结束后自动执行呢？这就要用到新的工具：中间件（middleware） 引入react-thunk的异步操作（注意:异步一定要放在aciton操作) 注意:定时器、网络请求、事件监听、在组件被销毁前都应得到相应的处理 实战Redux实现TodoList 使用Antd搭建todoList 创建store 创建action和reducer实现添加功能 实现删除功能 actionTypes的拆分 使用actionCreators拆分action UI组件和容器组件 无状态组件 redux中使用异步 redux-thunk redux-sage react-redux:注意版本问题: Provider connect mapStateToProps（将state映射到 UI 组件的参数（props)) mapStateToProps是一个函数,它的作用是建立一个从（外部的）state对象到（UI 组件的props对象的映射关系,传入connect中相当于立即执行,返回一个对象,里面的每一个键值对就是一个映射 mapDispachToProps（输出逻辑，即将用户对 UI 组件的操作映射成 Action。） mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。 mapDispatchToProps为函数的用法 mapDispatchToProps为对象的用法 bindActionCreators:（作用是将一个或多个action和dispatch组合起来生成mapDispatchToProps需要生成的内容） combineReducers:（合并多个reducer） reducer存放过多的数据 可能造成代码的不可维护 最好把reducer拆分 用redux内置的combinReducers函数进行拆分 21. React Hooks教程: 什么是hooks: ​ React一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有. Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性. 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks. 凡是 use 开头的 React API 都是 Hooks. 1. useState useState可以让我们在函数式组件中定义一个state和一个用来修改state的方法 2. useContextContextContext 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。 有部分小伙伴应该使用props属性进行组件向下传值的操作。当多个组件嵌套时候。你就需要慢慢向上寻找最初的值是什么 React.createContext：创建一个上下文的容器(组件), defaultValue可以设置共享的默认数据 Provider(生产者): 和它的名字一样。用于生产共享数据的地方。生产什么呢？ 那就看value定义的是什么了。value:放置共享的数据。 Consumer(消费者):这个可以理解为消费者。 它是专门消费供应商(Provider 上面提到的)产生数据。Consumer需要嵌套在生产者下面。才能通过回调的方式拿到共享的数据源。当然也可以单独使用，那就只能消费到上文提到的defaultValue useContext 如果需要在组件之间共享状态，可以使用useContext()。 useContext 的入参是某个 Provider 提供的 context，如果 context 发生变化的话，返回值也会立即发生变化。 3. useReducerReact 本身不提供状态管理功能，通常需要使用外部库。这方面最常用的库是 Redux。 Redux 的核心概念是，组件发出 action 与状态管理器通信。状态管理器收到 action 以后，使用 Reducer 函数算出新的状态，Reducer 函数的形式是(state, action) =&gt; newState。 useReducers()钩子用来引入 Reducer 功能。 上面是useReducer()的基本用法，它接受 Reducer 函数和状态的初始值作为参数，返回一个数组。数组的第一个成员是状态的当前值，第二个成员是发送 action 的dispatch函数。 4. useEffectEffect Hook可以使得你在函数组件中执行一些带有副作用的方法。 数据获取，设置订阅以及手动更改React组件中的DOM都是副作用的示例。无论你是否习惯于将这些操作称为“副作用”（或仅仅是“效果”），但你之前可能已经在组件中执行了这些操作。 提示： 如果你熟悉React类生命周期方法，则可以将useEffect Hook视为componentDidMount，componentDidUpdate和componentWillUnmount的组合。 useEffect()接受两个参数。第一个参数是一个函数，异步操作的代码放在里面。第二个参数是一个数组，用于给出 Effect 的依赖项，只要这个数组发生变化，useEffect()就会执行。第二个参数可以省略，这时每次组件渲染时，就会执行useEffect()。 constructor(props)React组件的构造函数在挂载之前被调用。 在实现React.Component构造函数时，需要先在添加其他内容前，调用super(props)， 用来将父组件传来的props绑定到这个类中，使用this.props将会得到。 官方建议不要在constructor引入任何具有副作用和订阅功能的代码，这些应当使用componentDidMount()。 constructor中应当做些初始化的动作，如：初始化state，将事件处理函数绑定到类实例上，但也不要使用setState()。如果没有必要初始化state或绑定方法，则不需要构造constructor，或者把这个组件换成纯函数写法。 当然也可以利用props初始化state，在之后修改state不会对props造成任何修改，但仍然建议大家提升状态到父组件中，或使用redux统一进行状态管理。 static getDerivedStateFromProps(nextProps, prevState)getDerivedStateFromProps 是react16.3之后新增，在组件实例化后，和接受新的props后被调用。他必须返回一个对象来更新状态，或者返回null表示新的props不需要任何state的更新。 如果是由于父组件的props更改，所带来的重新渲染，也会触发此方法。 调用setState()不会触发getDerivedStateFromProps()。 之前这里都是使用constructor+componentWillRecieveProps完成相同的功能的 componentWillMount() / UNSAFE_componentWillMount()componentWillMount()将在React未来版本(官方说法 17.0)中被弃用。UNSAFE_componentWillMount()在组件挂载前被调用，在这个方法中调用setState()不会起作用，是由于他在render()前被调用。 为了避免副作用和其他的订阅，官方都建议使用componentDidMount()代替。这个方法是用于在服务器渲染上的唯一方法。这个方法因为是在渲染之前被调用，也是惟一一个可以直接同步修改state的地方。 render()render()方法是必需的。当他被调用时，他将计算this.props和this.state，并返回以下一种类型： React元素。通过jsx创建，既可以是dom元素，也可以是用户自定义的组件。&nbsp; 字符串或数字。他们将会以文本节点形式渲染到dom中。&nbsp; Portals。react 16版本中提出的新的解决方案，可以使组件脱离父组件层级直接挂载在DOM树的任何位置。&nbsp; null，什么也不渲染&nbsp; 布尔值。也是什么都不渲染。 render()方法必须是一个纯函数，他不应该改变state，也不能直接和浏览器进行交互，应该将事件放在其他生命周期函数中。 如果shouldComponentUpdate()返回false，render()不会被调用。 componentDidMountcomponentDidMount在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。 通常在这里进行ajax请求 如果要初始化第三方的dom库，也在这里进行初始化。只有到这里才能获取到真实的dom. componentWillReceiveProps()/UNSAFE_componentWillReceiveProps(nextProps)官方建议使用getDerivedStateFromProps函数代替componentWillReceiveProps。当组件挂载后，接收到新的props后会被调用。如果需要更新state来响应props的更改，则可以进行this.props和nextProps的比较，并在此方法中使用this.setState()。 如果父组件会让这个组件重新渲染，即使props没有改变，也会调用这个方法。 React不会在组件初始化props时调用这个方法。调用this.setState也不会触发。 shouldComponentUpdate(nextProps, nextState)调用shouldComponentUpdate使React知道，组件的输出是否受state和props的影响。默认每个状态的更改都会重新渲染，大多数情况下应该保持这个默认行为。 在渲染新的props或state前，shouldComponentUpdate会被调用。默认为true。这个方法不会在初始化时被调用，也不会在forceUpdate()时被调用。返回false不会阻止子组件在state更改时重新渲染。 如果shouldComponentUpdate()返回false，componentWillUpdate,render和componentDidUpdate不会被调用。 官方并不建议在shouldComponentUpdate()中进行深度查询或使用JSON.stringify()，他效率非常低，并且损伤性能。 UNSAFE_componentWillUpdate(nextProps, nextState)在渲染新的state或props时，UNSAFE_componentWillUpdate会被调用，将此作为在更新发生之前进行准备的机会。这个方法不会在初始化时被调用。 *不能在这里使用this.setState()*，也不能做会触发视图更新的操作。如果需要更新state或props，调用getDerivedStateFromProps。 getSnapshotBeforeUpdate()在react render()后的输出被渲染到DOM之前被调用。它使您的组件能够在它们被潜在更改之前捕获当前值（如滚动位置）。这个生命周期返回的任何值都将作为参数传递给componentDidUpdate（）。 componentDidUpdate(prevProps, prevState, snapshot)在更新发生后立即调用componentDidUpdate()。此方法不用于初始渲染。当组件更新时，将此作为一个机会来操作DOM。只要您将当前的props与以前的props进行比较（例如，如果props没有改变，则可能不需要网络请求），这也是做网络请求的好地方。 如果组件实现getSnapshotBeforeUpdate()生命周期，则它返回的值将作为第三个“快照”参数传递给componentDidUpdate()。否则，这个参数是undefined。 componentWillUnmount()在组件被卸载并销毁之前立即被调用。在此方法中执行任何必要的清理，例如使定时器无效，取消网络请求或清理在componentDidMount中创建的任何监听。 componentDidCatch(error, info)错误边界是React组件，可以在其子组件树中的任何位置捕获JavaScript错误，记录这些错误并显示回退UI，而不是崩溃的组件树。错误边界在渲染期间，生命周期方法以及整个树下的构造函数中捕获错误。 如果类组件定义了此生命周期方法，则它将成错误边界。在它中调用setState()可以让你在下面的树中捕获未处理的JavaScript错误，并显示一个后备UI。只能使用错误边界从意外异常中恢复; 不要试图将它们用于控制流程。 错误边界只会捕获树中下面组件中的错误。错误边界本身不能捕获错误。 PureComponentPureComponnet里如果接收到的新属性或者是更改后的状态和原属性、原状态相同的话，就不会去重新render了在里面也可以使用shouldComponentUpdate，而且。是否重新渲染以shouldComponentUpdate的返回值为最终的决定因素。 不错的文章: "},{"title":"这个时间吃不胖","date":"2021-05-26T09:36:23.000Z","url":"/2021/05/26/zgsjcbp/","tags":[["文章","/tags/%E6%96%87%E7%AB%A0/"],["减肥","/tags/%E5%87%8F%E8%82%A5/"],["知识","/tags/%E7%9F%A5%E8%AF%86/"]],"categories":[["undefined",""]],"content":"第一章：『饮食时间』是瘦身的关键01、今天早上吃早饭了吗？生物钟瘦身的秘密就在于此哦！一听说穷只卷心菜的热量低，你就立刻订购，一旦是相交成的瘦身减肥的流行趋势，你就大量的购买香蕉，每天不停地吃。尽管试验了很多种减肥的方法，但都没能坚持长久，刚刚瘦了一点点，马上又反弹，简直就陷入无止境的反复中。 其实，你的这些努力反而正在故意的增肥呢。人体原本自身拥有一套系统，能够维持健壮而不肥胖的体质，如果违反了这套系统中的运行规律，将会在体内储存多余的脂肪。再加上不合理的减肥方法，长此以往将会变成易胖体质，这简直就是一种恶性循环。 那么在这里我有一个问题要问问你。 今天早上你吃早餐了吗？不会是一个星期有一半以上的时间都没吃早餐吧？ 来自日本卫生部的数据显示，2030岁，3040岁的女性中，不吃早餐的人数比例呈现逐年上升的趋势。与20年前相比，不吃早餐或者只是简单吃点营养品和饮料来代替早餐的人数大幅度增加。特别是20~30岁的女性，不吃早餐的人数增加了一成以上。也就是大概四个人中就会有一个人没有认真吃早餐。 遵循身体自身的生理规律就不会发胖早在上古时代，人类的身体自身就牢牢地记在了一定的生理规律清晨睁开双眼。真心开始了一天的劳作，从白天到傍晚，身体的活动量达到顶点，日落之后，慢慢的进入了休息状态，最后进入梦乡。只要遵循这种自然的生理规律，保持劳作与休息的平衡，那么从食物中获取的能量与劳动中消耗的能量也就能保持一种平衡的关系。 造成肥胖的原因可以理解为从食物中获取的能量没有被彻底的消耗掉，它们在体内形成脂肪后被储存起来。身体自身所记载的生理规律一旦遭到破坏，摄入的能量和消耗的能量就无法达到“收支平衡”，结果造成了肥胖。 把握身体生理规律的关键就是吃早餐。这一点请一定要牢记哦。 晚上9点以后才开始吃晚餐的人要注意啦同样是来自日本卫生部的数据，他们分别对吃早餐的人群和不吃早餐的人群的晚餐时间进行了调查，其结果显示：真正与后者相比，晚餐的时间相对较早。30-40岁的女性人群中，吃早餐的人大部分在晚上8点之前结束当日的晚餐。而在不吃早餐的人群中，有两成左右的人在晚上9点以后才吃晚餐。在20岁至30岁的女性人群中，这个比例占到三成左右。在10-50岁不吃早餐的男性人群中，有三层以上的人在晚上9点以后才吃晚餐。 对于工作或者娱乐的原因，不知不觉中回家的时间被向后拖延了，享用完姗姗来迟的晚餐之后，已是别接近晚上11点了。在整理一下随身的物品，洗澡，身体护理，写写博客等等，一晃也就到了凌晨一两点钟。像这样的事情早已司空见惯，这样以来，次日早晨早早的起床，好好的吃个早饭简直是不可能的。 不吃早餐→拖延晚餐时间→次日仍旧不吃早餐，这已经形成了一种恶性循环，身体自身的生理规律遭到了实质性的破坏，晚睡导致了晚起不吃早餐又造成了身体能量不充足，最后导致整个上午的活动量无法提升。并且由于饥饿感在午餐时间达到了顶点，所以午餐容易吃的过多。 拖延了晚餐时间，不仅仅打破了身体自身的生理规律，同时也成为导致肥胖的直接原因。晚餐时间与就寝时间相隔太近的话，即使身体吸收的营养转化为能量了，也没有时间再去把它消耗掉。无家可归的能量被脂肪细胞所接收，从而形成的脂肪贮存在了人体的内部。 不仅如此，与就寝时间无关，单单是晚餐时间被拖延也会导致体内脂肪的堆积，后面我会对此再进行详细的说明。即便是同样的菜单，同样热量的晚餐越早食用越不容易发胖。 自己肯定不是一个很能吃的人，可是稍不留神立刻就会变胖，更何况自己平时就是一个很注意热量摄入值的人，对油腻的食物或者甜品的摄入都很节制，然而还是瘦不下来。如果你觉得自己属于这样的人群，那么就要请你回想一下，这个星期每天都是几点吃的晚餐呢？ 轮班工作者容易发胖，原因是什么呢？最后是等昼夜交替的轮班工作者和仅在白天工作的人的肥胖指数进行了调查和对比。我们得到一个耐人寻味的数据结果。以身高和体重比例计算得出的肥胖指数BMI（Body Mass Index）中19~22表示标准体重，25以上认定为肥胖。 将调查数据进行比较之后，我们看到轮班工作者的BMI达到26以上的比例是仅在白天工作的人的比例的五倍以上。通过这个数据，基本上证明了昼夜颠倒且不规律的作息时间增加了，成为肥胖体质的概率。 作息时间的变化,当然不仅仅是轮班制工作者所独有的问题，日本NHK电视台曾经作过的一项调查结果显示，夜间11点就请的人数从1970年占日本人口的70%~2005年占40%左右，比例大幅下降。就请时间向后拖延，对就餐时间也产生了影响，使得身体自身的生理规律遭到破坏，变得容易发胖。 记载人体每天的生理规律的载体，我们称之为生物钟。它并不是用来让人们知晓时间的，而是具有自主的记载一定的生育规律并督促细胞按时进行活动的作用。同时，生物钟也发挥着调节各种激素分泌量的作用。因此，即便是在没有时钟的环境下，也可以与平时一样，在相同的时间睡觉，在相同的时间起床。 身体的时差反应导致人体容易发胖生物钟在正常运转的情况下，各种蛋白质就会向细胞传达讯息，使得人那样代谢得到提升，并在运动中形成必要的肌肉，大脑活动也就被进一步激活。这种运转机制已经在近期的研究中得到了证实。燃鹅，如果生物中所记载的生理规律错乱的话，就会导致与上述情况相反的结果。身体代谢变缓，体力下降，思维混乱，简直就像陷入了时差反应的状态。 拖延晚餐且不吃早餐的生活方式迫使身体全年处于倒时差的状态之中，因此无论怎么控制摄入体内的热量，都很难达到减肥的效果。实际上肥胖的原因与其在于说“吃什么”，还不如说在于“什么时间吃”。 02、生物钟是一个精密的运转系统，这也是生物自身了不起的功能。睡眠、觉醒等这些被人体生物钟牢牢记载的生理规律被称为“昼夜节律”。“昼夜节律”于拉丁语表示大约一天的意思。如果以一天为单位来看，身体状态不断上升，逐渐达到顶点，然后慢慢下降。一切身体活动都是受生物钟所记载的昼夜节律所控制的，例如体温在下午3点左右达到最高值，运动能力，肺活量等在傍晚时分能达到顶点。 人体为什么需要这种生理规律呢？我们认为这是人体为了适应由地球自转引起的生活环境变化而形成的规律。昼夜节律就是生物题与地球自转同步的生理规律。生物钟是人体为了适应环境而保留下来的财富，是生物自身逐步进化得到的运转系统。 如果你的生活习惯与这种生理规律背道而驰，就会使身体产生各种不适。人体的肥胖现象就是这类不适反应的一种。 生物中遗传因子掌握着开启生物钟的钥匙生物钟系统在各个领域都备受瞩目，特别是生物钟与饮食的关系。已经逐步成为一门学问，被称为“时间营养学”。其在饮食教育、预防医学，健康科学等众多领域都被广泛研究。 给大家介绍一下生物钟是怎样运转的吧。 大约在十年前，人类发现了一种蛋白物质，称之为“生物中遗传因子”，经研究发现，它在人体内发挥着推动生物钟运转的作用，大脑视神经交叉的地方，也就是在被称为“视交叉上核”的部位上存在着主要生物中遗传因子。主要生物中遗传因子自主地记载着以大约25小时为周期的昼夜节律，从早晨起床时睁开眼睛，接受到第一缕阳光的讯息，开始自动地与地球自转的24小时周期相结合。人体每日沐浴阳光，并由此来调整每一天的体内生物钟。如果长期在黑暗中生活的话，主要生物中遗传因子就会一直按照25小时的周期来不断运转。人体的生理规律相对于地球的自转周期就会一直向后推延。 此外，在末梢部位也存在着生物中遗传因子，同时存在于肝脏，心脏，肾脏，肺，肌肉等人体的各个部位，分别记载着各自的生理规律，并且并不是光线在调节这些生物中因子，而是人们平时的饮食。早晨起床后一个小时内吃早餐可以调整末梢部位的生物中遗传因子，使其主要的生物中遗传因子同步。 全身的生物中遗传因子如果得不到很好的调整，就会各自随意的运转，例如大脑已经清醒而身体还在沉睡之中，所以吃早餐是调节人体生理规律所不可缺少的一项。 吃早餐会使代谢能力自动增强由于食物的刺激，末梢部位的生物中遗传因子一旦开始计算时间，就会增加体内的某种蛋白质，这种蛋白质能够增加用来消耗能量的细胞中的小器官——线粒体，使其促进肌肉合成。它是一种能够提高代谢效率的重要蛋白质。并且，不是白天，也不是夜晚，而是早餐的刺激才能激活起自身的作用。 也就是说，不吃早餐就不能调节末梢部位的生物中遗传因子，因此身体代谢效率下降，逐渐变成了容易肥胖的体质。 蛋白质的增减调节着生物钟的节奏让我们更加详细的看一下生物中遗传因子的运转机制吧。 大脑的视交叉上核里存在的主要生物中遗传因子里存在着Clock蛋白和Bmall蛋白，然后产生叫做Per蛋白和Cry蛋白的物质。而实际上Per蛋白和Cry蛋白又是妨碍Clock蛋白和Bmal;蛋白运转的物质。 Per蛋白和Cry蛋白的增加会削弱Clock蛋白和Bmall的蛋白的作用，这种削弱同时也会使per蛋白和Cry蛋白的含量减少。Bmall蛋白和Clock蛋白又被再次激活。这样看来，他们的运转机制就像拔河运动一样。在这些物质中，描绘增减曲线的主要物质是Bmall蛋白。据研究发现，这种物质能够起到促进脂肪合成的作用，在下午2点~4点这个时间段数量最少，而在夜间的10点到第二天凌晨的两点，这个时间段的数量急剧增加，所以夜间用餐很容易发胖也是这个原因。 03、生物钟瘦身法则：早起——所有减肥方法的基础之前已经对人体生物钟和生物中遗传因子做了一个简单的介绍。 为了能够锻炼成不容易变胖体质，我们应该怎么做呢？ 首先就是要做到早起。早起的目的是为了让清晨的光线激活大脑里主要生物中遗传因子。主要生物中遗传因子就像是人体全身的生物中遗传因子的指挥官。各自肩负着向记载着生理规律的末梢部位的生物中遗传因子传递“清晨已经来临”这一信息的职责。所以消除时差反应最有效的方法就是——沐浴阳光。 在治疗失眠的临床研究中也有使用发光二极管的光治疗方法，这也是为了让主要生物中遗传因子开始工作时其能够恢复正常的昼夜节律。 能够使主要生物中遗传因子正常工作的物质就是清晨的阳光。首先需要让“指挥官”苏醒，然后用一天的时间来指挥身体的这个大型“交响乐团”。因此，让身体有一个良好的开始是非常重要的。如果能够与日出同时出发享受第一缕阳光的话，那是非常理想的状态。当然，不出房门仅仅是在屋子里感受阳光也是可以的，但随着地球的自转，尽可能的早起。感受阳光的沐浴，无论是天气好坏，阳光每天会依旧普照大地，无论是阴天还是雨雪天，阳光对人体产生的效果是一样的。 昼夜颠倒的轮班制工作者容易变得肥胖，这已经是不产自明的事情了。追踪生活不规律的学生得到的调查结果显示，人体在上午的活动量非常少，而且代谢效率也很低。这都是因为他们没有好好的接受大自然给人类的恩惠——阳光。尽管多数人都是在白天工作的上班族，但也有很多人通勤时间是相对自由的弹性工作制，尤其到了休息日，从工作日的疲劳奔波状态突然过渡到一觉睡到日上三竿的懒散生活如果每天坚持规律地生活在固定的时间起床，那么就很难造成体内的生物钟混乱，并且早晨的时间也会变得很充裕。从而养成每天吃早饭的好习惯，这也是早起的一大优点。 认真吃早餐是瘦身的秘诀吃早餐是瘦身的另一款则包括肝脏在内的全身生物中遗传因子就可以完全的与主要生物中遗传因子进行同步。并且起床后一小时以内吃早餐是调整体内生物钟生理规律的条件。不吃早餐的日子，人体的大脑和身体的生物钟各自运转不相协调。身体虽然开始活动了，但是大脑还没有完全的清醒。 日本的教育部门针对全国10万人进行了学历测试，其结果显示，每天吃早餐的学生比不吃早餐的学生的成绩要高出20%。吃早餐的学生，每一门功课的学习成绩都比不吃早餐的学生优秀20%。足以可见吃早餐的重要性。 有些人认为如果不吃饭的话，至少能够减少这一顿饭的热量，这简直是大错特错。与之相反，大脑没有充分的运转起来，反而容易陷入更加肥胖的状态。 所谓的早餐，不仅仅只是随便喝点饮料或者是营养品就草草了事的，而是尽可能的做到主食主菜，副菜样样俱全。生物钟瘦身法的饮食关键也是由此开始的。 我们之前已经提到过，构成主要生物中遗传因子的Bmall蛋白是促进脂肪合成的主要物质。Bmall单倍的数量在白天相对减少，在夜间相对增加。所以需要很好的利用这一特点。为了防止晚餐吃的过多，可以尽量的在白天多吃一些。因为在白天，Bmall蛋白不会起作用，所以尽管多吃了一些，也几乎没有脂肪增长的风险。而且晚餐最晚在晚上9点之前想用尽量摄取脂肪含量少的食品，这也是最基本的方法。 以适度的运动来支撑生物钟的运转早睡、早起、吃早餐是生物钟瘦身法的三大支柱。遵循这三大法则可以得到不容易变胖的体质，为了提高人体体内生物钟的调节作用，提高人体代谢效率，进一步达到减肥的效果。我在向大家推荐一套运动瘦身法。 从人体生物中所记载的生理规律的角度来看，一天中最适合运动的时间段是傍晚的6点左右。是身体各种机能都达到顶点的黄金时间。研究表明，在这个时段运动能够更多的分泌促进脂肪代谢的甲状腺刺激激素以及增长肌肉，修复身体组织的成长技术，并且通过运动可以更好的处理体内产生的疲劳物质。如果是同样强度的运动，与早晨相比范围运动的效率相对更高。 运动得到高质量的睡眠并不是说其他时间段的运动就没有意义，如果将能够燃烧脂肪的轻度有氧运动通过刺激肌肉来防止代谢效率下降的简单肌肉训练，提高睡眠质量的睡前伸展运动等多种运动结合起来的话，减肥的效果将是非常显著的。 运动还发挥着调整自身神经的交感神经与副交感神经之间的平衡作用。白天促进人体活动的交感神经被激活一晚，让人体进入休息状态的副交感神经占到上风，这也是人体生物钟的生理规律之一。但是人如果一直是持续加班吃宵夜、夜猫子的生活方式，要把神经就会一直处于兴奋状态，身体始终无法进入休息状态，所以人也得不到高质量的睡眠。 交感神经被激活起到主要作用，而运动结束后，副交感神经就会开始进入工作状态。从这个意义上来讲，傍晚以后的身体运动也是非常重要的。 生物钟瘦身法和七个小贴士 尽量早起沐浴清晨的阳光。 早餐必须要吃，并且要吃好。 午餐可以多吃，就算把肚子吃的鼓鼓的也完全OK。 晚餐要在8点之前吃完。 晚餐要特别注意摄入低脂肪的食物。 为了第二天早上能够起来保持头脑清醒，千万不要持续熬夜。 这样看来，这七条规则都是大家所熟知的基本方法，没有一项是新鲜的，但是如果你最近感觉变得特别容易发胖，说不定就是因为你没有把握住最基本最理所当然的事情。生物中所记载的生理规律去生活的话，我们就不会再为肥胖问题而烦恼了。 在当今这种快节奏的生活环境里，你可能会认为做到以上几点是非常困难的，而实际上这种正确的生活方式绝对不是你想象的那样遥不可及。一旦养成早起和吃早饭的习惯，你就已经站在了正确的队伍之中。人体内混乱的生物钟得到再一次正确的调整，几天内都会按照正确的生物钟进行运转。 刚开始的时候，每星期只坚持两至三天也是可以的，比平时早起30分钟努力把早饭吃好，那么你体内的生物钟就会与地球自转相适应，生活节奏也会大有改善，毕竟人体体内本来就拥有一种防止身体发胖的系统。我们应该好好的利用他，努力改正导致肥胖的坏习惯。让我们一起来倾听记载着人体生理规律的生物钟所发出悦耳的滴答声吧！"},{"title":"这是第8033天的打卡","date":"2021-05-22T09:00:21.000Z","url":"/2021/05/22/%E8%BF%99%E6%98%AF%E7%AC%AC8033%E5%A4%A9%E7%9A%84%E6%89%93%E5%8D%A1/","tags":[["日记","/tags/%E6%97%A5%E8%AE%B0/"]],"categories":[["undefined",""]],"content":" 四季交替，日转星移。迈奇依旧唱歌，烛光依旧闪耀。有的人成为了大佬，有的人考上了研究生。大家都奔赴于理想之途，与无边的寂寞相伴，沐浴不同的阳光，也淋着冷漠的雨，只是大家都探寻到了各自奔波的意义，而我还是那个菜鸡。当我发现又过了一年，当我突然领悟歌词的意义…人生啊，第8033天打卡。 祝自己第22岁生日快乐……"},{"title":"Hello World","date":"2021-05-22T08:24:00.413Z","url":"/2021/05/22/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"教资中学科目一作文练手《以奋斗创造未来》","date":"2021-03-10T07:23:25.000Z","url":"/2021/03/10/zuowen/","tags":[["作文","/tags/%E4%BD%9C%E6%96%87/"],["教师资格证","/tags/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/"],["科目一","/tags/%E7%A7%91%E7%9B%AE%E4%B8%80/"]],"categories":[["undefined",""]],"content":"考题内容阅读下面的材料，按要求写作文。 【材料一】“人的一生应当这样度过，当他回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞耻……”《钢铁是怎样炼成的》主角保尔·柯察金以其钢铁般的意志和为理想而奋斗的精神，激励了一代代青年投身社会主义建设。 【材料二】“生活不能等待别人来安排，要自己去争取与奋斗！”，《平凡的世界》里的农村青年——孙少平，在苦难面前咬牙坚持，积极抗争，让一代代人从中获得精神的力量，增添了克服困难的勇气。 写作要求1、综合上述材料所引发的思考和感悟，写一篇论说文。 2、用规范的现代汉语写作，角度自选，立意自定，题目自拟。 【字数要求】小学800字，中学1000字。 练手作文详情《奋斗创造未来 》作者：chenlx古话说“少壮不努力，老大徒伤悲”，“长风破浪会有时，直挂云帆济沧海”。“奋斗”二字，从古至今都有文学写着关于这个词的描绘。对于我们来说，什么才是奋斗呢？ 奋斗，是一场考试前她的奋笔疾书认真备考，放榜时看到成绩的洋溢着喜悦的笑脸；奋斗，是农民在田野里辛勤地劳作挥洒着汗水，在火红的秋日里丰收时那捧在怀里的稻香；奋斗，是新中国成立后，先辈们通过艰苦拼搏反复尝试，后人们接力共同打造出如今的世界第二大经济体，让百姓可以安居乐业的生活。 为什么需要依靠奋斗来创造未来？我们所渴望、所期待的未来生活多姿多样。我们畅想着，在未来，我们不用害怕路上的危险，不用担心敌人的欺凌，不用担心吃不饱穿不暖，不用担心不能在知识的汪洋里遨游。但这一切离不开实力，离不开通过奋斗积累出的实力。 在西汉年代，有一位特别有学问的人名叫匡衡。可匡衡小时候非常的贫穷，家里连根照明的蜡烛都买不起。但匡衡为了在夜里也可以读书，他得知隔壁人家有光后，便在墙上凿了一个洞，以此偷光读书。后来，匡衡的这个举动感动了他的邻居。后来在大家的帮助下，小少年匡衡终于学有所成。在汉元帝时期，匡衡也被封为了郎中。 奋斗的故事在我们现代同样随处可见。2020 年，伴随着我国的北斗定位系统完成了最后一颗卫星的发射，至此，我国终于拥有了自己的全球定位系统。可是这一切，得来的并不容易。 在我们国家的科学家研发北斗系统之初，我们什么核心技术都没有掌握。在这个几乎等同于从零开始的情况之下，科学家们还必须在规定的时间之前先行发射一颗卫星上去使用定位系统的频段号，否则，国际组织就不承认这个频段号归属北斗所用。算法、硬件、原子钟…… 科学家们在有限的时间里艰苦奋斗，克服重重困难，终于发射出了中国的第一颗北斗。在往后的日子里，科学家们日以夜继，终于在去年完成了北斗系统的组网并成功投入使用。感动中国栏目中组曾这样评价道：“当第五十五颗吉星升上太空，北斗，照亮了中国人的梦”。 所以，美好的未来需要靠我们去努力奋斗。我们不必一口气再造出个北斗，也没有必要 凿光读书。在我们的生活中，每一件事情都值得去奋斗。我们可以勤加锻炼身体，保证奋斗 的基本；认真复习，迎接每一场考试。或者我们可以团结协作，夺得一份荣誉，也可以当志愿者服务百姓，为美好社会献上一份自己的力量。 需要奋斗的事情有很多很多，奋斗的方式也多种多样。奋斗的时间或许有长有短，但一定能通过自己的努力奋斗出满意的结果，创造出自己期望的美好的未来！ 作文点评预估分数：39写作亮点 本文立意清楚，开头结合诗词直接引出立意，首尾呼应。 结构上层层递进，结合例子，流畅有力。 写作不足 不知道是不是电脑显示问题，文章分了8段，段落有些多，基本在4-6就可以了，一般5段最为完美，太多分 段会感觉很分散，可以开头-奋斗是什么-为什么奋斗-怎么去奋斗-结尾分为这五段。 怎样奋斗可以运用排比句的方式，①奋斗是勤加锻炼身体，奋斗是读书储备知识，奋斗是为社会做贡献， 奋斗可以是任何一件小事，奋斗努力的过程，就是小事迸发出最大的力量的过程。 结尾可以联系下材料，②奋斗是匡衡、北斗、、、然后加上原文需要到未来这部分会更好。 "},{"title":"boot链接neo4j遇到的一些报错知识库","date":"2021-02-28T16:00:00.000Z","url":"/2021/03/01/boot%E9%93%BE%E6%8E%A5neo4j%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99%E7%9F%A5%E8%AF%86%E5%BA%93/","tags":[["SpringBoot","/tags/SpringBoot/"]],"categories":[["undefined",""]],"content":"org.springframework.data.mapping.MappingException: Error mapping Record Caused by: org.springframework.dao.TypeMismatchDataAccessException: Could not convert “” into java.util.List&lt;java.lang.String&gt;; nested exception is org.neo4j.driver.exceptions.value.NotMultiValued: STRING is not iterable Caused by: org.neo4j.driver.exceptions.value.NotMultiValued: STRING is not iterable 解决办法：将该字段类型改成Object即可。"},{"title":"2月25日数据指标项目会议记录","date":"2021-02-25T09:00:21.000Z","url":"/2021/02/25/0225%E4%BC%9A%E8%AE%AE%E8%AE%B0%E5%BD%95/","tags":[["会议记录","/tags/%E4%BC%9A%E8%AE%AE%E8%AE%B0%E5%BD%95/"]],"categories":[["undefined",""]],"content":"1104监管标准制定（计划3月份开始） 围绕分析数据标准的流程 方法 机制（主要介绍模板） 专题优先（e.g 客户 、风险） 分析数据标准的框架框架源自于哪里？最初的原型是毕马威，细分（二级）是国际金融体系 现在要做的1104数据标准在框架里对应的是监管合规吗？特殊、通用由谁判断分析的时候进行判断。分类框架不是纠结与口径的问题，。为什么单独列出来监管合规，是因为与行里不一样（比较特殊）。指标之间是有关系的。 运营管理为什么也是单独分裂（为什么不是跟风险管理同一个级别）包含渠道、流程的专题，面向客户、财务分析、（来源于毕马威） 银行业务 六大类。 信息管理要单列： 分类方向不能用专题来分。银行业务四个字有点模糊（所有的东西都算是银行业务、概念太泛） 毕马威提的银行业务吗、绩效指标放哪里不是。提的是业务规模。理论上这个框架跟报告上的框架要么统一，要么 信息管理要不要单列 有没有那么重要？里面其实指标不多系统运维、数据质量指标。理论上可以放到运维管理。信息管理可以合并到运营管理。系统运行关注点可能在生产运维。我们要关注偏业务层面的事物。 资产负债其实是一个很重要的大的专题其实可以单列出来。资产负债理论上是讲流动性的事务，资产负债管理是银行非常重要的数据方向。在以前的报告就提现的是。建议信息管理的模块替换或合并成资产负债。 银行业务原来叫业务规模，原来放在财务绩效（面向部门不是个人的KPI）。建议照样保留业务规模，与财务分析天然就有关联。如果指标过多，可以当成两个专题。 CRM只涵盖营销部分。 客户管理客户关系管理的区别是什么。认为是一样的。客户管理包括关系管理。分析标准上谈论的客户管理其实就是客户关系管理。加上目前的名称都是4个字，所以干脆就叫客户管理。（叫CRM是想体现银行跟客户的关系） 监管合规包含运营管理吗后面一定会碰到这个的情况的。 为什么是单列而不是在某个具体的指标进行展开。 在监管合规不要分口径子项目。不要体现口径二字。在框架图里，不谈论具体的指标。对于每一个具体的事项要能避免歧义、解释清楚。改成指标。在分析数据标准的属性框架图中，业务需要重点关注的点是？手工指标建议改成数据元。 编号后续再继续详细讨论，要保证编码的稳定性Excel模板（工作底稿）模板的必填项要设置。如果有多个部门共同制定的一个指标，这个场景应该怎么处理。先按报表主责、或者按部门占比认责。 如果指标要调整，但是没有主责方，执行层面上应该怎么处理。没人负责的情况下，由上一级排版仲裁（数据治理委员会等） 拿到一个报表需求，定义出来的指标，往下拆解（分析过程）。怎么拆解？拆解的原则类名实例PPT什么叫类？从哪里来的？维度不同不同角度（维度）进行计算，但是计算结果是一样的。 从业务层面讲，是一个东西。但从计算角度来讲，计算方式不一样（口径） "}]