<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>antd框架的table组件多次封装中的slot问题解决办法</title>
      <link href="2021/08/03/20210803antdtableslotinfo/"/>
      <url>2021/08/03/20210803antdtableslotinfo/</url>
      
        <content type="html"><![CDATA[<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><p>vue、slot、ant-degisn-vue、父子之间通信</p><h1 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h1><p>一般来说，可以直接使用a-table组件对页面进行布局和使用。但由于这个需求，这个基础组件还需要自己去配置一些其他的参数，而且这种表格非常的多，就考虑到了自己封装组件的方式来简化一部分的代码。对于把表格弄进自己封装的组件，常规字符是没有问题，但遇到需要自定义某一列的数据格式的时候就不行了。如果没听懂我说什么，看一下效果图。【状态】列、【角色名称】列就是自定义的效果。</p><p><img src="https://i.loli.net/2021/08/03/GIxek79Z3MBfAXo.png" alt="最终效果图.png"></p><blockquote><p>自定义内容指的是常规内容以外的内容，往往涉及到另外的标签代码。如：</p><ul><li>数据库中的男女字段从0、1变成男、女；</li><li>操作列按钮</li><li>一些状态标签</li><li>时间格式化</li></ul></blockquote><h1 id="本文约定的页面与数据传递的关系"><a href="#本文约定的页面与数据传递的关系" class="headerlink" title="本文约定的页面与数据传递的关系"></a>本文约定的页面与数据传递的关系</h1><p>本文的页面叫<code>index.vue</code>；</p><p>页面包含了封装的组件<code>queryFormTable.vue</code>，在这简称Q吧；</p><p>封装的组件Q中使用到了封装atable组件，叫作<code>MutiFunctionalTable.vue</code>，这个组件包含了table本身的功能，还有排序、显示列、固定列等功能。简称M吧。</p><p>M所用到的参数分别是表头<code>tableColumns</code>和表数据<code>tableData</code>。这些数据会从index传入到Q，再由Q传到M。</p><h1 id="碰壁过程"><a href="#碰壁过程" class="headerlink" title="碰壁过程"></a>碰壁过程</h1><p>在原本的a-table组件里，如果遇到自定义列的需求时，在table标签里填入<code>&lt;template&gt;</code>标签、并在column的信息里指定好相关的slot参数即可。</p><p>但是现在，因为封装成组件M了，这些slot相关的信息就没有办法直接填在这里。这些信息就需要由外头引入进来。</p><p>原本我的想法是，由在index里写个<code>&lt;slot name="tableSlot"/&gt;</code>，把原本表格的<code>slot列</code>信息传递到Q里，再由Q传递到M。结果发现，不行。</p><p>接着，我就先不考虑父子孙的传递，考虑在子孙之间传递一下slot。所以我把index这边的信息丢到Q这里试一下，发现，不行。</p><p>然后，我又试着继续用父子孙进行传递，但是不传slot，传递普通的信息<code>&lt;p&gt;hello&lt;/p&gt;</code>，并且，在M里把接收的slot挪到表格外面来。看了一下效果，可以！</p><p>也就是说这个那个。经过试验证明，**<code>&lt;slot&gt;</code>不能通过<code>&lt;slot&gt;</code>传递<code>&lt;slot&gt;</code>。**</p><p>父子孙传递可以用slot一级一级的传递，但是！好像slot不能嵌套slot。准确的说，是因为自己本身就借由插槽传东西了，传递的东西就不能是slot本身的信息。</p><p>但是稍微变一下思路，既然不能从1条高速路将东西传过去，那就自己开路把东西一级一级的传过去，有多少东西开多少路。也就是说，按照自定义的数量n，分别从index开n个插槽到Q；再由Q开插槽到M。再借由层层传递的数据表头循环出对应的插槽内容即可。</p><blockquote><p>毕竟鲁迅曾经说过：世界上本没有路，没人说slot只能用1个，所以可以多个。</p></blockquote><p><img src="https://i.loli.net/2021/08/03/LjRDtnhoYcIOdTb.png" alt="代码预览.png"></p><p>注：红色框起来的是涉及到的代码部分，看这边就行；黄色框是提示在哪一个标签里面及其标签内容的范围。</p><ul><li>在index里声明了需要自定义内容的插槽信息。<code>slot</code>的字段要与最后表头信息里的slot字段要一致，不然一切都是白搭。<code>slot-scope</code>是回传的每一行的信息集合。因为自定义的内容往往都涉及到了对参数的格式更改或者其他的操作函数所需要的参数。函数的信息或者格式的规则都是写在index里的，所以需要知道每一行的信息才有办法进行格式或者是其他操作（起码需要知道主键信息，但我一般都选择回传整行的对象）</li><li>在Q 里，遍历一遍表头信息并开辟所需的插槽。传递给M的同时将表格数据遍历回传给index。</li><li>在M里接收传递过来的插槽信息并显示。</li></ul><h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a>index.vue</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="settingEdit" class="whiteBackBox"&gt;</span><br><span class="line">    &lt;query-form-table</span><br><span class="line">      :searchParams="par"</span><br><span class="line">      :tableData="tableData"</span><br><span class="line">      :tableColumns="tableColumns"</span><br><span class="line">      :needTableCheckList="true"</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template slot="functionBtnsBox" class="btnBox"&gt;</span><br><span class="line">        &lt;a-button</span><br><span class="line">          type="primary"</span><br><span class="line">          class="marginBtn"</span><br><span class="line">          icon="plus"</span><br><span class="line">          @click="createNewRole"</span><br><span class="line">          &gt;新增&lt;/a-button</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;a-button type="primary" class="marginBtn" icon="edit"&gt;修改&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type="primary" class="marginBtn" icon="delete"&gt;删除&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button type="primary" class="marginBtn" icon="export"&gt;导出&lt;/a-button&gt;</span><br><span class="line">        &lt;a-button</span><br><span class="line">          type="primary"</span><br><span class="line">          class="marginBtn"</span><br><span class="line">          icon="import"</span><br><span class="line">          @click="$refs.ModalUserManage.isModalShow = true"</span><br><span class="line">          &gt;用户管理&lt;/a-button</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;a-button type="primary" class="marginBtn" icon="export"</span><br><span class="line">          &gt;菜单授权&lt;/a-button</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;a-button type="primary" class="marginBtn" icon="question"</span><br><span class="line">          &gt;角色项目授权&lt;/a-button</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;a-button type="primary" class="marginBtn" icon="unlock"</span><br><span class="line">          &gt;补录报表授权&lt;/a-button</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template slot="roleStatus" slot-scope="row"&gt;</span><br><span class="line">        &lt;a-switch</span><br><span class="line">          checked-children="正常"</span><br><span class="line">          un-checked-children="禁用"</span><br><span class="line">          default-checked</span><br><span class="line">          @change="handleRoleStatusChange(row.data)"</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template slot="roleName" slot-scope="row"&gt;</span><br><span class="line">        &lt;b&gt;{{row.data.roleName}}&lt;/b&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template slot="tableActionBox" slot-scope="row"&gt;</span><br><span class="line">        &lt;a-button&gt;删除{{row.data.data.roleIndex}}&lt;/a-button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/query-form-table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;userAddModal ref="userAddModal" /&gt;</span><br><span class="line">    &lt;ModalUserManage ref="ModalUserManage" /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { getTreeSel, getroleTable } from "@/api/test";</span><br><span class="line">import ModalUserManage from "./components/ModalUserManage.vue";</span><br><span class="line">import userAddModal from "../components/userAddBox.vue";</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      par: [</span><br><span class="line">        {</span><br><span class="line">          name: "roleIndex",</span><br><span class="line">          label: "角色编号",</span><br><span class="line">          type: "input",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "roleName",</span><br><span class="line">          label: "角色名称",</span><br><span class="line">          type: "input",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "roleAlias",</span><br><span class="line">          label: "角色别名",</span><br><span class="line">          type: "input",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          name: "roleStatus",</span><br><span class="line">          label: "角色状态",</span><br><span class="line">          type: "select",</span><br><span class="line">          selectList: ["正常", "停用"],</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">      tableData: [</span><br><span class="line">        // {</span><br><span class="line">        //   roleIndex: 1,</span><br><span class="line">        //   roleName: "张三",</span><br><span class="line">        //   roleAlias: "阿达",</span><br><span class="line">        //   parentIndex: 12,</span><br><span class="line">        //   parentName: "李四",</span><br><span class="line">        //   status: 1,</span><br><span class="line">        //   ctime: "2021-7-3 17:21:52",</span><br><span class="line">        // },</span><br><span class="line">      ],</span><br><span class="line">      tableColumns: [</span><br><span class="line">        {</span><br><span class="line">          title: "角色编号",</span><br><span class="line">          dataIndex: "roleIndex",</span><br><span class="line">          key: "roleIndex",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          title: "角色名称",</span><br><span class="line">          dataIndex: "roleName",</span><br><span class="line">          scopedSlots: { customRender: "roleName" },</span><br><span class="line">          key: "roleName",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          title: "角色别名",</span><br><span class="line">          dataIndex: "roleAlias",</span><br><span class="line">          key: "roleAlias",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          title: "上级角色编码",</span><br><span class="line">          dataIndex: "parentIndex",</span><br><span class="line">          key: "parentIndex",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          title: "上级角色名称",</span><br><span class="line">          dataIndex: "parentName",</span><br><span class="line">          key: "parentName",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          title: "状态",</span><br><span class="line">          dataIndex: "roleStatus",</span><br><span class="line">          scopedSlots: { customRender: "roleStatus" },</span><br><span class="line">          key: "roleStatus",</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          title: "创建时间",</span><br><span class="line">          dataIndex: "ctime",</span><br><span class="line">          key: "ctime",</span><br><span class="line">        },</span><br><span class="line">        // {</span><br><span class="line">        //   title: "操作",</span><br><span class="line">        //   key: "action",</span><br><span class="line">        //   scopedSlots: { customRender: "action" },</span><br><span class="line">        // },</span><br><span class="line">      ],</span><br><span class="line">      orgTree: [],</span><br><span class="line">      value: undefined,</span><br><span class="line">      treeData: [],</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  mounted: function () {</span><br><span class="line">    // getTreeSel().then((res) =&gt; {</span><br><span class="line">    //   this.treeData = res.data.data;</span><br><span class="line">    // });</span><br><span class="line">    getroleTable().then((res) =&gt; {</span><br><span class="line">      console.log(res.data.data);</span><br><span class="line">      this.tableData = res.data.data;</span><br><span class="line">      this.$forceUpdate();</span><br><span class="line">    });</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    createNewRole() {</span><br><span class="line">      this.$refs.userAddModal.isModalVisible = true;</span><br><span class="line">    },</span><br><span class="line">    handleRoleStatusChange(row) {</span><br><span class="line">      // console.log("状态改变：",checked,event);</span><br><span class="line">      console.log("状态改变：",row);</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  components: {</span><br><span class="line">    // queryFormTable,</span><br><span class="line">    userAddModal,</span><br><span class="line">    ModalUserManage,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.btnBox {</span><br><span class="line">  margin: 5px 0;</span><br><span class="line">}</span><br><span class="line">.marginBtn {</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  margin-bottom: 5px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="queryxxxxxx-vue"><a href="#queryxxxxxx-vue" class="headerlink" title="queryxxxxxx.vue"></a>queryxxxxxx.vue</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="query-form-table" v-if="readyRender"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a-form-model layout="inline" :model="searchForm" ref="form"&gt;</span><br><span class="line">        &lt;template v-for="(param, pindex) in searchParams"&gt;</span><br><span class="line">          &lt;a-form-model-item</span><br><span class="line">            :prop="param.name"</span><br><span class="line">            :label="param.label"</span><br><span class="line">            :key="pindex"</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;template v-if="param.type === 'input'"&gt;</span><br><span class="line">              &lt;a-input v-model="searchForm[param.name]"&gt;&lt;/a-input&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else-if="param.type === 'select'"&gt;</span><br><span class="line">              &lt;a-select</span><br><span class="line">                v-model="searchForm[param.name]"</span><br><span class="line">                :default-value="param.selectList[0]"</span><br><span class="line">                style="width: 150px"</span><br><span class="line">              &gt;</span><br><span class="line">                &lt;a-select-option</span><br><span class="line">                  v-for="(selItem, selIndex) in param.selectList"</span><br><span class="line">                  :key="selIndex"</span><br><span class="line">                  :value="selItem"</span><br><span class="line">                  &gt;{{ selItem }}</span><br><span class="line">                &lt;/a-select-option&gt;</span><br><span class="line">              &lt;/a-select&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-else-if="param.type === 'tree'"&gt;</span><br><span class="line">              &lt;a-tree-select</span><br><span class="line">                v-model="searchForm[param.name]"</span><br><span class="line">                style="width: 150px"</span><br><span class="line">                :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }"</span><br><span class="line">                :tree-data="param.treeData"</span><br><span class="line">                :tree-checkable="param.multiple"</span><br><span class="line">                :show-checked-strategy="SHOW_PARENT"</span><br><span class="line">                placeholder="请单击选择..."</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;/a-tree-select&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/a-form-model-item&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;a-form-model-item style="float: right"&gt;</span><br><span class="line">          &lt;a-button type="primary" class="marginBtn" @click="handleQuery()"</span><br><span class="line">            &gt;查询&lt;/a-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;a-button type="primary" class="marginBtn" @click="handleClearForm()"</span><br><span class="line">            &gt;重置&lt;/a-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/a-form-model-item&gt;</span><br><span class="line">      &lt;/a-form-model&gt;</span><br><span class="line">      &lt;div class="slotBox"&gt;</span><br><span class="line">        &lt;slot name="functionBtnsBox"&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;muti-func-table</span><br><span class="line">        :tableData="tableData"</span><br><span class="line">        :tableColumns="tableColumns"</span><br><span class="line">        :needCheckList="needTableCheckList"</span><br><span class="line">      &gt;</span><br><span class="line">         &lt;template  v-for="column in tableColumns"  :slot="column.scopedSlots?column.scopedSlots.customRender:''" slot-scope="text,record" &gt;</span><br><span class="line">           &lt;!-- {{column}} --&gt;</span><br><span class="line">&lt;slot :name="column.scopedSlots?column.scopedSlots.customRender:''" v-bind="record" :data="text"&gt;</span><br><span class="line">          &lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;template slot="actionBox" slot-scope="data"&gt;</span><br><span class="line">          &lt;slot name="tableActionBox" :data="data"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- 这里的插槽将作用在每一行数据的操作栏上，record代表回传的当前行数据 --&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/muti-func-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import { TreeSelect } from "ant-design-vue";</span><br><span class="line">const SHOW_PARENT = TreeSelect.SHOW_PARENT;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      readyRender: true,</span><br><span class="line">      SHOW_PARENT,</span><br><span class="line">      isTableLoading: true,</span><br><span class="line">      searchForm: {},</span><br><span class="line">      pagination: {</span><br><span class="line">        defaultPageSize: 5,</span><br><span class="line">        showQuickJumper: true,</span><br><span class="line">        // 显示每页多少条数据</span><br><span class="line">        showSizeChanger: true,</span><br><span class="line">        showTotal: (total, range) =&gt;</span><br><span class="line">          `共${total}条数据，当前第${</span><br><span class="line">            Math.floor(range[0] / this.pagination.defaultPageSize) + 1</span><br><span class="line">          }/${Math.ceil(total / this.pagination.defaultPageSize)}页`,</span><br><span class="line">        // showSizeChanger:true,</span><br><span class="line">        pageSizeOptions: ["5", "10", "15", "20", "50"],</span><br><span class="line">        onShowSizeChange: (current, pageSize) =&gt;</span><br><span class="line">          (this.pagination.defaultPageSize = pageSize),</span><br><span class="line">        total: 0, //总条数</span><br><span class="line">      },</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  props: {</span><br><span class="line">    searchParams: Array,</span><br><span class="line">    tableData: Array,</span><br><span class="line">    tableColumns: Array,</span><br><span class="line">    needTableCheckList: Boolean,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    aa() {</span><br><span class="line">      console.log(this.tableData, this.tableColumns);</span><br><span class="line">    },</span><br><span class="line">    handleClearForm() {</span><br><span class="line">      this.$refs["form"].resetFields();</span><br><span class="line">    },</span><br><span class="line">    handleQuery() {</span><br><span class="line">      console.log(this.searchForm);</span><br><span class="line">    },</span><br><span class="line">    genTreeNode(parentId, isLeaf = false) {</span><br><span class="line">      const random = Math.random().toString(36).substring(2, 6);</span><br><span class="line">      return {</span><br><span class="line">        id: random,</span><br><span class="line">        pId: parentId,</span><br><span class="line">        value: random,</span><br><span class="line">        title: isLeaf ? "Tree Node" : "Expand to load",</span><br><span class="line">        isLeaf,</span><br><span class="line">      };</span><br><span class="line">    },</span><br><span class="line">    onLoadData(treeNode) {</span><br><span class="line">      return new Promise((resolve) =&gt; {</span><br><span class="line">        const { id } = treeNode.dataRef;</span><br><span class="line">        setTimeout(() =&gt; {</span><br><span class="line">          this.treeData = this.treeData.concat([</span><br><span class="line">            this.genTreeNode(id, false),</span><br><span class="line">            this.genTreeNode(id, true),</span><br><span class="line">          ]);</span><br><span class="line">          resolve();</span><br><span class="line">        }, 300);</span><br><span class="line">      });</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  mounted: function () {</span><br><span class="line">    console.log(this.tableData);</span><br><span class="line">    // console.log(this.searchParams)</span><br><span class="line">    // for(let i in this.searchParams)</span><br><span class="line">    // this.searchForm[this.searchParams[i].name]=''</span><br><span class="line">  },</span><br><span class="line">  watch: {</span><br><span class="line">    tableData: function (newVal) {</span><br><span class="line">      if (newVal) {</span><br><span class="line">        // this.readyRender=true</span><br><span class="line">        this.$forceUpdate();</span><br><span class="line">        this.isTableLoading = false;</span><br><span class="line">      } else {</span><br><span class="line">        // this.readyRender=false</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.marginBtn {</span><br><span class="line">  margin: 0 5px;</span><br><span class="line">}</span><br><span class="line">.slotBox {</span><br><span class="line">  margin: 5px 0;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="table-vue"><a href="#table-vue" class="headerlink" title="table.vue"></a>table.vue</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">/**</span><br><span class="line"> *  提供3个插槽：</span><br><span class="line"> *  functionBtnBox：放置表格上方的按钮集合</span><br><span class="line"> *  secFunctionBox：放置表格业务相关的功能集合</span><br><span class="line"> *  actionBox：放置表格每条数据的操作按钮集合</span><br><span class="line"> *  needCheckList：是否支持多项选择，真支持，假不支持（默认不支持），多选需要搭配v-model</span><br><span class="line"> *  ----------------------------------------</span><br><span class="line"> *  tableData: Array，数据本身的信息,</span><br><span class="line"> *  tableColumns: Array， 表头的信息,</span><br><span class="line"> *  needCheckList：Boolean ， 表达是否可以多选</span><br><span class="line"> */</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="muti-func-table"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;slot name="functionBtnBox" /&gt;</span><br><span class="line">      &lt;slot name="secFunctionBox" /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a-table</span><br><span class="line">        :columns="columns"</span><br><span class="line">        :data-source="tableData"</span><br><span class="line">        :scroll="{ x: columns.length * 80 }"</span><br><span class="line">        :style="{ overflow: 'auto' }"</span><br><span class="line">        :pagination="pagination"</span><br><span class="line">        :loading="loading"</span><br><span class="line">        :components="components"</span><br><span class="line">        bordered</span><br><span class="line">        :sortDirections="['descend', 'ascend']"</span><br><span class="line">        :row-selection="</span><br><span class="line">          needCheckList</span><br><span class="line">            ? {</span><br><span class="line">                selectedRowKeys: selectedRowKeys,</span><br><span class="line">                onChange: onSelectChange,</span><br><span class="line">                text: '复选',</span><br><span class="line">              }</span><br><span class="line">            : null</span><br><span class="line">        "</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;span slot="actionTitle"&gt;</span><br><span class="line">          &lt;span&gt;操作&lt;/span&gt;</span><br><span class="line">          &lt;a-popover v-model="isColSetPopShow" title="列项设置" trigger="hover"&gt;</span><br><span class="line">            &lt;!-- &lt;a slot="content" @click="hide"&gt;Close&lt;/a&gt; --&gt;</span><br><span class="line">            &lt;!-- &lt;a-tooltip&gt; --&gt;</span><br><span class="line">            &lt;!-- &lt;template slot="title"&gt; 列项设置 &lt;/template&gt; --&gt;</span><br><span class="line">            &lt;a-button</span><br><span class="line">              type="link"</span><br><span class="line">              icon="setting"</span><br><span class="line">              @click="isColSetPopShow = true"</span><br><span class="line">            &gt;&lt;/a-button&gt;</span><br><span class="line">            &lt;!-- &lt;/a-tooltip&gt; --&gt;</span><br><span class="line">            &lt;template slot="content"&gt;</span><br><span class="line">              &lt;table&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                  &lt;th&gt;列名&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;是否显示&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;是否固定&lt;/th&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                  &lt;template v-for="(item, index) in tableColumns"&gt;</span><br><span class="line">                    &lt;tr v-if="item.key !== 'action'" :key="index"&gt;</span><br><span class="line">                      &lt;td&gt;{{ item.title }}&lt;/td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                        &lt;a-switch</span><br><span class="line">                          v-model="tableColumns[index]['isShow']"</span><br><span class="line">                          checked-children="是"</span><br><span class="line">                          un-checked-children="否"</span><br><span class="line">                          @change="onShowSwitchChange($event, item.key)"</span><br><span class="line">                          default-checked</span><br><span class="line">                        /&gt;</span><br><span class="line">                      &lt;/td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                        &lt;a-switch</span><br><span class="line">                          v-model="tableColumns[index]['fixed']"</span><br><span class="line">                          checked-children="是"</span><br><span class="line">                          un-checked-children="否"</span><br><span class="line">                          @change="onFixSwitchChange($event, item.key)"</span><br><span class="line">                          default-checked</span><br><span class="line">                        /&gt;</span><br><span class="line">                      &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                  &lt;/template&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">              &lt;/table&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/a-popover&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;template  v-for="column in columns"  :slot="column.scopedSlots?column.scopedSlots.customRender:''" slot-scope="text,record" &gt;</span><br><span class="line">&lt;slot v-if="column.scopedSlots" :name="column.scopedSlots?column.scopedSlots.customRender:''" v-bind="record" &gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 外头传进来的操作栏信息，data为表格循环出来的当前行数据信息 --&gt;</span><br><span class="line">        &lt;span slot="action" slot-scope="text, record"&gt;</span><br><span class="line">          &lt;slot name="actionBox" :data="record"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/a-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  render: function(createElement) {</span><br><span class="line">    return createElement(`slot`, {name:'slotBox'}, ['', ...this.$slots.default])</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    this.components = {</span><br><span class="line">      header: {</span><br><span class="line">        cell: (h, props, children) =&gt; {</span><br><span class="line">          const { key, ...restProps } = props;</span><br><span class="line">          // console.log("ResizeableTitle", key);</span><br><span class="line">          const col = this.columns.find((col) =&gt; {</span><br><span class="line">            const k = col.dataIndex || col.key;</span><br><span class="line">            return k === key;</span><br><span class="line">          });</span><br><span class="line"></span><br><span class="line">          if (!col || !col.width) {</span><br><span class="line">            return h(</span><br><span class="line">              "th",</span><br><span class="line">              {</span><br><span class="line">                ...restProps,</span><br><span class="line">              },</span><br><span class="line">              [...children]</span><br><span class="line">            );</span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          const dragProps = {</span><br><span class="line">            key: col.dataIndex || col.key,</span><br><span class="line">            class: "table-draggable-handle",</span><br><span class="line">            attrs: {</span><br><span class="line">              w: 10,</span><br><span class="line">              x: col.width,</span><br><span class="line">              z: 1,</span><br><span class="line">              axis: "x",</span><br><span class="line">              draggable: true,</span><br><span class="line">              resizable: false,</span><br><span class="line">            },</span><br><span class="line">            on: {</span><br><span class="line">              dragging: (x, y) =&gt; {</span><br><span class="line">                col.width = Math.max(x, 1);</span><br><span class="line">              },</span><br><span class="line">            },</span><br><span class="line">          };</span><br><span class="line">          const drag = h("vue-draggable-resizable", {</span><br><span class="line">            ...dragProps,</span><br><span class="line">          });</span><br><span class="line">          return h(</span><br><span class="line">            "th",</span><br><span class="line">            {</span><br><span class="line">              ...restProps,</span><br><span class="line">              class: "resize-table-th",</span><br><span class="line">            },</span><br><span class="line">            [...children, drag]</span><br><span class="line">          );</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    };</span><br><span class="line">    return {</span><br><span class="line">      isColSetPopShow: false,</span><br><span class="line">      loading: false,</span><br><span class="line">      selectedRowKeys: [], // Check here to configure the default column</span><br><span class="line">      filteredInfo: null,</span><br><span class="line">      sortedInfo: null,</span><br><span class="line">      pagination: {</span><br><span class="line">        defaultPageSize: 5,</span><br><span class="line">        showQuickJumper: true,</span><br><span class="line">        // 显示每页多少条数据</span><br><span class="line">        showSizeChanger: true,</span><br><span class="line">        showTotal: (total, range) =&gt;</span><br><span class="line">          `共${total}条数据，当前第${</span><br><span class="line">            Math.floor(range[0] / this.pagination.defaultPageSize) + 1</span><br><span class="line">          }/${Math.ceil(total / this.pagination.defaultPageSize)}页`,</span><br><span class="line">        // showSizeChanger:true,</span><br><span class="line">        pageSizeOptions: ["5", "10", "15", "20", "50"],</span><br><span class="line">        onShowSizeChange: (current, pageSize) =&gt;</span><br><span class="line">          (this.pagination.defaultPageSize = pageSize),</span><br><span class="line">        total: 0, //总条数</span><br><span class="line">      },</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  props: {</span><br><span class="line">    tableData: Array,</span><br><span class="line">    tableColumns: Array,</span><br><span class="line">    needCheckList: Boolean,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    columns: {</span><br><span class="line">      get() {</span><br><span class="line">        let actionColumn = {</span><br><span class="line">          key: "action",</span><br><span class="line">          scopedSlots: {</span><br><span class="line">            customRender: "action",</span><br><span class="line">            title: "actionTitle",</span><br><span class="line">          },</span><br><span class="line">        };</span><br><span class="line">        let { sortedInfo, filteredInfo } = this;</span><br><span class="line">        sortedInfo = sortedInfo || {};</span><br><span class="line">        filteredInfo = filteredInfo || {};</span><br><span class="line">        // 计算并添加宽度属性</span><br><span class="line">        let baseWidth =</span><br><span class="line">          (document.body.clientWidth * 0.7) / this.tableColumns.length;</span><br><span class="line">        // let baseWidth = 300</span><br><span class="line">        console.log("baseWidth=", baseWidth);</span><br><span class="line">        // let functionColumns = this.tableColumns.slice(0); //用深拷贝复制数据</span><br><span class="line">        let functionColumns = [];</span><br><span class="line">        for (let i in this.tableColumns) {</span><br><span class="line">          functionColumns.push(this.tableColumns[i]);</span><br><span class="line">          functionColumns[i]["width"] = baseWidth;</span><br><span class="line">          functionColumns[i]["isShow"] = true;</span><br><span class="line">          functionColumns[i]["fixed"] = false;</span><br><span class="line">        }</span><br><span class="line">        functionColumns.push(actionColumn);</span><br><span class="line"></span><br><span class="line">        for (let i in functionColumns) {</span><br><span class="line">          let key = functionColumns[i]["key"];</span><br><span class="line">          if (key === "action") {</span><br><span class="line">            continue;</span><br><span class="line">          }</span><br><span class="line">          functionColumns[i]["sorter"] = (a, b) =&gt; {</span><br><span class="line">            let variableType = typeof a[key];</span><br><span class="line">            // console.log("key=", key, "a=", a);</span><br><span class="line">            // console.log("variableType=", variableType);</span><br><span class="line">            switch (variableType.toLowerCase()) {</span><br><span class="line">              case "string":</span><br><span class="line">                return a[key].localeCompare(b[key]);</span><br><span class="line">              // return a[key].length - b[key].length</span><br><span class="line">              case "number":</span><br><span class="line">                return a[key] &gt; b[key] ? 1 : -1;</span><br><span class="line">              default:</span><br><span class="line">                return a[key] &gt; b[key] ? 1 : -1;</span><br><span class="line">            }</span><br><span class="line">          };</span><br><span class="line">          // 当单元格内数据超出时，溢出内容省略</span><br><span class="line">          functionColumns[i]["ellipsis"] = true;</span><br><span class="line">          // 默认降序</span><br><span class="line">          functionColumns[i]["defaultSortOrder"] = "descend";</span><br><span class="line">        }</span><br><span class="line">        return functionColumns;</span><br><span class="line">      },</span><br><span class="line">      set(v) {</span><br><span class="line">        this.tableColumns = v;</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    onFixSwitchChange(event, key) {</span><br><span class="line">      this.$forceUpdate();</span><br><span class="line">    },</span><br><span class="line">    onShowSwitchChange(event, key) {</span><br><span class="line">      this.$nextTick(() =&gt; {</span><br><span class="line">        this.reRenderColumn(event, key);</span><br><span class="line">        // 视图因为数据未变更而未刷新，强制刷新</span><br><span class="line">        this.$forceUpdate();</span><br><span class="line">      });</span><br><span class="line">    },</span><br><span class="line">    reRenderColumn(flag, keyName) {</span><br><span class="line">      // flag代表是否展示。</span><br><span class="line">      var readyFindList = flag ? this.tableColumns : this.columns;</span><br><span class="line">      for (let i in readyFindList) {</span><br><span class="line">        if (readyFindList[i]["key"] === keyName) {</span><br><span class="line">          if (!flag) {</span><br><span class="line">            // 选择为不展示时展示用的column剔除该项</span><br><span class="line">            this.columns.splice(i, 1);</span><br><span class="line">          } else {</span><br><span class="line">            // 选择展示时，从源列表数据找到该项并回填到展示用的column</span><br><span class="line">            this.columns.splice(i, 0, readyFindList[i]);</span><br><span class="line">          }</span><br><span class="line">          break;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    onSelectChange(selectedRowKeys) {</span><br><span class="line">      // console.log("selectedRowKeys changed: ", selectedRowKeys);</span><br><span class="line">      this.selectedRowKeys = selectedRowKeys;</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  mounted: function () {},</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#muti-func-table {</span><br><span class="line">  /* width: 100%; */</span><br><span class="line">  /* overflow: hidden; */</span><br><span class="line">  /* overflow: auto; */</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/deep/.ant-table td {</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="参考方法"><a href="#参考方法" class="headerlink" title="参考方法"></a>参考方法</h1><p><a href="https://www.zhihu.com/question/339501753/answer/1245129317">https://www.zhihu.com/question/339501753/answer/1245129317</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> antd </tag>
            
            <tag> vue </tag>
            
            <tag> vue-slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装多功能表格：Ant-design的table进行二次封装</title>
      <link href="2021/07/30/20210730fzzj/"/>
      <url>2021/07/30/20210730fzzj/</url>
      
        <content type="html"><![CDATA[<h1 id="Desc"><a href="#Desc" class="headerlink" title="Desc"></a>Desc</h1><p>当编写一个页面时，可以直接按照需求摆放元素并编写逻辑；而当有很多页面都出现重复的需求的时候，就可以考虑一下自己封装组件并且调用。</p><p><img src="https://i.loli.net/2021/07/30/dCGUTmxLX32ZMS8.png" alt="image.png"></p><h1 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h1><p>首先，在某一个目录创建组件的文件夹。我这里是需要把ant-design的table改成可以伸缩，可以支持列表显示的表格。这里算是二次封装吧。名字就叫作<code>mutiFunctionalTable</code>。这个文件夹里头主要有两个文件，一个是<code>mutiFunctionalTable.vue</code>，另一个就是<code>index.js</code>。index主要是用于暴露我们的组件封装信息，另一个就是组件本身的文件啦~</p><h1 id="写组件本身"><a href="#写组件本身" class="headerlink" title="写组件本身"></a>写组件本身</h1><h2 id="留传入参数属性"><a href="#留传入参数属性" class="headerlink" title="留传入参数属性"></a>留传入参数属性</h2><p>因为是个组件，所以无法逃避从外面接收参数这个问题。vue中可以利用<code>props</code>属性声明参数集合，里面放置参数名与参数类型就算是完成声明了。所以，这些信息不需要在<code>data(){return{}}</code>里再写一遍了（下方的<code>computed()</code>也是同理。我这里留了3个参数，如下。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">   <span class="keyword">return</span>{</span><br><span class="line">...</span><br><span class="line">}</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">props</span>: {</span><br><span class="line">    <span class="attr">tableData</span>: <span class="built_in">Array</span>,    <span class="comment">//表格数据本身</span></span><br><span class="line">    <span class="attr">tableColumns</span>: <span class="built_in">Array</span>,  <span class="comment">//表格的表头数据</span></span><br><span class="line">    <span class="attr">needCheckList</span>:<span class="built_in">Boolean</span><span class="comment">//是否需要展示勾选列</span></span><br><span class="line">  },</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h2 id="填写template"><a href="#填写template" class="headerlink" title="填写template"></a>填写template</h2><p>在template里放a-table组件，再把需要的属性填上去，并在data()里补填相应的变量。</p><p>如果表格中需要操作栏，就需要预留一个插槽让父组件来放置自己功能的操作栏按钮。在操作栏的表头上我还放置了一个可以控制表列显示与否的操作面板，这个面板来源于<code>tableColumn</code>里的设置。column的信息用两个变量来控制，一个是父组件传过来的原信息，另一个是我们处理用于显示表格的显示信息。面板的数据来源于原信息，表格的数据来自于面板出发改变后处理得到的表格信息。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-table</span><br><span class="line">        :columns="columns"</span><br><span class="line">        :data-source="tableData"</span><br><span class="line">        :scroll="{x: columns.length*80}"</span><br><span class="line">        :style="{overflow:'auto'}"</span><br><span class="line">        :pagination="pagination"</span><br><span class="line">        :loading="loading"</span><br><span class="line">        :components="components" //伸缩需要</span><br><span class="line">        bordered</span><br><span class="line">        :sortDirections="['descend', 'ascend']"</span><br><span class="line">        :row-selection="needCheckList?{</span><br><span class="line">          selectedRowKeys: selectedRowKeys,</span><br><span class="line">          onChange: onSelectChange,</span><br><span class="line">          text: '复选',</span><br><span class="line">        }:null"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;span slot="actionTitle"&gt;</span><br><span class="line">          &lt;span&gt;操作&lt;/span&gt;</span><br><span class="line">          &lt;a-popover v-model="isColSetPopShow" title="列项设置" trigger="hover"&gt;</span><br><span class="line">              &lt;a-button</span><br><span class="line">                type="link"</span><br><span class="line">                icon="setting"</span><br><span class="line">                @click="isColSetPopShow = true"</span><br><span class="line">              &gt;&lt;/a-button&gt;</span><br><span class="line">            &lt;template slot="content"&gt;</span><br><span class="line">              &lt;table&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                  &lt;th&gt;列名&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;是否显示&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;是否固定&lt;/th&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                  &lt;template v-for="(item, index) in tableColumns"&gt;</span><br><span class="line">                    &lt;tr v-if="item.key !== 'action'" :key="index"&gt;</span><br><span class="line">                      &lt;td&gt;{{ item.title }}&lt;/td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                        &lt;a-switch</span><br><span class="line">                          v-model="tableColumns[index]['isShow']"</span><br><span class="line">                          checked-children="是"</span><br><span class="line">                          un-checked-children="否"</span><br><span class="line">                          @change="onShowSwitchChange($event, item.key)"</span><br><span class="line">                          default-checked</span><br><span class="line">                        /&gt;</span><br><span class="line">                      &lt;/td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                        &lt;a-switch</span><br><span class="line">                          v-model="tableColumns[index]['fixed']"</span><br><span class="line">                          checked-children="是"</span><br><span class="line">                          un-checked-children="否"</span><br><span class="line">                          @change="onFixSwitchChange($event, item.key)"</span><br><span class="line">                          default-checked</span><br><span class="line">                        /&gt;</span><br><span class="line">                      &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                  &lt;/template&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">              &lt;/table&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/a-popover&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span slot="action" slot-scope="text,record"&gt;</span><br><span class="line">            &lt;!-- 外头传进来的操作栏信息，data为表格循环出来的当前行数据信息 --&gt;</span><br><span class="line">          &lt;slot name="actionBox" :data="record"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/a-table&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="关于表格列表伸缩"><a href="#关于表格列表伸缩" class="headerlink" title="关于表格列表伸缩"></a>关于表格列表伸缩</h2><p>在ant-design的文档里解释道，表格的伸缩需要依靠<code>vue-draggable-resizable</code>这个依赖。关于版本的问题，在往网上搜了大概后了解到，效果比较好的版本是2.1，所以安装时需要指定版本，命令就变成了<code>npm install vue-draggable-resizable@2.1.0 --save</code>。</p><p>安装完依赖后，还需要在组件中进行计算声明。在data()里直接放入下方代码（与<code>return{}</code>同级）。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.components = {</span><br><span class="line">      <span class="attr">header</span>: {</span><br><span class="line">        <span class="attr">cell</span>: <span class="function">(<span class="params">h, props, children</span>) =&gt;</span> {</span><br><span class="line">          <span class="keyword">const</span> { key, ...restProps } = props;</span><br><span class="line">          <span class="comment">// console.log("ResizeableTitle", key);</span></span><br><span class="line">          <span class="keyword">const</span> col = <span class="built_in">this</span>.columns.find(<span class="function">(<span class="params">col</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> k = col.dataIndex || col.key;</span><br><span class="line">            <span class="keyword">return</span> k === key;</span><br><span class="line">          });</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!col || !col.width) {</span><br><span class="line">            <span class="keyword">return</span> h(</span><br><span class="line">              <span class="string">"th"</span>,</span><br><span class="line">              {</span><br><span class="line">                ...restProps,</span><br><span class="line">              },</span><br><span class="line">              [...children]</span><br><span class="line">            );</span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> dragProps = {</span><br><span class="line">            <span class="attr">key</span>: col.dataIndex || col.key,</span><br><span class="line">            <span class="attr">class</span>: <span class="string">"table-draggable-handle"</span>,</span><br><span class="line">            <span class="attr">attrs</span>: {</span><br><span class="line">              <span class="attr">w</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="attr">x</span>: col.width,</span><br><span class="line">              <span class="attr">z</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">axis</span>: <span class="string">"x"</span>,</span><br><span class="line">              <span class="attr">draggable</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">resizable</span>: <span class="literal">false</span>,</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">on</span>: {</span><br><span class="line">              <span class="attr">dragging</span>: <span class="function">(<span class="params">x, y</span>) =&gt;</span> {</span><br><span class="line">                col.width = <span class="built_in">Math</span>.max(x, <span class="number">1</span>);</span><br><span class="line">              },</span><br><span class="line">            },</span><br><span class="line">          };</span><br><span class="line">          <span class="keyword">const</span> drag = h(<span class="string">"vue-draggable-resizable"</span>, {</span><br><span class="line">            ...dragProps,</span><br><span class="line">          });</span><br><span class="line">          <span class="keyword">return</span> h(</span><br><span class="line">            <span class="string">"th"</span>,</span><br><span class="line">            {</span><br><span class="line">              ...restProps,</span><br><span class="line">              <span class="attr">class</span>: <span class="string">"resize-table-th"</span>,</span><br><span class="line">            },</span><br><span class="line">            [...children, drag]</span><br><span class="line">          );</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    };</span><br></pre></td></tr></tbody></table></figure><p>这还没完，最后需要自己在column信息的变量中，对每一列进行宽度的赋值。这里只能放入数值，放入字符是无效的如px、vw、%等等，到时候照样没有伸缩效果。</p><h2 id="对于column的计算"><a href="#对于column的计算" class="headerlink" title="对于column的计算"></a>对于column的计算</h2><p>前面说到展示的column和传回的column用的不是同一份数据（也有因为传入的prop不能直接更改的原因在里面），在computed里计算出用于展示的column数据。因为涉及到变更，所以需要自己分别写出get()和set()的方法。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">columns: {</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> {</span><br><span class="line">          <span class="keyword">let</span> actionColumn = {</span><br><span class="line">          <span class="attr">key</span>: <span class="string">"action"</span>,</span><br><span class="line">          <span class="attr">scopedSlots</span>: {</span><br><span class="line">            <span class="attr">customRender</span>: <span class="string">"action"</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">"actionTitle"</span>,</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">let</span> { sortedInfo, filteredInfo } = <span class="built_in">this</span>;</span><br><span class="line">        sortedInfo = sortedInfo || {};</span><br><span class="line">        filteredInfo = filteredInfo || {};</span><br><span class="line">        <span class="comment">// 计算并添加宽度属性</span></span><br><span class="line">        <span class="keyword">let</span> baseWidth = (<span class="built_in">document</span>.body.clientWidth*<span class="number">0.7</span>) / <span class="built_in">this</span>.tableColumns.length</span><br><span class="line">        <span class="comment">// let baseWidth = 300</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'baseWidth='</span>,baseWidth)</span><br><span class="line">        <span class="comment">// let functionColumns = this.tableColumns.slice(0); //用深拷贝复制数据</span></span><br><span class="line">        <span class="keyword">let</span> functionColumns= []</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.tableColumns){</span><br><span class="line">            functionColumns.push(<span class="built_in">this</span>.tableColumns[i])</span><br><span class="line">            functionColumns[i][<span class="string">'width'</span>]=baseWidth</span><br><span class="line">            functionColumns[i][<span class="string">'isShow'</span>]=<span class="literal">true</span></span><br><span class="line">            functionColumns[i][<span class="string">'fixed'</span>]=<span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        functionColumns.push(actionColumn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> functionColumns) {</span><br><span class="line">          <span class="keyword">let</span> key = functionColumns[i][<span class="string">"key"</span>];</span><br><span class="line">          <span class="keyword">if</span> (key === <span class="string">"action"</span>) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          }</span><br><span class="line">          functionColumns[i][<span class="string">"sorter"</span>] = <span class="function">(<span class="params">a, b</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">let</span> variableType = <span class="keyword">typeof</span> a[key];</span><br><span class="line">            <span class="comment">// console.log("key=", key, "a=", a);</span></span><br><span class="line">            <span class="comment">// console.log("variableType=", variableType);</span></span><br><span class="line">            <span class="keyword">switch</span> (variableType.toLowerCase()) {</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"string"</span>:</span><br><span class="line">                <span class="keyword">return</span> a[key].localeCompare(b[key]);</span><br><span class="line">              <span class="comment">// return a[key].length - b[key].length</span></span><br><span class="line">              <span class="keyword">case</span> <span class="string">"number"</span>:</span><br><span class="line">                <span class="keyword">return</span> a[key] &gt; b[key] ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> a[key] &gt; b[key] ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">          };</span><br><span class="line">          <span class="comment">// 当单元格内数据超出时，溢出内容省略</span></span><br><span class="line">          functionColumns[i][<span class="string">"ellipsis"</span>] = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// 默认降序</span></span><br><span class="line">          functionColumns[i][<span class="string">"defaultSortOrder"</span>] = <span class="string">"descend"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> functionColumns;</span><br><span class="line">      },</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">v</span>)</span> {</span><br><span class="line">        <span class="built_in">this</span>.tableColumns = v;</span><br><span class="line">      },</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><h2 id="index暴露组件"><a href="#index暴露组件" class="headerlink" title="index暴露组件"></a>index暴露组件</h2><p>组件封装好后，需要暴露出去，这样才可以在其他的地方使用它。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mutiFunctionalTable <span class="keyword">from</span> <span class="string">'./MutiFunctionalTable.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kb = {</span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">Vue</span>) =&gt;</span> {</span><br><span class="line">        Vue.component(<span class="string">'muti-func-table'</span>,mutiFunctionalTable)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> kb</span><br></pre></td></tr></tbody></table></figure><p>接着在main.js里进行全局引用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mutiFuncTable <span class="keyword">from</span> <span class="string">"@/views/components/MutiFunctionalTable/index.js"</span></span><br><span class="line">Vue.use(mutiFuncTable)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在需要用的地方，放入封装组件的标签，并赋予他参数，在页面上就可以看到可以拖拽，可以自定义的表格啦~</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;muti-func-table :tableData="tableData" :tableColumns="columnsData"&gt;</span><br><span class="line">  &lt;span slot="actionBox"&gt;</span><br><span class="line">    &lt;a-button type="link"&gt;查看详情&lt;/a-button&gt;</span><br><span class="line">    &lt;a-divider type="vertical" /&gt;</span><br><span class="line">    &lt;a-button type="link"&gt;修改&lt;/a-button&gt;</span><br><span class="line">    &lt;a-divider type="vertical" /&gt;</span><br><span class="line">    &lt;a-button type="link"&gt;删除&lt;/a-button&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/muti-func-table&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="组件完整代码"><a href="#组件完整代码" class="headerlink" title="组件完整代码"></a>组件完整代码</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">/**</span><br><span class="line"> *  提供3个插槽：</span><br><span class="line"> *  functionBtnBox：放置表格上方的按钮集合</span><br><span class="line"> *  secFunctionBox：放置表格业务相关的功能集合</span><br><span class="line"> *  actionBox：放置表格每条数据的操作按钮集合</span><br><span class="line"> *  needCheckList：是否支持多项选择，真支持，假不支持（默认不支持），多选需要搭配v-model</span><br><span class="line"> *  ----------------------------------------</span><br><span class="line"> *  tableData: Array，数据本身的信息,</span><br><span class="line"> *  tableColumns: Array， 表头的信息,</span><br><span class="line"> *  needCheckList：Boolean ， 表达是否可以多选</span><br><span class="line"> */</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="muti-func-table"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;slot name="functionBtnBox"/&gt;</span><br><span class="line">        &lt;slot name="secFunctionBox"/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a-table</span><br><span class="line">        :columns="columns"</span><br><span class="line">        :data-source="tableData"</span><br><span class="line">        :scroll="{x: columns.length*80}"</span><br><span class="line">        :style="{overflow:'auto'}"</span><br><span class="line">        :pagination="pagination"</span><br><span class="line">        :loading="loading"</span><br><span class="line">        :components="components"</span><br><span class="line">        bordered</span><br><span class="line">        :sortDirections="['descend', 'ascend']"</span><br><span class="line">        :row-selection="needCheckList?{</span><br><span class="line">          selectedRowKeys: selectedRowKeys,</span><br><span class="line">          onChange: onSelectChange,</span><br><span class="line">          text: '复选',</span><br><span class="line">        }:null"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;span slot="actionTitle"&gt;</span><br><span class="line">          &lt;span&gt;操作&lt;/span&gt;</span><br><span class="line">          &lt;a-popover v-model="isColSetPopShow" title="列项设置" trigger="hover"&gt;</span><br><span class="line">            &lt;!-- &lt;a slot="content" @click="hide"&gt;Close&lt;/a&gt; --&gt;</span><br><span class="line">            &lt;!-- &lt;a-tooltip&gt; --&gt;</span><br><span class="line">              &lt;!-- &lt;template slot="title"&gt; 列项设置 &lt;/template&gt; --&gt;</span><br><span class="line">              &lt;a-button</span><br><span class="line">                type="link"</span><br><span class="line">                icon="setting"</span><br><span class="line">                @click="isColSetPopShow = true"</span><br><span class="line">              &gt;&lt;/a-button&gt;</span><br><span class="line">            &lt;!-- &lt;/a-tooltip&gt; --&gt;</span><br><span class="line">            &lt;template slot="content"&gt;</span><br><span class="line">              &lt;table&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                  &lt;th&gt;列名&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;是否显示&lt;/th&gt;</span><br><span class="line">                  &lt;th&gt;是否固定&lt;/th&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                  &lt;template v-for="(item, index) in tableColumns"&gt;</span><br><span class="line">                    &lt;tr v-if="item.key !== 'action'" :key="index"&gt;</span><br><span class="line">                      &lt;td&gt;{{ item.title }}&lt;/td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                        &lt;a-switch</span><br><span class="line">                          v-model="tableColumns[index]['isShow']"</span><br><span class="line">                          checked-children="是"</span><br><span class="line">                          un-checked-children="否"</span><br><span class="line">                          @change="onShowSwitchChange($event, item.key)"</span><br><span class="line">                          default-checked</span><br><span class="line">                        /&gt;</span><br><span class="line">                      &lt;/td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                        &lt;a-switch</span><br><span class="line">                          v-model="tableColumns[index]['fixed']"</span><br><span class="line">                          checked-children="是"</span><br><span class="line">                          un-checked-children="否"</span><br><span class="line">                          @change="onFixSwitchChange($event, item.key)"</span><br><span class="line"></span><br><span class="line">                          default-checked</span><br><span class="line">                        /&gt;</span><br><span class="line">                      &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                  &lt;/template&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">              &lt;/table&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/a-popover&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span slot="action" slot-scope="text,record"&gt;</span><br><span class="line">            &lt;!-- 外头传进来的操作栏信息，data为表格循环出来的当前行数据信息 --&gt;</span><br><span class="line">          &lt;slot name="actionBox" :data="record"&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/a-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  data() {</span><br><span class="line">    this.components = {</span><br><span class="line">      header: {</span><br><span class="line">        cell: (h, props, children) =&gt; {</span><br><span class="line">          const { key, ...restProps } = props;</span><br><span class="line">          // console.log("ResizeableTitle", key);</span><br><span class="line">          const col = this.columns.find((col) =&gt; {</span><br><span class="line">            const k = col.dataIndex || col.key;</span><br><span class="line">            return k === key;</span><br><span class="line">          });</span><br><span class="line"></span><br><span class="line">          if (!col || !col.width) {</span><br><span class="line">            return h(</span><br><span class="line">              "th",</span><br><span class="line">              {</span><br><span class="line">                ...restProps,</span><br><span class="line">              },</span><br><span class="line">              [...children]</span><br><span class="line">            );</span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          const dragProps = {</span><br><span class="line">            key: col.dataIndex || col.key,</span><br><span class="line">            class: "table-draggable-handle",</span><br><span class="line">            attrs: {</span><br><span class="line">              w: 10,</span><br><span class="line">              x: col.width,</span><br><span class="line">              z: 1,</span><br><span class="line">              axis: "x",</span><br><span class="line">              draggable: true,</span><br><span class="line">              resizable: false,</span><br><span class="line">            },</span><br><span class="line">            on: {</span><br><span class="line">              dragging: (x, y) =&gt; {</span><br><span class="line">                col.width = Math.max(x, 1);</span><br><span class="line">              },</span><br><span class="line">            },</span><br><span class="line">          };</span><br><span class="line">          const drag = h("vue-draggable-resizable", {</span><br><span class="line">            ...dragProps,</span><br><span class="line">          });</span><br><span class="line">          return h(</span><br><span class="line">            "th",</span><br><span class="line">            {</span><br><span class="line">              ...restProps,</span><br><span class="line">              class: "resize-table-th",</span><br><span class="line">            },</span><br><span class="line">            [...children, drag]</span><br><span class="line">          );</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    };</span><br><span class="line">    return {</span><br><span class="line">      isColSetPopShow: false,</span><br><span class="line">      loading: false,</span><br><span class="line">      selectedRowKeys: [], // Check here to configure the default column</span><br><span class="line">filteredInfo: null,</span><br><span class="line">      sortedInfo: null,</span><br><span class="line">      pagination: {</span><br><span class="line">        defaultPageSize: 5,</span><br><span class="line">        showQuickJumper: true,</span><br><span class="line">        // 显示每页多少条数据</span><br><span class="line">        showSizeChanger: true,</span><br><span class="line">        showTotal: (total, range) =&gt;</span><br><span class="line">          `共${total}条数据，当前第${</span><br><span class="line">            Math.floor(range[0] / this.pagination.defaultPageSize) + 1</span><br><span class="line">          }/${Math.ceil(total / this.pagination.defaultPageSize)}页`,</span><br><span class="line">        // showSizeChanger:true,</span><br><span class="line">        pageSizeOptions: ["5", "10", "15", "20", "50"],</span><br><span class="line">        onShowSizeChange: (current, pageSize) =&gt;</span><br><span class="line">          (this.pagination.defaultPageSize = pageSize),</span><br><span class="line">        total: 0, //总条数</span><br><span class="line">      },</span><br><span class="line">    };</span><br><span class="line">  },</span><br><span class="line">  props: {</span><br><span class="line">    tableData: Array,</span><br><span class="line">    tableColumns: Array,</span><br><span class="line">    needCheckList:Boolean</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    columns: {</span><br><span class="line">      get() {</span><br><span class="line">          let actionColumn = {</span><br><span class="line">          key: "action",</span><br><span class="line">          scopedSlots: {</span><br><span class="line">            customRender: "action",</span><br><span class="line">            title: "actionTitle",</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        let { sortedInfo, filteredInfo } = this;</span><br><span class="line">        sortedInfo = sortedInfo || {};</span><br><span class="line">        filteredInfo = filteredInfo || {};</span><br><span class="line">        // 计算并添加宽度属性</span><br><span class="line">        let baseWidth = (document.body.clientWidth*0.7) / this.tableColumns.length</span><br><span class="line">        // let baseWidth = 300</span><br><span class="line">        console.log('baseWidth=',baseWidth)</span><br><span class="line">        // let functionColumns = this.tableColumns.slice(0); //用深拷贝复制数据</span><br><span class="line">        let functionColumns= []</span><br><span class="line">        for(let i in this.tableColumns){</span><br><span class="line">            functionColumns.push(this.tableColumns[i])</span><br><span class="line">            functionColumns[i]['width']=baseWidth</span><br><span class="line">            functionColumns[i]['isShow']=true</span><br><span class="line">            functionColumns[i]['fixed']=false</span><br><span class="line">        }</span><br><span class="line">        functionColumns.push(actionColumn)</span><br><span class="line"></span><br><span class="line">        for (let i in functionColumns) {</span><br><span class="line">          let key = functionColumns[i]["key"];</span><br><span class="line">          if (key === "action") {</span><br><span class="line">            continue;</span><br><span class="line">          }</span><br><span class="line">          functionColumns[i]["sorter"] = (a, b) =&gt; {</span><br><span class="line">            let variableType = typeof a[key];</span><br><span class="line">            // console.log("key=", key, "a=", a);</span><br><span class="line">            // console.log("variableType=", variableType);</span><br><span class="line">            switch (variableType.toLowerCase()) {</span><br><span class="line">              case "string":</span><br><span class="line">                return a[key].localeCompare(b[key]);</span><br><span class="line">              // return a[key].length - b[key].length</span><br><span class="line">              case "number":</span><br><span class="line">                return a[key] &gt; b[key] ? 1 : -1;</span><br><span class="line">              default:</span><br><span class="line">                return a[key] &gt; b[key] ? 1 : -1;</span><br><span class="line">            }</span><br><span class="line">          };</span><br><span class="line">          // 当单元格内数据超出时，溢出内容省略</span><br><span class="line">          functionColumns[i]["ellipsis"] = true;</span><br><span class="line">          // 默认降序</span><br><span class="line">          functionColumns[i]["defaultSortOrder"] = "descend";</span><br><span class="line">        }</span><br><span class="line">        return functionColumns;</span><br><span class="line">      },</span><br><span class="line">      set(v) {</span><br><span class="line">        this.tableColumns = v;</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">      onFixSwitchChange(event,key){</span><br><span class="line">          this.$forceUpdate()</span><br><span class="line">      },</span><br><span class="line">    onShowSwitchChange(event, key) {</span><br><span class="line">        this.$nextTick(()=&gt;{</span><br><span class="line">      this.reRenderColumn(event, key);</span><br><span class="line"></span><br><span class="line">        })</span><br><span class="line">    },</span><br><span class="line">    reRenderColumn(flag, keyName) {</span><br><span class="line">      // flag代表是否展示。</span><br><span class="line">      var readyFindList = flag ? this.tableColumns : this.columns;</span><br><span class="line">      for (let i in readyFindList) {</span><br><span class="line">        if (readyFindList[i]["key"] === keyName) {</span><br><span class="line">          if (!flag) {</span><br><span class="line">            // 选择为不展示时展示用的column剔除该项</span><br><span class="line">            this.columns.splice(i, 1);</span><br><span class="line">          } else {</span><br><span class="line">            // 选择展示时，从源列表数据找到该项并回填到展示用的column</span><br><span class="line">            this.columns.splice(i, 0, readyFindList[i]);</span><br><span class="line">          }</span><br><span class="line">          break;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line"></span><br><span class="line">    onSelectChange(selectedRowKeys) {</span><br><span class="line">      // console.log("selectedRowKeys changed: ", selectedRowKeys);</span><br><span class="line">      this.selectedRowKeys = selectedRowKeys;</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  mounted: function () {},</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#muti-func-table{</span><br><span class="line">    /* width: 100%; */</span><br><span class="line">    /* overflow: hidden; */</span><br><span class="line">    /* overflow: auto; */</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/deep/.ant-table td { white-space: nowrap; }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Antd </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant-design更改主题设置</title>
      <link href="2021/07/05/antdchangestyle/"/>
      <url>2021/07/05/antdchangestyle/</url>
      
        <content type="html"><![CDATA[<p>ant-design-vue是社区基于ant-design研发的UI框架；但，ant-design无法很直接的更改组件中的一些效果（如主题色、字体等样式）。官方也说明了通过less进行编译可以更改他们已提供的样式效果。</p><p>想更改样式的原因，除了换肤，还有一个原因是antd的组件中的字体好像都偏小。这里除了less替换外，还发现了一个特别好用的轮子。整理一下。</p><p>叫作<code> dynamic-antd-theme</code>，链接：<a href="https://dynamic-antd-theme-luffyzh.vercel.app/">https://dynamic-antd-theme-luffyzh.vercel.app/</a> 。</p><p>利用Npm等工具导入依赖后，直接在操作的页面导包（不用导入组件），然后使用其提供的函数即可。</p><p>如果是更改颜色，在功能里直接使用<code>changeAntdTheme </code>函数。需要提供的参数为<code>(color,option)</code>。</p><blockquote><p><code>param: (color, options)</code>, change the antd theme. The options specific attributes are as follows： - <code>storageName</code>: This can be configured to set storageName when not using picker . - <code>customCss</code>: custom Css</p></blockquote><p>color就是需要更改主题颜色的颜色值；而option是一个对象。假设只需要额外更改css效果。将css代码组成合法的字符串后，封装到这个对象里即可。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">changeAntdTheme(</span><br><span class="line">       <span class="built_in">this</span>.globalSetting.proThemeColor,</span><br><span class="line">      {<span class="attr">customCss</span>:str}</span><br><span class="line">     );</span><br></pre></td></tr></tbody></table></figure><p>啊嘞嘞，直接更改效果的话，可能会造成排版混乱，到时候要注意一下更改样式的组件与组件原生的样式相搭配。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中监听宽度变化并指导echarts重绘（自适应）</title>
      <link href="2021/07/05/20210730echartsresize/"/>
      <url>2021/07/05/20210730echartsresize/</url>
      
        <content type="html"><![CDATA[<p>vue中，可以通过监听的方式感知浏览器窗口的变化。网上的教程很多，这里整理的是测试可用的方法。</p><p>vue里，不能直接对document元素属性进行监听。但可以在<code>data()</code>里先指明元素值，在通过<code>mounted</code>方法，对窗口宽度变化的值进行写入；再通过<code>watch()</code>感知变化后进行代码执行。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">timer</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">screenWidth</span>: <span class="built_in">document</span>.body.clientWidth</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>mouted中加入对document元素的监听。当宽度发生变化，会执行return体里的内容。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> (<span class="function">() =&gt;</span> {</span><br><span class="line">                <span class="built_in">window</span>.screenWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">                that.screenWidth = <span class="built_in">window</span>.screenWidth;</span><br><span class="line">            })();</span><br><span class="line">        })</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><p>最后在<code>watch</code>里加入对需要做的内容的代码。加入timer的原因是为了避免浏览器宽度变化的期间，频繁的进行代码执行，加入timer的间隔后能节约一部分的计算资源，页面也不会看起来巨卡无比。搭配UI框架的加载控件或其余类似的蒙版使用效果更佳。代码要注意闭包问题。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">watch: {</span><br><span class="line">        <span class="function"><span class="title">screenWidth</span>(<span class="params">val</span>)</span> {</span><br><span class="line">            <span class="built_in">this</span>.isLoadingData = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.timer) {</span><br><span class="line">                <span class="comment">// 一旦监听到的screenWidth值改变，就将其重新赋给data里的screenWidth</span></span><br><span class="line">                <span class="built_in">this</span>.screenWidth = val</span><br><span class="line">                <span class="built_in">this</span>.timer = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                    <span class="comment">// 打印screenWidth变化的值</span></span><br><span class="line">                    that.processChart()</span><br><span class="line">                    that.timer = <span class="literal">false</span></span><br><span class="line">                    that.isLoadingData = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">                }, <span class="number">1000</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统消息接收、阅读、处理——vue里的状态管理（store）的理解与相应应用</title>
      <link href="2021/07/02/vuestore/"/>
      <url>2021/07/02/vuestore/</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>目前是有一个需要，大概是下面说的这些。</p><ul><li>在首页中要能请求消息并挑选未读的消息显示数据；</li><li>在第二个组件中能预览状态为未读的消息列表；</li><li>在第三个组件中能预览到所有状态的消息列表；</li><li>第二个组件与第三个组件单击都能在第四个组件查阅详情，如果是未读状态的消息，需要设置成已读，首页的未读消息数量要减少；</li><li>第二个组件的维度消息列表要同步，读一条少一条；</li><li>已读状态再次打开阅读时，未阅读数值不应减少；</li><li>…</li></ul><p>还有一些其他的要求与细节，但与这次的文档主题无关，就不列了。</p><p>因为是同一份列表在多地点击并且能同步状态；显然每一个组件都发请求是不太可能的。所以需要在请求一次消息json后，先存到一个地方统一管理。那那那那，vue里刚好有这么一个地方，就是store。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先需要准备一下这个地方。在<code>src</code>目录下新建一个文件夹<code>store</code>，里面创建一个<code>index.js</code>。</p><p>好了之后呢，在Vue挂载实例的地方引入sotre并挂进去（文件一般是<code>main.js</code>）。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>  <span class="comment">//这里</span></span><br><span class="line">Vue.component(App);</span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,   <span class="comment">//这里</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h1 id="store-index-js部分的设置"><a href="#store-index-js部分的设置" class="headerlink" title="store/index.js部分的设置"></a>store/index.js部分的设置</h1><p>重点就是这个sotre文件的配置了。先大概列一下sotre都有哪些东西。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">  <span class="attr">state</span>: { </span><br><span class="line">      <span class="comment">// 初始状态或更新后的状态，读取方式：this.$store.state.businessInfo.id;</span></span><br><span class="line">   <span class="comment">//这里存放着需要管理的变量信息</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">mutations</span>: { </span><br><span class="line">     <span class="comment">// 更新状态内容：this.$store.commit('GET_CREDID_INFO', businessInfo);</span></span><br><span class="line">    GET_BUSINESS_INFO (state, newInfo) {</span><br><span class="line">      state.businessInfo = newInfo</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">actions</span>: { </span><br><span class="line">      <span class="comment">//触发状态更新，当需要更新多个状态的时候使用，如this.$store.dispatch('getBusinessInfo', newInfo);</span></span><br><span class="line">    <span class="function"><span class="title">getBusinesInfo</span>(<span class="params">{ commit, state }, newInfo</span>)</span> {</span><br><span class="line">      <span class="comment">// commit('GET_USER_INFO', newInfo.userInfo)　　　 commit('GET_BUSINESS_INFO',newInfo.businessInfo)</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一般我们使用action让他对其派发更新的操作。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getNotifi</span>(<span class="params"></span>)</span> {</span><br><span class="line">           <span class="keyword">let</span> _this = <span class="built_in">this</span></span><br><span class="line">           getMessagesInfo().then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">               <span class="built_in">console</span>.log(res.data.data)</span><br><span class="line">               _this.$store.dispatch(<span class="string">'updateNotifyList'</span>, res.data.data)</span><br><span class="line">               <span class="built_in">console</span>.log(_this.$store.state)</span><br><span class="line">               _this.notificationCount = _this.$store.state.unReadCount</span><br><span class="line">           })</span><br><span class="line">       },</span><br></pre></td></tr></tbody></table></figure><p>这里的步骤是，先请求未读消息的api。得到返回的结果后，调用store派发，将res信息保存到store进行管理；而取数据就直接用最后一行代码就能达到效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
            <tag> store </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts图表文本标签自定义设置</title>
      <link href="2021/07/02/echarts%E5%9B%BE%E8%A1%A8%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/07/02/echarts%E5%9B%BE%E8%A1%A8%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><img src="https://i.loli.net/2021/07/02/U7TjQftLDdqYM2x.png" alt="image.png" style="zoom:50%;"><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><p>通常情况下，echarts中对于图像的设置是统一的；但也可以通过将参数放入data里的形式将每一个属性独立开来设置。</p><p>而我这里的需要是：将饼图不足以支撑文字放在里面的单元设置出来；所以就需要事先知道饼图的总数量与每一个单元的数量；两次循环是没有办法避免的。代码如下。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataOption = []</span><br><span class="line"><span class="keyword">let</span> allReportsCount = <span class="number">0</span> <span class="comment">//计算图表中包含的报表数量(sum)</span></span><br><span class="line">item.map(<span class="function">(<span class="params">it</span>) =&gt;</span> {</span><br><span class="line"><span class="built_in">console</span>.log(it)</span><br><span class="line">allReportsCount += it.value</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 根据单报表中占饼图的比例决定文本标签在内还是在外；</span></span><br><span class="line">dataOption = item.map(<span class="function">(<span class="params">it</span>) =&gt;</span> {</span><br><span class="line"><span class="keyword">let</span> itnew = it</span><br><span class="line"><span class="keyword">if</span> (it.value / allReportsCount &lt; <span class="number">0.2</span>) {</span><br><span class="line">itnew[<span class="string">'label'</span>] = {</span><br><span class="line"><span class="attr">show</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">position</span>: <span class="string">"outside"</span></span><br><span class="line">},</span><br><span class="line">itnew[<span class="string">'labelLine'</span>]={<span class="attr">show</span>:<span class="literal">true</span>}</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">itnew[<span class="string">'label'</span>] = {</span><br><span class="line"><span class="attr">show</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">position</span>: <span class="string">"inner"</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> itnew</span><br><span class="line">})</span><br><span class="line"><span class="comment">// console.log(dataOption)</span></span><br><span class="line">finalOptions.series[itemIndex][<span class="string">"data"</span>] = dataOption;</span><br></pre></td></tr></tbody></table></figure><p>对于小于的阈值我这里设置的是0.2，可以根据自己的需要来调节。</p><p>附上最后的效果</p><p><img src="https://i.loli.net/2021/07/02/tszdj9W2geBAuCy.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
            <tag> ecarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端练习题</title>
      <link href="2021/06/04/qdlxt/"/>
      <url>2021/06/04/qdlxt/</url>
      
        <content type="html"><![CDATA[<h3 id="1、DOCTYPE-的作用是什么？标准模式与兼容模式各有什么区别？"><a href="#1、DOCTYPE-的作用是什么？标准模式与兼容模式各有什么区别？" class="headerlink" title="1、DOCTYPE 的作用是什么？标准模式与兼容模式各有什么区别？"></a>1、DOCTYPE 的作用是什么？标准模式与兼容模式各有什么区别？</h3><p>1、DOCTYPE是document type(文档类型)的简写，用于声明文档的解析类型(document.compatMode)，来告诉浏览器的解析器使用哪种HTML或XHTML规范解析页面。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p><p><strong>qurik mode</strong></p><ul><li>兼容模式（qurik mode），别称混杂模式、怪异模式，当 html 文档没有定义 <code>&lt;!DOCTYPE&gt;</code> 或者定义错误不能识别时， html 文档会变为兼容模式</li><li>页面以较宽松的向后兼容的形式呈现，以兼容各个浏览器</li></ul><p><strong>standard mode</strong></p><ul><li>标准模式（standard mode），别称严格模式</li><li>排版以及js运行模式以浏览器所支持的最高标准运行</li></ul><p>判断文档解析类型</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(document.compatMode) ;</span><br><span class="line">//BackCompat 表示怪异模式</span><br><span class="line">//CSS1Compat 表示标准模式</span><br></pre></td></tr></tbody></table></figure><h3 id="2、什么是行内元素、块级元素，行内元素与块级元素有什么区别区别？"><a href="#2、什么是行内元素、块级元素，行内元素与块级元素有什么区别区别？" class="headerlink" title="2、什么是行内元素、块级元素，行内元素与块级元素有什么区别区别？"></a>2、什么是行内元素、块级元素，行内元素与块级元素有什么区别区别？</h3><p>2、常见的元素有：a、b、span、img、strong、sub、sup、button、input、label、select、textarea。</p><p>常见的元素有：div、ul、ol、li、dl、dt、dd、h1~h6、p。</p><p>区别：</p><ul><li>行内元素不会占据一行，会水平排列；而块级元素会占据一整行，成垂直排列。</li><li>块级元素可以包含行内元素和块级元素里面，但是行业元素不可以包含块级元素。</li><li>行内元素设置width、height是无效的，而且margin和padding的上下不生效，但左右生效。</li></ul><h3 id="3、HTML5-元素的分类"><a href="#3、HTML5-元素的分类" class="headerlink" title="3、HTML5 元素的分类"></a>3、HTML5 元素的分类</h3><p>3、HTML5元素主要分为7类：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>元数据型（Metadata）</td><td>设置展示、行为、关联文档，或其他内容的元数据的元素（base、link、meta）</td></tr><tr><td>区块型（Sectioning）</td><td>定义区块内容范围的元素（rticle, aside, nav, section）</td></tr><tr><td>标题型（Heading）</td><td>定义区块内容标题的元素（h1~h6）</td></tr><tr><td>文档流型（Flow）</td><td>大部分文档body内的元素</td></tr><tr><td>语句型（Phrasing）</td><td>文档里的文字，还有在段落内标记这些文字的元素。一系列的语句型内容构成段落。（注意大部分语句型内容只能包含也是语句型内容的元素，不能包含文档流型元素)，有audio、video、img、select、input</td></tr><tr><td>内嵌型（Embedded）</td><td>在文档引入另一个资源的元素，或者插入文档的另一种语言，比如在HTML文档里的MathML（audio, video, img, canvas, svg, iframe, embed, object, math）</td></tr><tr><td>交互型（Interactive）</td><td>专门用于用户交互的元素（a, input, textarea, select）</td></tr></tbody></table><p>一个元素可能有很多分类，也可能没有分类，比如html元素不属于任何一个分类。</p><h3 id="4、页面渲染过程中遇到-JS-文件怎么处理？（浏览器解析过程）"><a href="#4、页面渲染过程中遇到-JS-文件怎么处理？（浏览器解析过程）" class="headerlink" title="4、页面渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）"></a>4、页面渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）</h3><p>4、JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解 析文档。</p><p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的 原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</p><h3 id="5、async-和-defer-的作用是什么？有什么区别？（浏览器解析过程）"><a href="#5、async-和-defer-的作用是什么？有什么区别？（浏览器解析过程）" class="headerlink" title="5、async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）"></a>5、async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）</h3><p>5、（1）脚本没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><p>（2）defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。</p><p>（3）async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，也就是说它的执 行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。</p><h3 id="6-CSS-优化、提高性能的方法有哪些？"><a href="#6-CSS-优化、提高性能的方法有哪些？" class="headerlink" title="6.CSS 优化、提高性能的方法有哪些？"></a>6.CSS 优化、提高性能的方法有哪些？</h3><p>6、加载性能：</p><p>（1）css压缩：将写好的css进行打包压缩，可以减少很多的体积。<br>（2）css单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top0bottom0;但margin-bottom:bottom;margin-left:left;执行的效率更高。<br>（3）减少使用@import,而建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</p><p>选择器性能：</p><p>（1）关键选择器（keyselector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</p><p>（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</p><p>（3）避免使用通配规则，如*{}计算次数惊人！只对需要用到的元素进行选择。</p><p>（4）尽量少的去对标签进行选择，而是用class。</p><p>（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</p><p>（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</p><p>渲染性能：</p><p>（1）慎重使用高性能属性：浮动、定位。</p><p>（2）尽量减少页面重排、重绘。</p><p>（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。</p><p>（4）属性值为0时，不加单位。</p><p>（5）属性值为浮动小数0.**，可以省略小数点之前的0。</p><p>（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</p><p>（7）不使用@import前缀，它会影响css的加载速度。</p><p>（8）选择器优化嵌套，尽量避免层级过深。</p><p>（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，用时，优劣考虑清楚，再使用。</p><p>（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</p><p>（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。webfonts通常体积庞大，而且一些浏览器在下载webfonts时会阻塞页面渲染损伤性能。</p><p>可维护性、健壮性：</p><p>（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。<br>（2）样式与内容分离：将css代码定义到外部css中。</p><h3 id="7、页面导入样式时，使用-link-和-import-有什么区别？"><a href="#7、页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="7、页面导入样式时，使用 link 和 @import 有什么区别？"></a>7、页面导入样式时，使用 link 和 @import 有什么区别？</h3><p>7、页面导入样式时，使用 link 和 @import 有什么区别</p><ul><li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li><li>页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li><li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，没有兼容问题;</li></ul><h3 id="8、介绍一下你对浏览器和浏览器内核的理解？"><a href="#8、介绍一下你对浏览器和浏览器内核的理解？" class="headerlink" title="8、介绍一下你对浏览器和浏览器内核的理解？"></a>8、介绍一下你对浏览器和浏览器内核的理解？</h3><p>8、介绍一下你对浏览器和浏览器内核的理解？</p><p>主要分成两个部分：渲染引擎(Render Engine)和JS引擎。</p><p>渲染引擎：负责取得网页的内容(html,xml和图像等)，整理讯息(例如假如css)，以及计算网页的显示方式，然后输出到显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不同。所有网页浏览器、电子邮件客户端以及它需要编辑、显示网络内容的应用程序都需要内核。</p><p>JS引擎：解析和执行JavaScript来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向与只指渲染引擎。</p><p>常见的浏览器内核比较</p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td>这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td>Safari</td><td>webkit</td><td>从Safari推出之时起，它的渲染引擎就是Webkit，一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。</td></tr><tr><td>chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td>Opera</td><td>blink</td><td>现在跟随chrome用blink内核。</td></tr></tbody></table><h3 id="9、常见浏览器所用内核"><a href="#9、常见浏览器所用内核" class="headerlink" title="9、常见浏览器所用内核"></a>9、常见浏览器所用内核</h3><p>9、常见浏览器所用内核</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</span><br><span class="line"></span><br><span class="line">（2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</span><br><span class="line"></span><br><span class="line">（3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</span><br><span class="line"></span><br><span class="line">（4） Safari 浏览器内核：Webkit 内核；</span><br><span class="line"></span><br><span class="line">（5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</span><br><span class="line"></span><br><span class="line">（6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</span><br></pre></td></tr></tbody></table></figure><h3 id="10、-JavaScript-有几种类型的值？描述一下他们的存储位置？"><a href="#10、-JavaScript-有几种类型的值？描述一下他们的存储位置？" class="headerlink" title="10、 JavaScript 有几种类型的值？描述一下他们的存储位置？"></a>10、 JavaScript 有几种类型的值？描述一下他们的存储位置？</h3><p>10、JavaScript 有几种类型的值？描述一下他们的存储位置？</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">js 可以分为两种类型的值，一种是基本数据类型，一种是引用（复杂）数据类型。</span><br><span class="line"></span><br><span class="line">基本数据类型：Undefined、Null、Boolean、Number、String，Symbol。</span><br><span class="line"></span><br><span class="line">复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。</span><br><span class="line"></span><br><span class="line">两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中保存对应的指针来获取堆中的值。</span><br></pre></td></tr></tbody></table></figure><h3 id="11、什么是堆？什么是栈？它们之间有什么区别和联系？"><a href="#11、什么是堆？什么是栈？它们之间有什么区别和联系？" class="headerlink" title="11、什么是堆？什么是栈？它们之间有什么区别和联系？"></a>11、什么是堆？什么是栈？它们之间有什么区别和联系？</h3><p>11、什么是堆？什么是栈？它们之间有什么区别和联系？</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">堆和栈的概念存在于数据结构中和操作系统内存中。</span><br><span class="line"></span><br><span class="line">在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全二叉树是堆的一种实现方式。</span><br><span class="line"></span><br><span class="line">在操作系统中，内存被分为栈区和堆区。</span><br><span class="line"></span><br><span class="line">栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</span><br><span class="line"></span><br><span class="line">堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。</span><br></pre></td></tr></tbody></table></figure><h5 id="12、浏览器的渲染原理？什么是重绘和回流？"><a href="#12、浏览器的渲染原理？什么是重绘和回流？" class="headerlink" title="12、浏览器的渲染原理？什么是重绘和回流？"></a>12、浏览器的渲染原理？什么是重绘和回流？</h5><ol><li><p>浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p></li><li><p>将CSS解析成 CSS Rule Tree 。</p></li><li><p>根据DOM树和CSSOM来构造 Rendering Tree。注意：Rendering Tree 渲染树并不等同于 DOM 树，因为一些像Header或display:none的东西就没必要放在渲染树中了。</p></li><li><p>有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为layout，顾名思义就是计算出每个节点在屏幕中的位置。</p></li><li><p>再下一步就是绘制，即遍历render树，并使用UI后端层绘制每个节点。</p></li></ol><p>　　注意：上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p><p>DOM Tree：浏览器将HTML解析成树形的数据结构。</p><p>CSS Rule Tree：浏览器将CSS解析成树形的数据结构。</p><p>Render Tree: DOM和CSSOM合并后生成Render Tree。</p><p>layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置。</p><p>painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。</p><p>reflow（回流）：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，内行称这个回退的过程叫 reflow。reflow 会从  这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p><p>repaint（重绘）：改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。</p><p>注意：<br>(1)display:none 的节点不会被加入Render Tree，而visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为display:none是更优的。</p><p>(2)display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。</p><p>(3)有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。但是在有些情况下，比如resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</p><h5 id="13、什么是文档的预解析？（浏览器解析过程）"><a href="#13、什么是文档的预解析？（浏览器解析过程）" class="headerlink" title="13、什么是文档的预解析？（浏览器解析过程）"></a>13、什么是文档的预解析？（浏览器解析过程）</h5><p>Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加<br> 载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析<br> 过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。</p><h5 id="14、用纯-CSS-创建一个三角形的原理是什么？"><a href="#14、用纯-CSS-创建一个三角形的原理是什么？" class="headerlink" title="14、用纯 CSS 创建一个三角形的原理是什么？"></a>14、用纯 CSS 创建一个三角形的原理是什么？</h5><p>x&nbsp;采用的是相邻边框连接处的均分原理。  将元素的宽高设为0，只设置border，把任意三条边隐藏掉（颜色设为transparent），剩下的就是一个三角形。 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#demo {  width: 0;  height: 0;  border-width: 20px;  border-style: solid;  border-color: transparent transparent red transparent;}</span><br></pre></td></tr></tbody></table></figure><h5 id="15、操作符什么时候用于字符串的拼接？"><a href="#15、操作符什么时候用于字符串的拼接？" class="headerlink" title="15、操作符什么时候用于字符串的拼接？"></a>15、操作符什么时候用于字符串的拼接？</h5><p>根据 ES5 规范 11.6.1 节，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p><p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p><p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p><h5 id="16、什么情况下会发生布尔值的隐式强制类型转换？"><a href="#16、什么情况下会发生布尔值的隐式强制类型转换？" class="headerlink" title="16、什么情况下会发生布尔值的隐式强制类型转换？"></a>16、什么情况下会发生布尔值的隐式强制类型转换？</h5><p>（1） if (..) 语句中的条件判断表达式。<br>（2） for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。<br>（3） while (..) 和 do..while(..) 循环中的条件判断表达式。<br>（4） ? : 中的条件判断表达式。<br>（5） 逻辑运算符 ||（逻辑或）和 &amp;&amp;（逻辑与）左边的操作数（作为条件判断表达式）。</p><h5 id="17、同步和异步的区别？"><a href="#17、同步和异步的区别？" class="headerlink" title="17、同步和异步的区别？"></a>17、同步和异步的区别？</h5><p>同步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返回为止再继续向下执行。</p><p>异步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等待消息的返回，当消息返回时系统再通知进程进行处理。</p><h5 id="18、-“1”-“2”-“3”-map-parseInt-答案是多少？"><a href="#18、-“1”-“2”-“3”-map-parseInt-答案是多少？" class="headerlink" title="18、[“1”, “2”, “3”].map(parseInt) 答案是多少？"></a>18、[“1”, “2”, “3”].map(parseInt) 答案是多少？</h5><p>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，其中 radix 表示要解析的数字的基数。（该值介于 2 ~ 36 之间，并且字符串中的数字不能大于 radix 才能正确返回数字结果值）。</p><p>此处 map 传了 3 个参数 (element, index, array)，默认第三个参数被忽略掉，因此三次传入的参数分别为 “1-0”, “2-1”, “3-2”</p><p>因为字符串的值不能大于基数，因此后面两次调用均失败，返回 NaN ，第一次基数为 0 ，按十进制解析返回 1。</p><h5 id="19、说说有哪些方法可以实现水平和垂直的居中"><a href="#19、说说有哪些方法可以实现水平和垂直的居中" class="headerlink" title="19、说说有哪些方法可以实现水平和垂直的居中"></a>19、说说有哪些方法可以实现水平和垂直的居中</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">对于宽高固定的元素</span><br><span class="line"></span><br><span class="line">（1）我们可以利用margin:0auto来实现元素的水平居中。</span><br><span class="line"></span><br><span class="line">（2）利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。</span><br><span class="line"></span><br><span class="line">（3）利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。</span><br><span class="line"></span><br><span class="line">（4）利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。</span><br><span class="line"></span><br><span class="line">（5）使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。</span><br><span class="line"></span><br><span class="line">对于宽高不定的元素，上面的后面两种方法，可以实现元素的垂直和水平的居中。</span><br></pre></td></tr></tbody></table></figure><h5 id="20、CSS-优先级算法如何计算？"><a href="#20、CSS-优先级算法如何计算？" class="headerlink" title="20、CSS 优先级算法如何计算？"></a>20、CSS 优先级算法如何计算？</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">判断优先级时，首先我们会判断一条属性声明是否有权重，也就是是否在声明后面加上了!important。一条声明如果加上了权重，</span><br><span class="line">那么它的优先级就是最高的，前提是它之后不再出现相同权重的声明。如果权重相同，我们则需要去比较匹配规则的特殊性。</span><br><span class="line"></span><br><span class="line">一条匹配规则一般由多个选择器组成，一条规则的特殊性由组成它的选择器的特殊性累加而成。选择器的特殊性可以分为四个等级，第一个等级是行内样式，为1000，第二个等级是id选择器，为0100，第三个等级是类选择器、伪类选择器和属性选择器，为0010，第四个等级是元素选择器和伪元素选择器，为0001。规则中每出现一个选择器，就将它的特殊性进行叠加，这个叠加只限于对应的等级的叠加，不会产生进位。选择器特殊性值的比较是从左向右排序的，也就是说以1开头的特殊性值比所有以0开头的特殊性值要大。比如说特殊性值为1000的的规则优先级就要比特殊性值为0999的规则高。如果两个规则的特殊性值相等的时候，那么就会根据它们引入的顺序，后出现的规则的优先级最高。</span><br></pre></td></tr></tbody></table></figure><h5 id="21、关于伪类-LVHA-的解释"><a href="#21、关于伪类-LVHA-的解释" class="headerlink" title="21、关于伪类 LVHA 的解释?"></a>21、关于伪类 LVHA 的解释?</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a标签有四种状态：链接访问前、链接访问后、鼠标滑过、激活，分别对应四种伪类:link、:visited、:hover、:active；</span><br><span class="line"></span><br><span class="line">当链接未访问过时：</span><br><span class="line"></span><br><span class="line">（1）当鼠标滑过a链接时，满足:link和:hover两种状态，要改变a标签的颜色，就必须将:hover伪类在:link伪类后面声明；</span><br><span class="line">（2）当鼠标点击激活a链接时，同时满足:link、:hover、:active三种状态，要显示a标签激活时的样式（:active），必须将:active声明放到:link和:hover之后。因此得出LVHA这个顺序。</span><br><span class="line"></span><br><span class="line">当链接访问过时，情况基本同上，只不过需要将:link换成:visited。</span><br><span class="line"></span><br><span class="line">这个顺序能不能变？可以，但也只有:link和:visited可以交换位置，因为一个链接要么访问过要么没访问过，不可能同时满足，也就不存在覆盖的问题。</span><br></pre></td></tr></tbody></table></figure><h5 id="22、null-和-undefined-的区别？"><a href="#22、null-和-undefined-的区别？" class="headerlink" title="22、null 和 undefined 的区别？"></a>22、null 和 undefined 的区别？</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</span><br><span class="line"></span><br><span class="line">null： Null类型，代表“空值”，代表一个空对象指针，使用typeof运算得到 “object”，所以你可以认为它是一个特殊的对象值。</span><br><span class="line">undefined： Undefined类型，当在作用域中声明了一个变量但未赋值时，得到的就是undefined。</span><br><span class="line"></span><br><span class="line">undefined是访问一个未初始化的变量时返回的值，而null是访问一个尚未存在的对象时所返回的值。因此，可以把undefined看作是空的变量，而null看作是空的对象，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</span><br><span class="line"> </span><br><span class="line">null是javascript的关键字，可以认为是对象类型。undefined 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</span><br><span class="line"></span><br><span class="line">当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</span><br></pre></td></tr></tbody></table></figure><h5 id="23、-说几条写-JavaScript-的基本规范？"><a href="#23、-说几条写-JavaScript-的基本规范？" class="headerlink" title="23、 说几条写 JavaScript 的基本规范？"></a>23、 说几条写 JavaScript 的基本规范？</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在平常项目开发中，我们遵守一些这样的基本规范，比如说：</span><br><span class="line"></span><br><span class="line">（1）一个函数作用域中所有的变量声明应该尽量提到函数首部，用一个 var 声明，不允许出现两个连续的 var 声明，声明时如果变量没有值，应该给该变量赋值对应类型的初始值，便于他人阅读代码时，能够一目了然的知道变量对应的类型值。</span><br><span class="line"></span><br><span class="line">（2）代码中出现地址、时间等字符串时需要使用常量代替。</span><br><span class="line"></span><br><span class="line">（3）在进行比较的时候吧，尽量使用'===', '!=='代替'==', '!='。</span><br><span class="line"></span><br><span class="line">（4）不要在内置对象的原型上添加方法，如 Array, Date。</span><br><span class="line"></span><br><span class="line">（5）switch 语句必须带有 default 分支。</span><br><span class="line"></span><br><span class="line">（6）for 循环必须使用大括号。</span><br><span class="line"></span><br><span class="line">（7）if 语句必须使用大括号。</span><br></pre></td></tr></tbody></table></figure><h5 id="24、Javascript-中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"><a href="#24、Javascript-中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？" class="headerlink" title="24、Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"></a>24、Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hasOwnProperty     </span><br><span class="line">所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性，和in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 练手 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据指标Vue项目代码交接说明</title>
      <link href="2021/06/01/bsjj/"/>
      <url>2021/06/01/bsjj/</url>
      
        <content type="html"><![CDATA[<h1 id="使用到的技术"><a href="#使用到的技术" class="headerlink" title="使用到的技术"></a>使用到的技术</h1><p>本项目使用的技术是Vue-cli项目框架、Axios数据请求、Element UI框架、xlsx表格读取插件、echarts图标插件、moment时间格式化插件、drag-tree-table树形表格插件、d3高度自由图表插件、数字逐增动画插件等。</p><h1 id="项目目录说明"><a href="#项目目录说明" class="headerlink" title="项目目录说明"></a>项目目录说明</h1><h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><p>本项目的文件放置规范是不太符合目前行业里的文件存放共识的。</p><p>本项目的所有代码都存放于<code>src/sjzb/</code>里。</p><p>路由文件存放在<code>src/router</code>里。</p><p>静态文件（如字体、css全局样式）存放于<code>src/assets</code>里。</p><p>图片资源存放于<code>src/img</code>里。</p><p>api交互文件存放于<code>src/api</code>里。</p><p>项目的布局参考Axure原型图。链接为<a href="https://vgtdts.axshare.com/#id=yyrxdh&amp;p=%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B_%E9%A6%96%E9%A1%B5_&amp;g=1">https://vgtdts.axshare.com/#id=yyrxdh&amp;p=%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B_%E9%A6%96%E9%A1%B5_&amp;g=1</a></p><p>在2021年的10月1日前，可以通过临时域名<a href="http://bishe.chenlx.top/">bishe.chenlx.top</a>进行项目的预览。在这个时间过后，这个域名将会因为过期而撤销。</p><h2 id="目录概要"><a href="#目录概要" class="headerlink" title="目录概要"></a>目录概要</h2><h3 id="整体说明"><a href="#整体说明" class="headerlink" title="整体说明"></a>整体说明</h3><p>本项目的目录划分目前是按照Axure原型图的规划将文件存放于各个文件夹。也就是说，按照业务逻辑进行分类。但一开始并没有遵循该原则，所以有一部分的文件会存放在其他的地方。对于找不到的文件可以尝试通过路由文件的形式进行搜索，或者树形菜单文件进行查找，下方会进行说明。</p><h3 id="项目的访问入口-amp-页面跳转的方法说明"><a href="#项目的访问入口-amp-页面跳转的方法说明" class="headerlink" title="项目的访问入口&amp;页面跳转的方法说明"></a>项目的访问入口&amp;页面跳转的方法说明</h3><p>项目的入口在App.vue里。当项目开始运行后，通过<code>App.vue</code>进入Vue 项目，再通过<code>index.vue</code>进入项目的整体框架（导航栏、主栏、侧栏）。</p><ul><li>导航栏即包含Logo的顶栏。</li><li>侧栏是侧边导航栏，目前包含4个按钮，倒数三个按钮目前没有规划。</li><li>主栏即主要内容，包含接下来要使用的树形菜单、页面详情。</li></ul><blockquote><p>所有的页面都通过<code>&lt;router-view&gt;</code>将每一个<code>.vue组件</code>中的内容进行切换显示。<code>router-view</code>标签类似<code>iframe</code>标签。能达到当前页面里只有某一个 区域的内容进行变化和渲染。</p></blockquote><p>从<code>index.vue</code>里将进入<code>dbView.vue</code>。这里算是真正的数据指标项目的总框架页面。这个组件包含树形菜单以及页面内容。</p><ul><li>树形菜单即页面左侧的树状菜单，包括菜单本身以及搜索框。单击菜单项可以进行页面跳转。</li><li>页面内容来自于接下来要说明的各个业务里的组件，通过<code>src/router/index.js</code>进行标明，并在<code>src/sjzb/components/treenav.vue</code>里提供跳转的功能。</li></ul><blockquote><p>Vue项目里，src目录是整个项目的页面资源目录，在代码里，可以通过<code>@</code>符号来代表<code>/src</code>目录。</p></blockquote><p>所有文件夹的首目录一般都叫<code>index.vue</code>，或者<code>xxxTable.vue</code>。在早期时，文件都以业务+Table来标明这是xx业务的首页（如：物理模型的首页，就叫作<code>modelTable.vue</code>，但现在都已用<code>index.vue</code>进行表示。</p><h3 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a>命名方法</h3><p>文件夹的命名方法通常采用Axure提供的目录进行英文直译。如<code>数据模型</code>就会翻译成<code>dataModel</code>，<code>概念模型</code>就会翻译成<code>concept</code>。出现代码本身内容与文件名不一致的情况，可能是因为该文件在中途发生了逻辑上的变更。</p><h3 id="文件更名注意事项"><a href="#文件更名注意事项" class="headerlink" title="文件更名注意事项"></a>文件更名注意事项</h3><p>基本上来说，每一个文件的文件名不能随意更改，否则其他文件的引用就会出现问题。如果更改了文件名，请统一整个项目的文件名，并批量替换。</p><h2 id="Bus-js文件"><a href="#Bus-js文件" class="headerlink" title="Bus.js文件"></a>Bus.js文件</h2><p>Bus文件是Vue项目里组件之间通信的桥梁。通过bus.$emit和bus.$on可以再不同的页面之间传递参数，在数据指标项目里最明显的效果，就是在物理模型的表格里，想查看C模型的详情信息时，跳转页面同时带上<code>C模型</code>这个参数。</p><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><p>main文件是项目的配置文件，主要是对插件的全局引用和一些参数的配置。</p><h2 id="publicFunc-index-js"><a href="#publicFunc-index-js" class="headerlink" title="publicFunc/index.js"></a>publicFunc/index.js</h2><p>这个文件的用途是用来存放一些公共的函数，如：处理数字格式、获取固定的数据集合等等。</p><h2 id="router-index-js"><a href="#router-index-js" class="headerlink" title="router/index.js"></a>router/index.js</h2><p>这个文件存放着项目的路由信息。不论是直接输入url，或者是通过树形菜单点击菜单项，跳转的依据都从该路由文件查找获取。简单说明一下几个参数。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">path</span>: url上显示的路径</span><br><span class="line"><span class="attr">component</span>: 加载的组件名称，通过es6的箭头函数导入</span><br><span class="line"><span class="attr">name</span>: 路由的别称，path过长时，如果name的明明规范，可以很有效的替代path的效果。</span><br><span class="line"><span class="attr">meta</span>:附带信息，如标题</span><br><span class="line"><span class="attr">hidden</span>: 是否隐藏，只能输入布尔值</span><br><span class="line"><span class="attr">children</span>: 是否有孩子，该变量存放对象数组，也就是[{},{}]</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h2 id="关于每个业务的详细解释"><a href="#关于每个业务的详细解释" class="headerlink" title="关于每个业务的详细解释"></a>关于每个业务的详细解释</h2><h3 id="数据模型首页（Default-vue）"><a href="#数据模型首页（Default-vue）" class="headerlink" title="数据模型首页（Default.vue）"></a>数据模型首页（Default.vue）</h3><h1 id="关于树形菜单的说明"><a href="#关于树形菜单的说明" class="headerlink" title="关于树形菜单的说明"></a>关于树形菜单的说明</h1><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h2 id="菜单本身"><a href="#菜单本身" class="headerlink" title="菜单本身"></a>菜单本身</h2><h3 id="如何增添改用"><a href="#如何增添改用" class="headerlink" title="如何增添改用"></a>如何增添改用</h3><p>菜单的组件在<code>src/sjzb/components/treenav.vue</code>里。里头存储着菜单信息的对象数组。根据需要进行增删改。</p><h3 id="关于图标"><a href="#关于图标" class="headerlink" title="关于图标"></a>关于图标</h3><h4 id="图标的自动填充"><a href="#图标的自动填充" class="headerlink" title="图标的自动填充"></a>图标的自动填充</h4><p>js程序里，对图标的某些条件下会进行自动填充。当前对象没有孩子，且没有指定图标时，会填充<code>{}</code>样式的图标。</p><h4 id="图标的更换"><a href="#图标的更换" class="headerlink" title="图标的更换"></a>图标的更换</h4><p>图标来源来自Element UI 以及iconfont网站。如果直接使用eleUI的图标，直接在变量值里填入网站内提供的iconNam计科（如，’+’号，就直接填入<code>el-icon-plus</code>）。如果使用iconfont字体图标，请多补充两个样式名称来进行调整（如添加数据库图标，则样式名要填入<code>iconfont treeIcon icon-shujuku2</code>）。<code>treeIcon</code>为后来临时协调的样式，如果在iconfont网站上寻找的图片比之前的还要偏大或者偏小，这个<code>treeIcon</code>可能协调的效果并不完美，就需要新写一个样式来与整体的图标的大小保持相同了。</p><h1 id="关于页面布局的说明"><a href="#关于页面布局的说明" class="headerlink" title="关于页面布局的说明"></a>关于页面布局的说明</h1><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><h3 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h3><h3 id="上方的总体区域"><a href="#上方的总体区域" class="headerlink" title="上方的总体区域"></a>上方的总体区域</h3><h4 id="搜索框-amp-热词"><a href="#搜索框-amp-热词" class="headerlink" title="搜索框&amp;热词"></a>搜索框&amp;热词</h4><p>搜索框一般存在于业务的首页里，如基本词类次、数值指标0-数据模型的首页。</p><h4 id="统计卡片"><a href="#统计卡片" class="headerlink" title="统计卡片"></a>统计卡片</h4><p>统计卡片放置在页面上方，以4种颜色循环显示。目前通过变量写死的方式进行展示。</p><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p>表单的样式经过较为深度的更改，与三种class进行搭配组合出表单的效果。其中，<code>small_input</code>大约占用宽度的1/3；<code>medium_input</code>大约占用宽度的1/2；<code>full_input</code>占用一整行的宽度，更多的样式效果请参考上述说明的全局css文件中对于Input控件的表述。</p><h4 id="复杂表单"><a href="#复杂表单" class="headerlink" title="复杂表单"></a>复杂表单</h4><p>复杂表单就是在常规表单的基础上，与收缩栏进行结合现实的效果，其输入的表单项都归纳到了同一个变量属性里。一般这个变量叫作<code>ikForm</code>。如果有更多其他的表单项，在新建的同时，请把新表单项的属性放入<code>ikForm</code>，否则会因为Vue的数据双向绑定的原因，而无法输入。</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><h4 id="【更多-···】操作按钮"><a href="#【更多-···】操作按钮" class="headerlink" title="【更多|···】操作按钮"></a>【更多|···】操作按钮</h4><p>位于页面上方的更多按钮，都用<code>id="moremenu"</code>来标识。借助eleUI的下拉菜单控件来达到呼出菜单的效果。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"moremenu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"font-size: 1rem"</span> <span class="attr">icon</span>=<span class="string">"el-icon-more"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">v-for</span>=<span class="string">"(obj, index) in getBoxRightClickMenuList(cardData.moreMenu)"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">:divided</span>=<span class="string">"obj.divided"</span> @<span class="attr">click.native</span>=<span class="string">"obj.onClick()"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">"obj.icon"</span> <span class="attr">:style</span>=<span class="string">"obj.iconStyle"</span> /&gt;</span></span><br><span class="line">                        {{ obj.label }}</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="下方的数据区域"><a href="#下方的数据区域" class="headerlink" title="下方的数据区域"></a>下方的数据区域</h3><h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><p>略。具体看代码注释。</p><h4 id="常规表格"><a href="#常规表格" class="headerlink" title="常规表格"></a>常规表格</h4><p>略。具体看代码注释。</p><h4 id="复杂表单-1"><a href="#复杂表单-1" class="headerlink" title="复杂表单"></a>复杂表单</h4><p>复杂表单的运用情况主要是有收缩栏的布局情况下需要使用。其本质上就是在常规表格的外面再包一层收缩栏。</p><h4 id="图形SVG"><a href="#图形SVG" class="headerlink" title="图形SVG"></a>图形SVG</h4><p>目前这个部分的代码是直接引用生成的svg代码放入.vue组件中（也就是写死的）。项目里唯一有svg的代码，在<code>概念模型-模型详情</code>里的引导图组件中体现。</p><h4 id="可拖拽的树形表格"><a href="#可拖拽的树形表格" class="headerlink" title="可拖拽的树形表格"></a>可拖拽的树形表格</h4><p>可拖拽的树形表格来源于<a href="https://www.cnblogs.com/bfgis/p/9805928.html">https://www.cnblogs.com/bfgis/p/9805928.html</a>   。其表格可以支持拖拽到其他的结点或者子节点里。但是操作栏只能支持<a>标签，无法支持eleUi的呼出菜单。</a></p><a></a><h4 id="另一款树形表格（二改）"><a></a><a href="#另一款树形表格（二改）" class="headerlink" title="另一款树形表格（二改）"></a>另一款树形表格（二改）</h4><p>这一款树形表格控件来源于<a href="https://github.com/sijinglei/vue-tree-table">https://github.com/sijinglei/vue-tree-table</a></p><p>这个控件的显示效果比上一款树形表格的显示效果好一些，但是不支持拖拽。且原来的表格树状表格的表头是写死的；为此进行了修改，可以支持<code>props</code>填入表头属性，<code>propsCh</code>填入表头标题达到组件化表格的目的。</p><h4 id="常规表格里的【更多-···】操作按钮"><a href="#常规表格里的【更多-···】操作按钮" class="headerlink" title="常规表格里的【更多|···】操作按钮"></a>常规表格里的【更多|···】操作按钮</h4><p>更多按钮目前统一是用Element Ui的下拉菜单控件，每一个菜单项都依靠当前组件的函数进行组合，一般这个函数叫作<code>getRightClickMenu()</code>或者类似的函数名称。</p><h4 id="表格里的右键事件"><a href="#表格里的右键事件" class="headerlink" title="表格里的右键事件"></a>表格里的右键事件</h4><p>表格中的右击事件采用的是该作者提供的插件进行实现。链接：<a href="https://segmentfault.com/a/1190000021430700%E3%80%82%E8%AF%A5%E9%A1%B5%E9%9D%A2%E5%B7%B2%E6%9C%89%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E5%86%8D%E5%8F%A6%E5%A4%96%E8%AF%B4%E6%98%8E%E3%80%82">https://segmentfault.com/a/1190000021430700。该页面已有使用步骤，这里不再另外说明。</a></p><h4 id="原生表格"><a href="#原生表格" class="headerlink" title="原生表格"></a>原生表格</h4><p>原生表格主要是应对横向表格的需求而使用的。目前使用<code>databaseType</code>样式来统一表示该应用场景的效果。</p><h2 id="常规布局编写"><a href="#常规布局编写" class="headerlink" title="常规布局编写"></a>常规布局编写</h2><h2 id="JSON布局自动生成"><a href="#JSON布局自动生成" class="headerlink" title="JSON布局自动生成"></a>JSON布局自动生成</h2><h3 id="意义解释"><a href="#意义解释" class="headerlink" title="意义解释"></a>意义解释</h3><p>在频繁迭代的Axure图里，总会出现非常相似的页面布局。所以这部分相似的页面布局，为了不重复写这些布局代码，就用JSON配置的方式，让页面在渲染时，通过v-for的方法生成页面的每一个控件。一般来说，用JSON生成页面的组件，开头都会有一段注释来进行说明。<strong>但这个自动生成的页面再后续开发是不适用的，目前只适用于为了产生DEMO快速开发的情况。</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!---------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">|    本页面为<span class="built_in">JSON</span>生成控件页面，在CardData和TabData输入相应属性和值</span><br><span class="line">|</span><br><span class="line">&lt;!---------------------------------------------------------------------&gt;</span><br></pre></td></tr></tbody></table></figure><p>在组件中可能出现某一个div或者其他的标签里，标注着<code>v-if="1==2"</code>，这是为了将这个标签不显示在页面上而进行的标注，<code>v-if</code>属性接收布尔值，从而决定该标签是否渲染到DOM上。而正常来讲，不需要用到的标签为了不让代码混乱，是需要删除的；但是在下一个迭代版本，这个标签里的内容可能又需要显示回来，充满不确定性，故先临时隐藏，等同于<code>style="display:none"</code>。</p><h3 id="cardData——上方·表单信息"><a href="#cardData——上方·表单信息" class="headerlink" title="cardData——上方·表单信息"></a>cardData——上方·表单信息</h3><p>这个变量用于渲染上方表格的内容。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">isUse: 决定该选项是否使用并显示，接收布尔值,</span><br><span class="line">               <span class="attr">moreMenu</span>: <span class="comment">//右上···菜单的内容，接收参数为对象数组,</span></span><br><span class="line">               formProp: [{</span><br><span class="line">                       <span class="attr">label</span>: <span class="comment">//表单项的标签名,</span></span><br><span class="line">                       prop: <span class="comment">//表单属性名称,</span></span><br><span class="line">                       ele: <span class="comment">//表单控件类型：text、textarea、null,</span></span><br><span class="line">                       <span class="class"><span class="keyword">class</span>: //控件长度：'<span class="title">small_input</span>'、<span class="title">medium_input</span>、<span class="title">large_input</span>、<span class="title">full_input</span>,</span></span><br><span class="line"><span class="class">                       <span class="title">isBr</span>: //布尔值，暂时无用</span></span><br><span class="line"><span class="class">                   },</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">               ],</span></span><br><span class="line"><span class="class">               <span class="title">formData</span>: </span>{</span><br><span class="line">                  <span class="comment">//这里的data内容用来填充表单每一个项的值。需要与上方表单的prop一致。</span></span><br><span class="line">               },</span><br><span class="line">               <span class="attr">tags</span>: {</span><br><span class="line">                   <span class="comment">//这里是放置标签的，样式已经固定。</span></span><br><span class="line">                   <span class="attr">isUse</span>:<span class="literal">false</span>,</span><br><span class="line">                   <span class="attr">data</span>:{</span><br><span class="line">                   <span class="attr">dept</span>: [<span class="string">'部门标签a'</span>], <span class="comment">//部门标签</span></span><br><span class="line">                   <span class="attr">classic</span>: [<span class="string">'分类标签A'</span>, <span class="string">'mysql'</span>], <span class="comment">//分类标签</span></span><br><span class="line">                   <span class="attr">styles</span>: [<span class="string">'0512存'</span>] <span class="comment">//个性标签</span></span><br><span class="line">               }</span><br><span class="line">               }</span><br></pre></td></tr></tbody></table></figure><h3 id="tabsData——下方·标签页信息"><a href="#tabsData——下方·标签页信息" class="headerlink" title="tabsData——下方·标签页信息"></a>tabsData——下方·标签页信息</h3><p>这个变量用于显示页面下方的标签页的内容信息。如果有多个选项卡，请组成对象数组。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">                   <span class="attr">tabname</span>: <span class="string">"操作日志"</span>, <span class="comment">//标签页的页头（名字）</span></span><br><span class="line">                   <span class="attr">type</span>: <span class="string">'table'</span>,<span class="comment">//标签页里显示的内容：table、mutitable、mutiforms</span></span><br><span class="line">                   <span class="attr">propsLabel</span>: [<span class="string">"时间戳"</span>,  <span class="string">"动作"</span>,<span class="string">"操作人"</span>],<span class="comment">//表格的表头中文标签</span></span><br><span class="line">                   <span class="attr">props</span>: [<span class="string">"time"</span>, <span class="string">"action"</span>, <span class="string">"name"</span>], <span class="comment">//表格的属性</span></span><br><span class="line">                   <span class="attr">clickMenuList</span>: [<span class="string">"edit"</span>, <span class="string">"delete"</span>],<span class="comment">//表格的更多操作按钮中的菜单项（日志类表格是没有的）</span></span><br><span class="line">                   <span class="attr">tableOption</span>: {</span><br><span class="line">                       <span class="comment">//表格下方的配置项，皆为布尔值</span></span><br><span class="line">                       <span class="attr">isPager</span>: <span class="literal">true</span>,<span class="comment">//分页，当不足1页时分页会自动隐藏，请直接按需开启</span></span><br><span class="line">                       <span class="attr">isFilter</span>: <span class="literal">true</span>,<span class="comment">//过滤</span></span><br><span class="line">                       <span class="attr">isCreate</span>: <span class="literal">false</span>,<span class="comment">//新建</span></span><br><span class="line">                   },</span><br><span class="line">                   <span class="attr">data</span>: [</span><br><span class="line">                       {},{}</span><br><span class="line">                       <span class="comment">//这里放表格的内容，请放置对象数组，一个对象对应一行，key请严格按照表格的prop进行放置。</span></span><br><span class="line">                   ],</span><br><span class="line">               },</span><br></pre></td></tr></tbody></table></figure><h3 id="stasticList-——上方·统计卡片区域"><a href="#stasticList-——上方·统计卡片区域" class="headerlink" title="stasticList ——上方·统计卡片区域"></a>stasticList ——上方·统计卡片区域</h3><p>与上述类似，不再说明。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">{</span><br><span class="line">    <span class="attr">isUse</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">data</span>: [</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">"新增表"</span>, <span class="comment">//显示的内容标题</span></span><br><span class="line">                        <span class="attr">count</span>: <span class="string">"5"</span>,<span class="comment">//统计数值</span></span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">"修改表"</span>,</span><br><span class="line">                        <span class="attr">count</span>: <span class="string">"32"</span>,</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">"删除表"</span>,</span><br><span class="line">                        <span class="attr">count</span>: <span class="string">"3"</span>,</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">"错误"</span>,</span><br><span class="line">                        <span class="attr">count</span>: <span class="string">"3"</span>,</span><br><span class="line">                    },</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">"警告"</span>,</span><br><span class="line">                        <span class="attr">count</span>: <span class="string">"37"</span>,</span><br><span class="line">                    },</span><br><span class="line">                ],</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="关于首页文字导入替换功能"><a href="#关于首页文字导入替换功能" class="headerlink" title="关于首页文字导入替换功能"></a>关于首页文字导入替换功能</h1><p>资产链的首页支持将各个区域的文字进行替换。功能的入口藏在了首页右上方的【···】按钮，单击自动化按钮进入替换操作的页面。借助Excel模板，可以将文字导入进系统进行替换。由于替换文字信息是借助<code>sessionStorage</code>进行存储的，所以替换的生效时段为<code>替换成功后~浏览器关闭页面前</code>。重新打开页面时，替换文字将还原为默认文字。导入的Excel文件需为一开始提供的模板。擅自更改模板填写的区域或其他变更会导致替换失败。</p><p>替换的组件路径是<code>src/homepage/importExcel.vue</code></p><h1 id="关于样式"><a href="#关于样式" class="headerlink" title="关于样式"></a>关于样式</h1><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><p>数据指标项目的全局样式基于ElementUI进行了较为深度的更改，为了避免冗余的代码，在<code>src/assets/zbcss.css</code>这个文件里，放入了对于空间样式更改的css内容。这个css文件的代码在全局都是生效的。如果没有特殊的需求，就尽量不要再去变动已存在的css代码。</p><h2 id="当前页的样式"><a href="#当前页的样式" class="headerlink" title="当前页的样式"></a>当前页的样式</h2><p>当前页的样式都各自存在每一个<code>.vue</code>文件最下方的<code>&lt;style scoped&gt;</code>里。在<code>scoped</code>标识符标注的style标签，使得这个样式只在本.vue文件里生效。这个优先级会高于上述说的全局样式，有特殊的样式效果请在这里编写。</p><h1 id="关于与后台进行数据交互"><a href="#关于与后台进行数据交互" class="headerlink" title="关于与后台进行数据交互"></a>关于与后台进行数据交互</h1><p>在以往的版本，仍然有使用Vue+SpringBoot+Neo4j的形式进行数据交换，使用的是axios插件。但前端页面的版本反复迭代，并且目前没有显示真实数据库里的数据的需求，<strong>所以在后面的版本中，这个交互的代码被注释或者删除。</strong>后续有需求进行数据交互时，请在<code>main.js</code>中指定axios的请求url，并在<code>/src/api</code>目录新增js文件并编写交互请求的函数。</p><h1 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h1><p>项目的运行依赖npm工具、node.js；使用vue-cli工具编写及维护项目；项目中使用到了axios、ElementUI、momentjs等的插件。在新环境运行前，需要先安装node软件（最新版本即可）、npm包管理工具（7.14.0）。</p><p>安装完后，请全局下载vue-cli脚手架工具。在cmd输入<code>npm install vue-cli -g</code>即可安装。</p><p>接着，需要下载项目插件依赖，这些依赖的包名都被统一到了<code>package.json</code>管理，安装完的插件包则会被放置到<code>node_modules</code>文件夹。项目包已内含<code>node_modules</code>，但如果运行失败，且原因可能是包丢失或版本不一致的话，可以再尝试<code>npm install</code>命令进行包安装。</p><p>如电脑环境已有上述安装，可忽略；如果运行碰到了其他的问题，可以尝试上网搜索一下，一般对于安装运行过程中的问题网上都会有解答。</p><p>解压项目到指定位置，根据不同环境的需求进行运行。</p><h2 id="开发环境运行"><a href="#开发环境运行" class="headerlink" title="开发环境运行"></a>开发环境运行</h2><p>在开发环境，输入<code>npm run dev</code>进行启动。设定的访问地址为<code>http://localhost:8080</code>。根据实际端口占用的情况可能会变更（例如我这台电脑实际运行的端口是8081）。</p><h2 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h2><p>打包出来的文件即可用Nginx等软件进行部署访问。首先输入<code>npm run build</code>命令，对项目进行打包。生成的文件夹叫作<code>dist</code>。访问index.html即可通过入口进入项目。但是！直接打开文件是无法访问的，一定要通过部署nginx、apache等软件才能使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计论文：基于javaEE的房屋租赁管理系统的设计与实现</title>
      <link href="2021/05/27/bysj/"/>
      <url>2021/05/27/bysj/</url>
      
        <content type="html"><![CDATA[<h1 id="福建工程学院本科毕业设计（论文）作者承诺保证书"><a href="#福建工程学院本科毕业设计（论文）作者承诺保证书" class="headerlink" title="福建工程学院本科毕业设计（论文）作者承诺保证书"></a>福建工程学院本科毕业设计（论文）作者承诺保证书</h1><p>本人郑重承诺：本篇毕业设计（论文）的内容真实、可靠。如果存在弄虚作假、抄袭的情况，本人愿承担全部责任。</p><p>学生签名：<br>2020 年 1 月 日</p><h1 id="福建工程学院本科毕业设计（论文）指导教师承诺保证书"><a href="#福建工程学院本科毕业设计（论文）指导教师承诺保证书" class="headerlink" title="福建工程学院本科毕业设计（论文）指导教师承诺保证书"></a>福建工程学院本科毕业设计（论文）指导教师承诺保证书</h1><p>本人郑重承诺：我已按有关规定对本篇毕业设计(论文)的选题与内容进行了指导和审核，且提交的毕业设计（论文）终稿与上传至“大学生论文管理系统”检测的电子文档相吻合，未发现弄虚作假、抄袭的现象，本人愿承担指导教师的相关责任。</p><p>指导教师签名：<br>2020 年 月 日</p><h1 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h1><p>Md文件中忽略</p><p>基于javaEE的房屋租赁管理系统的设计与实现</p><h1 id="摘-要"><a href="#摘-要" class="headerlink" title="摘 要"></a>摘 要</h1><p>在如今的互联网时代，传统繁琐的租赁流程已不太适用于当下忙碌而又快节奏的生活。租客想在工作的城市借居却很难即时发现自己最为心仪的房源；流动租客过多时也导致房东难以进行管理。因此，本课题借由这一社会现象设计并实现了一套房屋租赁管理系统。该课题的开发语言选择Vue与JavaEE，采用Element<br>UI、SSM等技术框架；使用Tomcat搭建服务器，以及使用MySQL数据库进行数据存储。系统拥有搜索房源、租赁房源、签订合同、支付账单等功能。通过本系统，租客可以直接在网页搜索查询自己想要的房屋信息；通过查阅房源的评分，租客能对房源的客观状态一目了然，同时，也支持租客在网站内完成预约上门看房、申请租房、签约合同、支付房租等功能；房东也可以在网站上直接对合同、账单、租客预约等进行便捷的处理。在处理租客的租房申请时，房东也能根据租客的评分来决定是否向租客出租以避免糟心的问题。系统可以简化租赁流程，直接在一个网站上存储相应的租赁内容并提供随时查阅。不论是租客还是房东，在租赁结束后都能为对方进行评价，形成一套简单的用户评价体系。系统完成后的测试结果表明，该系统运行状态良好，对各个功能进行了不同环境的测试，基本符合用户的良好体验。</p><p>关键字：房屋，租赁，Vue，J2EE<br>Design and Implementation of a House Rental Management System Based on JavaEE</p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>In today’s Internet age, the traditional tedious rental process is no longer suitable for today’s busy and fast-paced life. Tenants want to live in the city  where they work, but it ’s difficult to find their favorite property instantly;  too many mobile tenants also make it difficult for landlords to manage.  Therefore, the subject designs and implements a house rental management system  based on this social phenomenon. Vue, SSM and other technologies were selected  as the development language used in this system. Using Tomcat to build the  server, and select MySQL database for data storage. The system has functions  such as searching for listings, renting listings, contracts, and paying bills.  Through this system, tenants can search for the desired housing information  directly on the webpage. By checking the ratings of the listing and the  landlord, the objective status of the listing or the landlord can be seen at a  glance. Apply for rent online, read and sign the contract, pay rent bill. The  landlord can also conveniently handle the contracts, the bills, the appointments  and the bill directly on the website. When processing a housing application, you  can decide whether to rent based on the tenant’s evaluation. Avoid bad  experiences. The system can make most of the leasing process paperless, store  the corresponding content directly on a website and can check it at any time.  Both the tenant and the landlord can evaluate the other party after the lease  ends, forming a simple user evaluation system. The test results after the  completion of the system show that the system is running well, and various  functions have been tested in different environments, which basically meets the  user’s good experience.</p><p>Keywords: House, Rent, Vue, J2EE</p><h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h2 id="1-1-课题背景及意义"><a href="#1-1-课题背景及意义" class="headerlink" title="1.1 课题背景及意义"></a>1.1 课题背景及意义</h2><p>近年来，我国的社会经济迅猛发展，工作机遇也越来越多，市场对于房屋租赁的需求也在不断增多[1]。大部分的年轻人喜欢到大城市去寻找工作，因此，伴随着这一现象的基础问题之一就是住宿。</p><p>中国之大，流动人口众多。在中国加入WTO后，房屋租赁行业受到国外竞争者的挑战[2]。如今，网络贯穿着我们生活的各个场景，人们越来越希望在繁琐重复的事情上节省更多的时间。传统的那种：租客四处寻、房东、房东用纸笔记录的方式已经不是那么得适用于目前的情况。而租客身在异乡人生地不熟，很难一时发现自己最为心仪的出租房；流动租客过多时，房东也很难进行便捷管理。本课题准备设计一个针对租客、房东两位核心角色，提供便捷寻房、租房和住房的平台。便捷二字，对于为生活奔波的租客、管理的房东来讲无疑是最重要的，所以，本课题的研究对于这两类角色有着减轻负担、节省时间、提升生活里的幸福感的意义。</p><h2 id="1-2-国内外现状"><a href="#1-2-国内外现状" class="headerlink" title="1.2 国内外现状"></a>1.2 国内外现状</h2><h3 id="1-2-1国内现状"><a href="#1-2-1国内现状" class="headerlink" title="1.2.1国内现状"></a>1.2.1国内现状</h3><p>同发达国家相比，我国的租赁公寓起步较晚，租赁政策较少，因此我国目前的租赁市场并不健全，传统的住房租赁市场主要为个体房东，机构参与者较少[11]。稀少的平台导致在某些区域里，租赁价格与实际价值有出入、价格不透明，从而存在不同的租客租赁同一间房源时，存在没有理由的价格差异的现象。</p><h3 id="1-2-2国外现状"><a href="#1-2-2国外现状" class="headerlink" title="1.2.2国外现状"></a>1.2.2国外现状</h3><p>与大多数发展国家而言，国外的房屋租赁率较高主要是一种分配制度造成的[3]。德国的首都柏林大约有22.5万套“社会住房”专供低收入者租住[4]；日本东京为了解决高昂的租房金问题政府制定一套完善策可以根据不同的收入缴纳租金[6]。国外的房屋租住政策使得国外的房屋市场发展迅猛。一是通过共享信息平台政策使得国外的房屋市场发展迅猛，或者房屋租赁软件来推广业务；二是通过先进的互联网技术提高数据处理效率，完全替代手工录用方式。[7][8]</p><h1 id="第二章-相关技术"><a href="#第二章-相关技术" class="headerlink" title="第二章 相关技术"></a>第二章 相关技术</h1><h2 id="2-1开发环境"><a href="#2-1开发环境" class="headerlink" title="2.1开发环境"></a>2.1开发环境</h2><p>开发工具：IntelliJ IDEA 2019.1.1</p><p>数据库管理工具：Navicat for MySQL5.5</p><p>开发语言：Vue + JavaEE</p><h2 id="2-2相关技术"><a href="#2-2相关技术" class="headerlink" title="2.2相关技术"></a>2.2相关技术</h2><h3 id="2-2-1-Vue技术"><a href="#2-2-1-Vue技术" class="headerlink" title="2.2.1 Vue技术"></a>2.2.1 Vue技术</h3><p>Vue.js是一套构建用户界面的渐进式框架，他能够更方便的进行页面上数据的处理，并且实现单页面多内容渲染。</p><h3 id="2-2-2-MySQL"><a href="#2-2-2-MySQL" class="headerlink" title="2.2.2 MySQL"></a>2.2.2 MySQL</h3><p>MySQL<br>是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><h3 id="2-2-3-SSM"><a href="#2-2-3-SSM" class="headerlink" title="2.2.3 SSM"></a>2.2.3 SSM</h3><p>SSM是SpringMVC + Spring + MyBatis的简称，它是目前比较主流的Java<br>EE企业级的后台框架。使用它能快速搭建起系统的后台功能。</p><h1 id="第三章-系统需求分析"><a href="#第三章-系统需求分析" class="headerlink" title="第三章 系统需求分析"></a>第三章 系统需求分析</h1><h2 id="3-1-系统概述"><a href="#3-1-系统概述" class="headerlink" title="3.1 系统概述"></a>3.1 系统概述</h2><p>本课题网站名称为“嘤嘤租房网”，主要的目的是实现以下功能：用户注册、用户登录、浏览房源、申请看房、申请租房等。</p><h2 id="3-2-系统业务分析"><a href="#3-2-系统业务分析" class="headerlink" title="3.2 系统业务分析"></a>3.2 系统业务分析</h2><p>“嘤嘤租房网”的核心功能为租赁房源，所以本网站的角色一共有三位——分别是租客、房东和管理员。</p><h3 id="租客的业务流程分析"><a href="#租客的业务流程分析" class="headerlink" title="租客的业务流程分析"></a>租客的业务流程分析</h3><p>在访问“嘤嘤租房网”时，可先浏览网站上已经上架的房源信息，但无法进行后续的操作。租客在登录账号并实名认证通过后，才可以使用网站其余功能，如向房东发起看房预约、租房申请等。本网站租客的操作流程如图3-1所示。</p><p>图3-1 租客的业务流程活动图</p><h3 id="房东的业务分析"><a href="#房东的业务分析" class="headerlink" title="房东的业务分析"></a>房东的业务分析</h3><ul><li>房东</li></ul><p>房东在登录账号，并且实名认证后，房东才可以使用网站其余的功能。房东可以发布自己的房源，处理看房预约，处理租房申请等。本网站房东的操作流程如图3-2所示。</p><p>图3-2 房东的业务流程活动图</p><ul><li>管理员</li></ul><p>网站的实名信息与房源的信息，都需要通过管理员进行审核。网站管理员的操作流程如图3-3所示。</p><p>图3-3 网站管理员的业务流程活动图</p><h2 id="3-3-功能需求"><a href="#3-3-功能需求" class="headerlink" title="3.3 功能需求"></a>3.3 功能需求</h2><h3 id="3-3-1-网站前端模块"><a href="#3-3-1-网站前端模块" class="headerlink" title="3.3.1 网站前端模块"></a>3.3.1 网站前端模块</h3><p>“嘤嘤租房网”的前端有网站欢迎页、搜索结果页、详情页、登录页、注册页、房东个人中心和租客个人中心，供用户完成以下功能：</p><ul><li>搜索房源</li></ul><p>不论浏览“嘤嘤租房网”的访问者是否登录，网站都支持房源的检索。访问者可以根据自己需要输入关键字检索特定范围内的房源信息。</p><ul><li>查看房源详情</li></ul><p>用户可以单击搜索结果页面的某一条信息，在详情页面查看更完整的房源信息。如：浏览地图位置、房源的介绍文案、房源的住后评价等信息。</p><ul><li>用户注册与登录</li></ul><p>当访问者想要操作网站的更多功能时，需要访问者拥有本网站的账号。访问者可以登录账号再进行操作，或者先注册再进行登录。</p><ul><li>发起看房预约</li></ul><p>当租客用户想要上门看房，并没有明确要租赁的情况时，可以提交线下上门看房的预约给房东用户。</p><ul><li>发起租房申请</li></ul><p>当租客用户想要租住房源时，可提交租房申请给房东。</p><ul><li>合同功能</li></ul><p>租客和房东在双方都意向租赁时，需要依靠合同模块达成租赁关系。租客向房东发起的租房申请，房东可以依据此申请发起租赁合同。合同功能是“嘤嘤租房网”其他功能的依据。</p><ul><li>评价功能</li></ul><p>租客和房东可以使用此功能为对方评价。“嘤嘤租房网”是基于实名的租房网站，为对方客观地评分对下一次租赁时起到了重要的参考作用。</p><ul><li>实名功能</li></ul><p>出于租赁的性质，用户使用网站时必须先进行实名再进行租赁。</p><ul><li>房源功能</li></ul><p>房东可以通过此功能发布和维护自己的房源信息。</p><p>在前台模块中，系统根据登录状态，将用户分为两种角色。各个角色的用例如下所描述。</p><ul><li>网站租客用例</li></ul><p>租客未登录时仍可访问“嘤嘤租房网”的展示页面，其可以检索房源、查看房源详情。租客也可根据需要使用注册和登录功能，拥有一个属于自己的账号。具体的用例如图3-4所示。</p><p>图3-4 网站租客用例图</p><p>用户发起看房预约功能的详细描述如表3-1所示。</p><p>表3-1 发起看房预约功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US01</td></tr><tr><td>用例名：</td><td>发起看房预约</td></tr><tr><td>参与者：</td><td>用户</td></tr><tr><td>触发因素：</td><td>用户想上门看房</td></tr><tr><td>输入信息：</td><td>填写预约时间；选填给房东的留言</td></tr><tr><td>结果：</td><td>预约提交成功</td></tr><tr><td>后置条件：</td><td>数据库中的上门看房预约表成功存储了该用户预约申请。</td></tr><tr><td>过程：</td><td>1）输入预约时间 2）提交预约，点击“预约”按钮</td></tr></tbody></table><p>用户提交租房申请功能的详细描述如表3-2所示。</p><p>表3-2 提交租房申请功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US02</td></tr><tr><td>用例名：</td><td>发起租房申请</td></tr><tr><td>参与者：</td><td>用户</td></tr><tr><td>触发因素：</td><td>用户想申请租赁房源</td></tr><tr><td>输入信息：</td><td>填写租赁的开始日期和结束日期</td></tr><tr><td>结果：</td><td>申请提交成功</td></tr><tr><td>后置条件：</td><td>数据库中的租赁合同表成功存储了该用户租房申请。</td></tr><tr><td>过程：</td><td>1）输入租赁时间范围 2）提交预约，点击“提交申请”按钮</td></tr></tbody></table><p>支付账单功能的详细描述如表3-3所示。</p><p>表3-3 支付账单功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US03</td></tr><tr><td>用例名：</td><td>支付账单</td></tr><tr><td>参与者：</td><td>租客用户</td></tr><tr><td>触发因素：</td><td>租客用户想要支付房东用户发起的账单</td></tr><tr><td>后置条件：</td><td>正确跳转到支付宝的支付页面 线下支付的提示框正确显示 订单状态正确更改</td></tr><tr><td>过程：</td><td>点击“支付宝线上支付”按钮或点击线下支付按钮</td></tr></tbody></table><p>评价房源和房东的详细描述如表3-4所示。</p><p>表3-4 用户登录功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US04</td></tr><tr><td>用例名：</td><td>评价房东与房源</td></tr><tr><td>参与者：</td><td>租客用户</td></tr><tr><td>触发因素：</td><td>用户在合同结束后评价房源和房东</td></tr><tr><td>输入信息：</td><td>选定评分，输入评价内容</td></tr><tr><td>后置条件：</td><td>数据库的房源评价表成功新增一条评价信息 数据库的用户评价表成功新增一条评价信息</td></tr><tr><td>过程：</td><td>点击“我要评价TA”按钮 选择评价星级 点击“提交评价”按钮。</td></tr></tbody></table><ul><li>网站房东用户用例</li></ul><p>房东角色的用户可以使用租赁流程所需要的功能，如：发起合同、发起账单等。具体的房东角色的用例图如图3-5所示。</p><p>图3-5 网站房东的用例图</p><p>处理看房预约功能的详细描述如表3-5所示。</p><p>表3-5处理看房预约功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US05</td></tr><tr><td>用例名：</td><td>处理看房预约</td></tr><tr><td>参与者：</td><td>房东用户</td></tr><tr><td>触发因素：</td><td>房东用户想处理租客用户发起的看房预约</td></tr><tr><td>结果：</td><td>通过预约/退回预约</td></tr><tr><td></td><td>续表3-5</td></tr><tr><td>后置条件：</td><td>存储在数据库预约表的预约信息的状态成功更改为拒绝状态/预约成功状态</td></tr><tr><td>过程：</td><td>选择房东处理选项 点击“提交处理”按钮</td></tr></tbody></table><p>发起账单功能的详细描述如表3-6所示。</p><p>表3-6发起账单功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US06</td></tr><tr><td>用例名：</td><td>发起租赁账单</td></tr><tr><td>参与者：</td><td>房东用户</td></tr><tr><td>触发因素：</td><td>房东用户想对租客发起租赁账单</td></tr><tr><td>结果</td><td>账单成功创建，通知租客</td></tr><tr><td>输入信息：</td><td>选择收租的对象；填写最新房源水表与电表读数；输入调节费用和费用说明</td></tr><tr><td>后置条件：</td><td>数据库中的账单表成功存储该条账单信息</td></tr><tr><td>过程：</td><td>点击“发起账单”按钮 选择收租对象，填写租赁产生的费用信息和读数 核对信息并点击“完成发起”按钮</td></tr></tbody></table><p>取消账单功能的详细描述如表3-7所示。</p><p>表3-7取消账单功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US07</td></tr><tr><td>用例名：</td><td>取消租赁账单</td></tr><tr><td>参与者：</td><td>房东用户</td></tr><tr><td>触发因素：</td><td>房东用户想取消账单的收租</td></tr><tr><td>结果</td><td>账单取消成功，租客无法支付</td></tr><tr><td>后置条件：</td><td>数据库中的账单表里对该账单信息的账单状态成功的更改为已取消状态； 数据库的房源表成功回滚到上一次的抄表数据</td></tr><tr><td>过程：</td><td>点击“查看”按钮 点击“取消这份账单”按钮 点击确认框的“确认”按钮</td></tr></tbody></table><p>发布房源信息功能的详细描述如表3-8所示。</p><p>表3-8发布房源信息功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US08</td></tr><tr><td></td><td>续表3-8</td></tr><tr><td>用例名：</td><td>发布房源信息</td></tr><tr><td>参与者：</td><td>房东用户</td></tr><tr><td>触发因素：</td><td>房东用户想在网站发布自己的房源信息</td></tr><tr><td>结果</td><td>房源信息成功上传</td></tr><tr><td>输入信息：</td><td>输入房源宣传标题、房源相关属性、租赁价格、宣传图片、介绍内容等。</td></tr><tr><td>后置条件：</td><td>数据库中的房源表里成功存储该房源信息，等待管理员审核</td></tr><tr><td>过程：</td><td>点击“新增房源”菜单 输入介绍标题、房源楼层、面积、房屋租赁定价 输入坐落的省市区信息、详细地址、房屋的相关属性 上传房源图片，输入房源介绍内容 点击“提交房源信息新增”按钮</td></tr></tbody></table><p>签约合同功能的详细描述如表3-9所示。</p><p>表3-9 签约合同功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US09</td></tr><tr><td>用例名：</td><td>签约合同</td></tr><tr><td>参与者：</td><td>租客用户</td></tr><tr><td>触发因素：</td><td>用户想租赁房源进行合同签约</td></tr><tr><td>后置条件：</td><td>数据库中的合同表里该申请信息的申请状态改已生效</td></tr><tr><td>过程：</td><td>点击“去签约”按钮 浏览并勾选“我同意签约合同”的复选框 点击“提交”按钮</td></tr></tbody></table><p>提交实名信息功能的详细描述如表3-10所示。</p><p>表3-10 提交实名信息功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US10</td></tr><tr><td>用例名：</td><td>提交实名信息</td></tr><tr><td>参与者：</td><td>用户</td></tr><tr><td>触发因素：</td><td>用户想要在本网站进行实名认证</td></tr><tr><td>输入信息：</td><td>输入真实姓名、身份证号码；上传身份证国徽面、头像面和手持身份证的照片。</td></tr><tr><td>后置条件：</td><td>数据库的实名信息表成功插入用户数据。</td></tr><tr><td>过程：</td><td>输入姓名和身份证号码，上传证件照片 点击“提交”按钮</td></tr></tbody></table><h3 id="3-3-2-网站后端模块"><a href="#3-3-2-网站后端模块" class="headerlink" title="3.3.2 网站后端模块"></a>3.3.2 网站后端模块</h3><p>后端模块基于网站的租赁需求，设立了管理中心，其为网站管理员的管理平台。网站的房源信息、实名信息都需要先经过管理中心审核后，信息才能通过继续下一步的流程。具体的管理员角色的用例图如图3-6所示。</p><p>图3-6 管理员中心的用例图</p><p>审核房源信息功能的详细描述如表3-11所示。</p><p>表3-11 处理看房预约功能用例描述</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>US11</td></tr><tr><td>用例名：</td><td>审核房源信息</td></tr><tr><td>参与者：</td><td>管理员</td></tr><tr><td>触发因素：</td><td>管理员想审核网站房东用户上传的房源信息</td></tr><tr><td>结果：</td><td>审核通过/审核退回</td></tr><tr><td>后置条件：</td><td>存储在数据库的房源表的信息的审核状态成功更改为审核通过/审核被驳回； 审核通过时，网站前端可以搜索到该房源。</td></tr><tr><td>过程：</td><td>点击“查看详情”按钮 选择管理员处理选项 点击“提交处理”按钮</td></tr></tbody></table><h1 id="第四章-系统设计"><a href="#第四章-系统设计" class="headerlink" title="第四章 系统设计"></a>第四章 系统设计</h1><h2 id="4-1系统概要设计"><a href="#4-1系统概要设计" class="headerlink" title="4.1系统概要设计"></a>4.1系统概要设计</h2><p>“嘤嘤租房网”是一个为用户提供在线房源租赁的网站。该网站为房东为用户提供在线发布房源的平台，使得租客用户可以足不出户就可以知晓到房东的房源信息；租客可以在线向房东发起看房预约和申请，也可以与房东在网站上签署合同、支付账单等。本网站具有从看房到合同、账单到评价等基本的租赁流程，使得租客和房东两大核心角色在租赁这件事情不再糟心，把更多的精力投入生活。</p><h2 id="4-2功能模块设计"><a href="#4-2功能模块设计" class="headerlink" title="4.2功能模块设计"></a>4.2功能模块设计</h2><p>“嘤嘤租房网”拥有租赁房源所需要的基本流程。网站的功能结构如图4-1所示。</p><p>图4-1 网站的功能结构图</p><h3 id="4-2-1-公共前端模块"><a href="#4-2-1-公共前端模块" class="headerlink" title="4.2.1 公共前端模块"></a>4.2.1 公共前端模块</h3><p>公共前端模块包括了用户登录、用户注册、浏览信息、提交信息等功能。</p><ul><li>用户注册功能</li></ul><p>用户点击输入框下方的“登录/注册”按钮后，系统会跳转到登录界面。如果浏览者希望注册一个本网站的账号，可以接着单击“注册”按钮，系统会显示一个注册的表单供访问者填写。访问者需要填写手机号码、访问本网站的密码、登录角色和手机验证码功能。访问者点击注册后，系统会校验表单是否填写完全，校验手机格式，并且校验验证码是否正确。上述校验规则都通过后，系统会提示注册成功，并且自动返回到登录界面。注册流程如图4-2所示。</p><p>图4-2 用户注册活动图</p><ul><li>发起上门看房预约/发起租房申请</li></ul><p>访问者成为本网站用户后，可以进行租房的其他操作，如看房预约、租房申请等。在前端的房源详情页，如果浏览的房源状态为空闲时，页面会开放预约和租房的按钮供用户使用。用户只有实名通过的情况下可以使用这两个功能，否则无法使用。用户使用前端的功能活动如图4-3所示。</p><p>图4-3 用户发起看房预约和租房申请的活动图</p><h3 id="4-2-2-个人中心模块"><a href="#4-2-2-个人中心模块" class="headerlink" title="4.2.2 个人中心模块"></a>4.2.2 个人中心模块</h3><p>个人中心模块包括了房东个人中心和租客中心两个中心。个人中心包括了实名功能、个人信息编辑功能，不同角色的预约管理功能、租房申请功能、合同功能、账单功能等。</p><ul><li>修改密码功能</li></ul><p>当用户想要修改自己的登录密码，需要先输入原始的密码，再输入新的密码才能完成更改。修改密码的活动如图4-4所示。</p><p>图4-4 用户修改密码的活动图</p><ul><li>实名认证功能</li></ul><p>用户需要提交自己的真实姓名、身份证号码、身份证的正反面和手持身份的照片上传到系统。等待系统的管理员审核。审核通过后方可使用网站的其他功能。</p><ul><li>个人信息编辑功能</li></ul><p>用户可以编辑自己的个人信息，如昵称、性别等。个人信息主要体现在房屋评价里。</p><ul><li>租赁合同功能</li></ul><p>用户可以在这里浏览有关于自己的合同的信息，所有的合同会以表格的形式展示给用户。根据用户的角色，系统会给出不同的操作按钮。房东可以处理租客发起的申请拉起一份合同发送给用户签约；租客也可以查看并签约拉起的合同。用户操作合同的活动如图4-5所示。</p><p>图4-5 租客与房东签约合同的泳道活动图</p><ul><li>账单功能</li></ul><p>租客在租赁期间产生的租赁费用，需要房东去向租客发起账单。发起后，租客将收到账单的信息。租客查看账单后可以选择支付方式，向房东支付账单。租客选择线上支付时，租客支付后，账单将变更为已支付状态；租客选择线下支付给房东后，房东需要手动选择房租已入账，账单才能结束。用户操作账单的活动如图4-6所示。</p><p>图4-6 房东与租客账单操作的泳道活动图</p><ul><li>预约功能</li></ul><p>用户可以在自己的中心里查看与自己有关的预约信息。所有的预约信息会以表格的形式呈现在页面里，并且根据角色和预约的状态提供操作按钮。用户可以对预约进行处理。</p><ul><li>房源功能</li></ul><p>房源功能主要提供给房东角色使用。房东可以利用房源功能新发布自己的房源信息、维护自己的房源信息。新增或维护后的房源信息。</p><h3 id="4-2-3-管理员模块"><a href="#4-2-3-管理员模块" class="headerlink" title="4.2.3 管理员模块"></a>4.2.3 管理员模块</h3><ul><li>房源信息审核功能</li></ul><p>房东在上传房源信息，或者维护房源信息后，公共前端页面并不能直接搜索到房源的详情。只有管理员审核通过后，房源才允许被用户搜索并查看、租赁等。</p><ul><li>实名认证信息审核功能</li></ul><p>本网站的用户需要进行实名认证后才允许使用网站的其他功能。所有的实名信息都会被提交至管理员中心等待管理员审核。管理员审核实名信息的活动如图4-7所示。</p><p>图4-7 管理员审核信息的活动图</p><h2 id="4-3数据库设计"><a href="#4-3数据库设计" class="headerlink" title="4.3数据库设计"></a>4.3数据库设计</h2><h3 id="4-3-1-概要设计"><a href="#4-3-1-概要设计" class="headerlink" title="4.3.1 概要设计"></a>4.3.1 概要设计</h3><p>根据前期的调查与在分析，得出以下数据库的设计概念。ER图来描述本网站的概念结构如下图4-8所示。</p><p>图4-8 网站ER图</p><p>首先是用户实体图，如图4-9所示。它拥有用户手机号、用户登录密码、角色等属性，记载着用户的个人信息。</p><p>图4-9 用户实体图</p><p>其次，是用户的实名认证信息的实体图，如图4-10所示。他记载着用户的真实信息，包括身份证号码与证件照片等。</p><p>图4-10 用户实名信息实体图</p><p>用户在浏览的核心信息，房源的实体图，如图4-11所示。其记载着房源的所有信息。</p><p>图4-11 房源实体图</p><p>用户的租赁产生的费用账单，存储在租赁账单的实体里，如图4-12所示。</p><p>图4-12 租赁账单实体图</p><p>租客和房东签订的合同信息，存储在租赁合同的实体里，如图4-13所示。</p><p>图4-13 租赁合同实体图</p><p>管理员的实体里存储着管理员的登录信息，如图4-14所示。</p><p>图4-14 系统管理员实体图</p><h3 id="4-3-2-物理设计"><a href="#4-3-2-物理设计" class="headerlink" title="4.3.2 物理设计"></a>4.3.2 物理设计</h3><p>根据本课题的需求分析后，归纳并设计出以下数据库表。都有：用户表，管理员表，房源信息表，房源评价表，用户评价表，租赁合同表，看房预约表，租赁账单表，用户实名信息表，中国省市区信息表，房源地图经纬度记录表。</p><ul><li>用户表</li></ul><p>用户表存放的是用户的信息列表，主要用于记录用户的手机号码、个人信息、登录密码和角色类型。用户表的设计结构图如表4-1所示。</p><p>表4-1 用户表(users)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>u_id</td><td>int</td><td></td><td>主键</td><td>否</td><td>用户表的ID</td></tr><tr><td>2</td><td>u_role</td><td>int</td><td></td><td></td><td>否</td><td>用户角色</td></tr><tr><td>3</td><td>u_head_image</td><td>varchar</td><td>255</td><td></td><td>是</td><td>用户头像</td></tr><tr><td>4</td><td>u_telephone</td><td>varchar</td><td>11</td><td></td><td>否</td><td>电话</td></tr><tr><td>5</td><td>u_pwd</td><td>varchar</td><td>30</td><td></td><td>否</td><td>密码</td></tr><tr><td>6</td><td>u_name</td><td>varchar</td><td>25</td><td></td><td>否</td><td>昵称</td></tr><tr><td>7</td><td>u_sex</td><td>int</td><td></td><td></td><td>是</td><td>性别</td></tr><tr><td>8</td><td>u_state</td><td>int</td><td></td><td></td><td>否</td><td>用户状态</td></tr></tbody></table><ul><li>管理员表</li></ul><p>管理员表存放的是管理人员的信息的数据表，包含了管理员的登录账号和登录密码。表结构如表4-2所示。</p><p>表4-2 管理员表(systemuser)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>sysid</td><td>int</td><td></td><td>主键</td><td>否</td><td>管理员表的ID</td></tr><tr><td>2</td><td>sysname</td><td>varchar</td><td>25</td><td></td><td>否</td><td>管理员登录名</td></tr><tr><td></td><td>续表4-2</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td>syspwd</td><td>varchar</td><td>30</td><td></td><td>否</td><td>管理员密码</td></tr></tbody></table><ul><li>房源信息表</li></ul><p>房源信息表储存了房东发布的房源信息，房源表同时还储存了房源的电表和水表，生成账单时，房源的表读数会同步更新数据。表结构如表4-3所示。</p><p>表4-3 房源信息表(house_infomation)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>h_id</td><td>int</td><td></td><td>主键</td><td>否</td><td></td></tr><tr><td>2</td><td>h_name</td><td>varchar</td><td>255</td><td></td><td>是</td><td>房源宣传文案</td></tr><tr><td>3</td><td>h_address_city</td><td>int</td><td></td><td></td><td>否</td><td>所属城市</td></tr><tr><td>4</td><td>h_address_detial</td><td>varchar</td><td>50</td><td></td><td>否</td><td>房源地址</td></tr><tr><td>5</td><td>h_house_floor</td><td>int</td><td></td><td></td><td>否</td><td>房源楼层</td></tr><tr><td>6</td><td>h_houst_information</td><td>varchar</td><td>500</td><td></td><td>否</td><td>房源介绍</td></tr><tr><td>7</td><td>u_id</td><td>int</td><td></td><td></td><td>否</td><td>房主ID</td></tr><tr><td>8</td><td>h_rent_price</td><td>float</td><td></td><td></td><td>否</td><td>房租价格</td></tr><tr><td>9</td><td>h_image</td><td>varchar</td><td>255</td><td></td><td>否</td><td>房屋图片</td></tr><tr><td>10</td><td>h_rent_state</td><td>int</td><td></td><td></td><td>否</td><td>出租状态</td></tr><tr><td>11</td><td>h_water_number</td><td>int</td><td></td><td></td><td>否</td><td>水表底数</td></tr><tr><td>12</td><td>h_electricity_number</td><td>int</td><td></td><td></td><td>否</td><td>电表底数</td></tr><tr><td>13</td><td>h_audit_state</td><td>int</td><td></td><td></td><td>否</td><td>房源上架审核状态</td></tr><tr><td>14</td><td>h_area_number</td><td>float</td><td></td><td></td><td>否</td><td>房源面积</td></tr><tr><td>15</td><td>h_room_type</td><td>int</td><td></td><td></td><td>否</td><td>房屋户型-几室几厅</td></tr><tr><td>16</td><td>h_decorate_situation</td><td>int</td><td></td><td></td><td>否</td><td>房屋装修情况</td></tr><tr><td>17</td><td>h_post_time</td><td>date</td><td></td><td></td><td>否</td><td>发布日期</td></tr><tr><td>18</td><td>h_pay_type</td><td>int</td><td></td><td></td><td>否</td><td>意向押付方式</td></tr></tbody></table><ul><li>房源评价表</li></ul><p>房源评价表是基于合同结束后，租客对房东的房源的一个评价。表的内容包含租客和房东的ID，房源的ID和评价星级等等字段。表结构如表4-4所示。</p><p>表4-4 房源评价表(house_evaluation)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>he_id</td><td>int</td><td></td><td>主键</td><td>否</td><td></td></tr><tr><td>2</td><td>u_id</td><td>int</td><td></td><td></td><td>否</td><td>用户ID</td></tr><tr><td>3</td><td>h_id</td><td>int</td><td></td><td></td><td>否</td><td>房源ID</td></tr><tr><td></td><td>续表4-4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>c_id</td><td>int</td><td></td><td></td><td>否</td><td>合同ID</td></tr><tr><td>5</td><td>he_date</td><td>date</td><td></td><td></td><td>否</td><td>评价时间</td></tr><tr><td>6</td><td>he_content</td><td>varchar</td><td>500</td><td></td><td>是</td><td>评价内容</td></tr><tr><td>7</td><td>he_sorce</td><td>int</td><td></td><td></td><td>是</td><td>房屋评价星级（1-5）</td></tr><tr><td>8</td><td>he_anonymous</td><td>int</td><td></td><td></td><td>否</td><td>是否匿名</td></tr></tbody></table><ul><li>用户评价表</li></ul><p>租赁结束后，用户对用户的评价会储存在用户评价表里。表的结构如表4-5所示。</p><p>表4-5 用户评价表(user_evaluation)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>ue_id</td><td>int</td><td></td><td>主键</td><td>否</td><td>评价ID</td></tr><tr><td>2</td><td>c_id</td><td>int</td><td></td><td></td><td>否</td><td>基于的合同号</td></tr><tr><td>3</td><td>u_id</td><td>int</td><td></td><td></td><td>否</td><td>评价人ID</td></tr><tr><td>4</td><td>ue_date</td><td>date</td><td></td><td></td><td>否</td><td>日期</td></tr><tr><td>5</td><td>ue_content</td><td>varchar</td><td>255</td><td></td><td>是</td><td>内容</td></tr><tr><td>6</td><td>ue_sorce</td><td>float</td><td></td><td></td><td>否</td><td>评分</td></tr><tr><td>7</td><td>ue_post_u_id</td><td>int</td><td></td><td></td><td>否</td><td>评价对象ID</td></tr></tbody></table><ul><li>租赁合同表</li></ul><p>租赁合同表是储存了当租客发起租房的申请，房东将合同信息补齐后，双方约定的合同信息。存储的字段可供系统生成完整的合同书，也可以提取大纲供用户查看一目了然。表结构如表4-6所示。</p><p>表4-6 租赁合同表(rent_contract)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>c_id</td><td>int</td><td></td><td>主键</td><td>否</td><td>合同ID</td></tr><tr><td>2</td><td>o_create_time</td><td>datetime</td><td></td><td></td><td>否</td><td>创建时间</td></tr><tr><td>3</td><td>h_id</td><td>int</td><td></td><td></td><td>否</td><td>房源ID</td></tr><tr><td>4</td><td>o_tenants_id</td><td>int</td><td></td><td></td><td>否</td><td>租客id</td></tr><tr><td>5</td><td>o_master_id</td><td>int</td><td></td><td></td><td>否</td><td>房东id</td></tr><tr><td>6</td><td>o_rent_money</td><td>float</td><td></td><td></td><td>否</td><td>房租</td></tr><tr><td>7</td><td>o_rent_type</td><td>int</td><td></td><td></td><td>否</td><td>押付类型</td></tr><tr><td>8</td><td>o_house_full_address</td><td>varchar</td><td>255</td><td></td><td>否</td><td>房源完整地址</td></tr><tr><td>9</td><td>o_house_area</td><td>float</td><td></td><td></td><td>否</td><td>面积</td></tr><tr><td>10</td><td>o_house_deposit</td><td>float</td><td></td><td></td><td>否</td><td>押金</td></tr><tr><td></td><td>续表4-6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>11</td><td>o_sign_time</td><td>datetime</td><td></td><td></td><td>否</td><td>租客签约时间</td></tr><tr><td>12</td><td>c_perform_start_date</td><td>date</td><td></td><td></td><td>否</td><td>合同开始日期</td></tr><tr><td>13</td><td>c_perform_end_date</td><td>date</td><td></td><td></td><td>否</td><td>合同结束如期</td></tr><tr><td>14</td><td>c_contract_state</td><td>int</td><td></td><td></td><td>否</td><td>合同状态</td></tr></tbody></table><ul><li>看房预约表</li></ul><p>看房预约表是租客对某一房源感兴趣，想要是实地查看房源时向房东提交申请的数据表。主要的字段为租客ID、房源ID、预约时间、租客留言和房东回复等。表结构如表4-7所示。</p><p>表4-7 预约上门看房表(see_house_application)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>sh_id</td><td>int</td><td></td><td>主键</td><td>否</td><td>预约ID</td></tr><tr><td>2</td><td>o_tenants_id</td><td>int</td><td></td><td></td><td>否</td><td>租客ID</td></tr><tr><td>3</td><td>h_id</td><td>int</td><td></td><td></td><td>否</td><td>房源ID</td></tr><tr><td>4</td><td>o_master_id</td><td>int</td><td></td><td></td><td>否</td><td>房东ID</td></tr><tr><td>5</td><td>sh_see_house_time</td><td>datetime</td><td></td><td></td><td>否</td><td>预约时间</td></tr><tr><td>6</td><td>sh_tenants_message</td><td>varchar</td><td>255</td><td></td><td>是</td><td>租客留言</td></tr><tr><td>7</td><td>sh_master_message</td><td>varchar</td><td>255</td><td></td><td>是</td><td>房东回复</td></tr><tr><td>8</td><td>sh_state</td><td>int</td><td></td><td></td><td>否</td><td>预约状态</td></tr></tbody></table><ul><li>租赁账单表</li></ul><p>租赁账单表是用于存储租客在租赁期间产生的租赁费用需要结算的数据表。由于涉及支付，本表格的字段有相关的读表信息、收费单价、租客ID、房东ID、创建时间、支付时间、支付方式、支付状态等。表结构如表4-8所示。</p><p>表4-8 租赁账单表(rent_order)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>o_id</td><td>int</td><td></td><td>主键</td><td>否</td><td>账单ID</td></tr><tr><td>2</td><td>o_create_time</td><td>datetime</td><td></td><td></td><td>否</td><td>账单创建时间</td></tr><tr><td>3</td><td>c_id</td><td>int</td><td></td><td></td><td>否</td><td>合同ID</td></tr><tr><td>4</td><td>o_tenants_id</td><td>int</td><td></td><td></td><td>否</td><td>租客ID</td></tr><tr><td>5</td><td>o_master_id</td><td>int</td><td></td><td></td><td>否</td><td>房东ID</td></tr><tr><td>6</td><td>o_last_electric_number</td><td>int</td><td></td><td></td><td>否</td><td>上一周期电表读数</td></tr><tr><td>7</td><td>o_now_electric_number</td><td>int</td><td></td><td></td><td>否</td><td>本期电表读度</td></tr><tr><td>8</td><td>o_last_water_number</td><td>int</td><td></td><td></td><td>否</td><td>上一周期水表读数</td></tr><tr><td></td><td>续表4-8</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>9</td><td>o_now_water_number</td><td>int</td><td></td><td></td><td>否</td><td>本期水表读度</td></tr><tr><td>10</td><td>o_electric_price</td><td>float</td><td></td><td></td><td>否</td><td>本期电费单价</td></tr><tr><td>11</td><td>o_water_price</td><td>float</td><td></td><td></td><td>否</td><td>本期水费单价</td></tr><tr><td>12</td><td>o_house_rent_price</td><td>float</td><td></td><td></td><td>否</td><td>租赁房租</td></tr><tr><td>13</td><td>o_adjust_price</td><td>float</td><td></td><td></td><td>否</td><td>调节费</td></tr><tr><td>14</td><td>o_adjust_explain</td><td>varchar</td><td>50</td><td></td><td>是</td><td>调节费备注</td></tr><tr><td>15</td><td>o_order_money</td><td>float</td><td></td><td></td><td>否</td><td>账单总金额</td></tr><tr><td>16</td><td>o_pay_method</td><td>int</td><td></td><td></td><td>否</td><td>支付方式</td></tr><tr><td>17</td><td>o_pay_state</td><td>int</td><td></td><td></td><td>否</td><td>支付状态</td></tr><tr><td>18</td><td>o_pay_dead_line</td><td>date</td><td></td><td></td><td>否</td><td>支付截止时间</td></tr><tr><td>19</td><td>o_pay_time</td><td>datetime</td><td></td><td></td><td>否</td><td>租客支付时间</td></tr></tbody></table><ul><li>用户实名信息表</li></ul><p>用户实名信息表顾名思义，存储着用户的实名数据。包括真实姓名，身份证号码等。表结构如表4-9所示。</p><p>表4-9 用户实名表(userverify)</p><table><thead><tr><th>代号</th><th>字段名</th><th>数据类型</th><th>大小</th><th>说明</th><th>空值</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>v_id</td><td>int</td><td></td><td>主键</td><td>否</td><td>实名ID</td></tr><tr><td>2</td><td>u_id</td><td>int</td><td></td><td></td><td>否</td><td>用户ID</td></tr><tr><td>3</td><td>v_real_name</td><td>varchar</td><td>5</td><td></td><td>否</td><td>用户真实姓名</td></tr><tr><td>4</td><td>v_id_card_number</td><td>varchar</td><td>18</td><td></td><td>否</td><td>用户身份证号码</td></tr><tr><td>5</td><td>v_real_id_card_image1</td><td>varchar</td><td>55</td><td></td><td>否</td><td>身份证头像面图片地址</td></tr><tr><td>6</td><td>v_real_Id_card_image_2</td><td>varchar</td><td>55</td><td></td><td>否</td><td>身份证国标面图片地址</td></tr><tr><td>7</td><td>v_real_Id_card_image_with_person</td><td>varchar</td><td>55</td><td></td><td>否</td><td>人手持身份证图片地址</td></tr><tr><td>8</td><td>v_upload_time</td><td>datetime</td><td></td><td></td><td>否</td><td>用户上传更新时间</td></tr><tr><td>9</td><td>v_audit_time</td><td>datetime</td><td></td><td></td><td>是</td><td>管理员审核时间</td></tr><tr><td>10</td><td>v_verify_state</td><td>int</td><td></td><td></td><td>否</td><td>实名信息审核状态</td></tr></tbody></table><h1 id="第五章-系统实现"><a href="#第五章-系统实现" class="headerlink" title="第五章 系统实现"></a>第五章 系统实现</h1><h2 id="5-1公共前台模块"><a href="#5-1公共前台模块" class="headerlink" title="5.1公共前台模块"></a>5.1公共前台模块</h2><h3 id="5-1-1-欢迎页面"><a href="#5-1-1-欢迎页面" class="headerlink" title="5.1.1 欢迎页面"></a>5.1.1 欢迎页面</h3><p>网站的前台模块默认从欢迎页开始显示，该页面提供了登录注册的入口和搜寻房源信息的输入框。输入搜寻内容点击按钮后，页面则会罗列出相关的房源信息。网站的欢迎页面如图5-1所示。</p><p>图5-1 “嘤嘤租房网”欢迎页</p><h3 id="5-1-2-用户注册页"><a href="#5-1-2-用户注册页" class="headerlink" title="5.1.2 用户注册页"></a>5.1.2 用户注册页</h3><p>用户在使用“嘤嘤租房网”时，需要注册一个自己的账号。本网站以手机号码作为登录账号。注册表单在提供用户输入信息的同时加入了校验规则。如：手机号码一定要为中国大陆手机的11位格式、密码和确认密码需要保持一致等。用户注册页面如图5-2所示。</p><p>图5-2 用户注册页面</p><p>注册的代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">RegisterFromUser(regform).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res.data.success == <span class="literal">true</span>) {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$notify.success({</span><br><span class="line"></span><br><span class="line"><span class="attr">title</span>: <span class="string">"注册成功"</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">message</span>: <span class="string">"账号已注册成功！请牢记您的密码！"</span></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$notify.error({</span><br><span class="line"></span><br><span class="line"><span class="attr">title</span>: <span class="string">"登录失败"</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">message</span>: <span class="string">"用户账号或密码输入错误！"</span></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.loicon = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### <span class="number">5.1</span><span class="number">.3</span> 用户登录页</span><br><span class="line"></span><br><span class="line">用户需要输入自己的手机号码和登录密码进行登录。当登陆成功后，系统会识别用户的角色类型，跳转到对应的个人中心页面。登录页面如图<span class="number">5</span>-<span class="number">3</span>所示。</span><br><span class="line"></span><br><span class="line">图<span class="number">5</span>-<span class="number">3</span> 用户登录页面</span><br><span class="line"></span><br><span class="line">### <span class="number">5.1</span><span class="number">.4</span> 搜索结果页</span><br><span class="line"></span><br><span class="line">当用户在欢迎页输入关键字搜索、或者查看全部房源信息，系统会将相应的房源信息检索出来罗列在搜索结果页面里。该页面会显示房源的图片、房源宣传标题、房源的信息、租赁的价格和所在的省市区信息，供用户进行简易的查看。搜索结果页面如图<span class="number">5</span>-<span class="number">4</span>所示。</span><br><span class="line"></span><br><span class="line">图<span class="number">5</span>-<span class="number">4</span> 搜索结果页面</span><br><span class="line"></span><br><span class="line">搜索的主要代码如下：</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">this.isLoad = true;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">getHouseBySearchKey({// 获取房源所在的区级ID</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key: this.searchKey,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pageSize:this.pageSize</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">}).then(res =\&gt; {//获取模糊查询结果集</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">this.TEMPsearchHouseInfo = res.data.data;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for (let i = 0; i \&lt; this.TEMPsearchHouseInfo.length; i++) {</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">getFullCityAdd({//根据城市代码拼凑成完整的省市区字符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cbId: this.TEMPsearchHouseInfo[i].hAddressCity</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">}).then(res =\&gt; {</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let citytext = res.data.data[2] + "省-" + res.data.data[1] + "市" +</span></span><br><span class="line"><span class="string">res.data.data[0] + "区";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">this.searchHouseInfo.push(</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Object.assign(this.TEMPsearchHouseInfo[i], { cityinfo: citytext })</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">) });}</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">});</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-1-5-房源详情页"><a href="#5-1-5-房源详情页" class="headerlink" title="5.1.5 房源详情页"></a>5.1.5 房源详情页</h3><p>当用户对其中某一条的房源信息有兴趣，可点击该条标题，系统会跳出新的页面，为租客展示房源的详情信息。页面主要分成房源信息、房源说明、房源评价三个部分。</p><p>第一部分为房源的信息介绍。内容包括房源的宣传标题、发布时间、房源的各类属性等。单击左边的图片，会全屏显示该房源的图片。此外，这个部分还有两个操作按钮，分别是预约上门看房和发起租房申请。详情页第一部分界面如图5-5所示。</p><p>图5-5 房源详情页第一部分界面</p><p>这两个功能使用的前提为用户已经登录，且已经通过实名认证。如果实名认证未提交、审核中或者被退回，均属于未实名状态，使用这两个功能时会被拦截，并给出相应的提示。其中，实名信息审核中的拦截通知如图5-6所示。</p><p>图5-6 使用功能被拦截的通知界面</p><p>使用功能的代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">checkIsUserAuth</span>(<span class="params"></span>)</span> {</span><br><span class="line"></span><br><span class="line">checkIsAuth(sessionStorage.getItem(<span class="string">"userid"</span>)).then(res =\&gt; {</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res.data.success == <span class="literal">false</span>) {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.\$alert(<span class="string">"原因："</span> + res.data.data, <span class="string">"抱歉，您无法使用此功能"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">});<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>用户想要上门看房，点击预约上门看房按钮后，系统会显示一个表单给用户选择期望上门看房的时间和想对房东说的留言。输入完信息后点击确定后，该预约申请会发送到房东。发起看房预约的表单如图5-7所示。</p><p>图5-7 发起看房预约的表单界面</p><p>用户有意向租赁房源，点击发起租房申请按钮后，系统会显示申请的表单给用户填写期望入住的时间范围。对于时间范围提供了三个快捷选项。如果用户想租赁其他范围的时间，也可以自己选择租赁区间，且用户只能被允许选择未来时间。提交后，系统会将租房申请提交给房东。发起租房申请的表单如图5-8所示。</p><p>图5-8 发起租房申请的表单界面</p><p>房源详情页的第二部分主要有房源的介绍和房源的位置两个信息。房源介绍为房东录入的介绍信息，地图使用高德地图的接口，可以通过拖动、缩放等方式知晓房源周围的地理交通。详情页的第二部分的界面如图5-9所示。</p><p>租客发起租房申请的代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("insertOneApplicationForContract")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">PostRentHouseApplication</span><span class="params">(<span class="meta">@RequestBody</span> RentContractDO applicate)</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = rentImpl.PostRentHouseApplication(applicate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i\&gt;<span class="number">0</span>){</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(<span class="keyword">true</span>,i);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(<span class="keyword">false</span>,i);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>图5-9 房源详情页第二部分界面</p><p>第三部分为房源的评价部分。当租客结束租房后，系统会提供评价功能让租客去评价这个房源。评价的评价人昵称、分数和内容都会公开在这里。因为评价功能只对已经租赁过该房源、并且租赁已结束的租客开放，真实性相比较会提高很多，可以作为租客租赁房源的一大权衡依据。第三部分的界面如图5-10所示。</p><p>图5-10 房源详情页的第三部分界面</p><h2 id="5-2-租客中心模块"><a href="#5-2-租客中心模块" class="headerlink" title="5.2 租客中心模块"></a>5.2 租客中心模块</h2><h3 id="5-2-1-租客中心的欢迎页"><a href="#5-2-1-租客中心的欢迎页" class="headerlink" title="5.2.1 租客中心的欢迎页"></a>5.2.1 租客中心的欢迎页</h3><p>当租客登录成功后，系统会识别角色并跳转到租客中心。租客中心的界面为侧栏和主栏的布局。在没有使用租客中心的任何功能时，主栏为欢迎状态。租客可以通过侧栏选择需要使用的功能。租客中心提供的功能主要有：实名认证、修改密码、修改个人信息、查看合同、查看账单、查看预约等。<br>租客中心的欢迎页如图5-11所示。</p><p>图5-11 租客中心的欢迎页</p><h3 id="5-2-2-租客中心的实名认证功能"><a href="#5-2-2-租客中心的实名认证功能" class="headerlink" title="5.2.2 租客中心的实名认证功能"></a>5.2.2 租客中心的实名认证功能</h3><p>用户使用点击实名认证后，主栏会显示实名认证的表单。如果用户没有实名信息，或者实名信息被退回，表单会提示用户重新输入相关的实名信息。表单也会显示用户提交的时间和管理员审核的时间，如果有提交实名信息记录，实名信息审核的状态会显示在表单的左上角以章戳的形式标注。用户实名认证的界面如图5-12所示。</p><p>图5-12 租客中心的欢迎页</p><p>用户提交实名信息的代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("postUserAuthInfo")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">insertUserAuthInfomation</span><span class="params">(<span class="meta">@RequestBody</span> UserVerifyDO userAuthInfo)</span></span>{</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"用户提交了身份认证请求："</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(userAuthInfo.toString());</span><br><span class="line"></span><br><span class="line">userAuthInfo.setvUploadTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">System.out.println(userAuthInfo.getvUploadTime());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = userVerifyImpl.insertUserAuthInfo(userAuthInfo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(i);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-3-租客中心的密码修改功能"><a href="#5-2-3-租客中心的密码修改功能" class="headerlink" title="5.2.3 租客中心的密码修改功能"></a>5.2.3 租客中心的密码修改功能</h3><p>用户点击修改密码功能后，主栏会显示相应的表单。该表单拥有基础的校验规则，在校验通过后，新的密码会以MD5加密后更新至数据库当中。修改密码的界面如图5-13所示。</p><p>图5-13 租客中心的密码修改界面</p><p>修改密码的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping("updateUserPwd")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">setUserNewPwd</span><span class="params">(<span class="meta">@RequestBody</span> UsersDO user)</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = userImpl.updateUserNewPwd(user);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-4-租客中心的个人信息编辑功能"><a href="#5-2-4-租客中心的个人信息编辑功能" class="headerlink" title="5.2.4 租客中心的个人信息编辑功能"></a>5.2.4 租客中心的个人信息编辑功能</h3><p>用户想要编辑自己的个人信息时，可以使用此功能。表单可以及时更换头像、昵称、性别等字段。该信息主要用于显示在评论部分。个人信息编辑的界面如图5-14所示。</p><p>图5-14 租客中心的个人信息编辑界面</p><p>上传更新自己头像的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("addUserHeadPortrait")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">uploadUserHeadImage</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line"></span><br><span class="line">String picPath = <span class="string">"E:\\\\vue-test\\\\src\\\\img\\\\userHead\\\\"</span>;<span class="comment">//本地路径</span></span><br><span class="line"></span><br><span class="line">String fileName=file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line">String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">String newFileName= <span class="string">"pic"</span>+uuid+suffix;</span><br><span class="line"></span><br><span class="line">file.transferTo(<span class="keyword">new</span> File(picPath,newFileName));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(newFileName);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-5-我的合同功能"><a href="#5-2-5-我的合同功能" class="headerlink" title="5.2.5 我的合同功能"></a>5.2.5 我的合同功能</h3><p>当租客想要查看自己签约的和待签约的合同时，可以在这里预览。如果租客拥有待签约的合同，则可以点击操作列的签约按钮；如果租客想回顾查看自己的合同信息时，也可以点击详情操作进行预览。合同功能的界面如图5-15所示。</p><p>图5-15 租客中心的合同列表界面</p><p>租客点击详情后，系统会显示用于展示合同的主要信息的模态框。租客同样可以点击按钮查看合同详情。合同详情的界面如图5-16所示。</p><p>图5-16 合同详情的模态框界面</p><p>当租客想要提前退房，需要在合同的模态框里，点击退房的按钮。因为提前结束合同属于违约的操作，所以系统会提示租客该操作的后果。违约提示框如图5-16所示。</p><p>图5-16 租客违约退房的确认框</p><p>租客退房（违约）的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">let formdata = {</span><br><span class="line"></span><br><span class="line">cId: <span class="keyword">this</span>.contractInfo.cId,</span><br><span class="line"></span><br><span class="line">cContractState: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">tenantsCancelContractApplication(formdata).then(res =\&gt; {</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res.data.success == <span class="keyword">true</span>) {</span><br><span class="line"></span><br><span class="line">Bus.\$emit(<span class="string">"tenantsCancelRCApp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.\$message({</span><br><span class="line"></span><br><span class="line">type: <span class="string">"warning"</span>,</span><br><span class="line"></span><br><span class="line">message: <span class="string">"您的请求已经发送给房东，该合同已被冻结!"</span></span><br><span class="line"></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.\$message({</span><br><span class="line"></span><br><span class="line">type: <span class="string">"info"</span>,</span><br><span class="line"></span><br><span class="line">message: <span class="string">"退房申请异常。"</span></span><br><span class="line"></span><br><span class="line">});}});</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-6-我的账单功能"><a href="#5-2-6-我的账单功能" class="headerlink" title="5.2.6 我的账单功能"></a>5.2.6 我的账单功能</h3><p>租客查看自己的账单信息时，点击按钮后主栏会展示租客的所有账单信息。租客可以单击“详情”按钮查看账单的所有信息。我的账单界面如图5-17所示。</p><p>图5-17 租客账单列表界面</p><p>租客点击详情按钮后，系统会显示该条账单的所有信息。“嘤嘤租房网”已对接支付宝支付，如果该账单属于未支付状态的账单，系统会开放支付按钮供租客支付。账单详情的界面如图5-18所示。</p><p>图5-18 账单详情的界面</p><p>用户使用支付宝付款，发起页面的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("launchToAlipay")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">luanchOrderToALiPay</span><span class="params">(<span class="meta">@RequestParam(value = "oId")</span> Integer oId,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(value = "oOrderMoney")</span> Float oOrderMoney,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="meta">@RequestParam(value = "info")</span> String info)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&gt;   <span class="keyword">throws</span> AlipayApiException </span>{</span><br><span class="line"></span><br><span class="line">String subject=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"></span><br><span class="line">subject =<span class="keyword">new</span> String(info.getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">}<span class="keyword">catch</span> (UnsupportedEncodingException e){</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> orderImpl.alipay( <span class="keyword">new</span> ALiPayDO()</span><br><span class="line"></span><br><span class="line">.setOut_trade_no(oId.toString())</span><br><span class="line"></span><br><span class="line">.setTotal_amount(<span class="keyword">new</span> StringBuffer().append(oOrderMoney))</span><br><span class="line"></span><br><span class="line">.setSubject(subject));</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-7-我的看房预约功能"><a href="#5-2-7-我的看房预约功能" class="headerlink" title="5.2.7 我的看房预约功能"></a>5.2.7 我的看房预约功能</h3><p>当租客想要查看自己预约申请，或者想要查看房东的回复时，需要在“我的看房预约”界面查看，界面如图5-19所示。</p><p>图5-19 看房预约列表界面</p><p>如果租客发起的看房预约未被房东处理，租客可以取消自己发起的预约；对于已经处理过的预约申请，系统仍然为租客保留查看的功能。界面如图5-20所示。</p><p>图5-20 预约详情的界面</p><h2 id="5-3-房东中心模块"><a href="#5-3-房东中心模块" class="headerlink" title="5.3 房东中心模块"></a>5.3 房东中心模块</h2><h3 id="5-3-1-房东中心的欢迎页"><a href="#5-3-1-房东中心的欢迎页" class="headerlink" title="5.3.1 房东中心的欢迎页"></a>5.3.1 房东中心的欢迎页</h3><p>当房东角色的用户登录成功后，系统会跳转到房东的个人中心页面，等待房东的下一步操作。</p><h3 id="5-3-2-新增房源功能"><a href="#5-3-2-新增房源功能" class="headerlink" title="5.3.2 新增房源功能"></a>5.3.2 新增房源功能</h3><p>房东在实名通过后，可以根据自己的需要发布自己拥有的房源。在表单里，需要房东录入介绍标题、房源图片和租赁价格等租赁房源需要的相关信息。房东填写完点击提交按钮，表单对输入的信息校验通过后，则会把房源的信息上传至系统，等待管理员审核。新增房源信息的界面如图5-22所示。</p><p>图5-22 新增房源信息的界面</p><p>房东新增房源的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("addHouseInfo")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">insertHouseInfomation</span><span class="params">(<span class="meta">@RequestBody</span> HouseInfomationDO house)</span></span>{</span><br><span class="line"></span><br><span class="line">house.sethPostTime((<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = houseimpl.insertHouseInfo(house);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i\&gt;<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(<span class="keyword">true</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(<span class="keyword">false</span>,i);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-3-房源列表功能"><a href="#5-3-3-房源列表功能" class="headerlink" title="5.3.3 房源列表功能"></a>5.3.3 房源列表功能</h3><p>房东想查看自己房源的信息或者更新自己的房源信息时，房东需要点击房源列表，主栏会显示自己拥有的房源信息的列表。列表界面的布局主要为表格和按钮。列表展示房东的房源信息，按钮为刷新数据按钮，如果数据没有更新至最新，房东可以手动更新。房东的房源列表的界面如图5-23所示。</p><p>图5-23房源列表界面</p><p>展示属于房东的房源列表的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("getMastersHouse")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getMasterAllHouse</span><span class="params">(Integer uid)</span></span>{</span><br><span class="line"></span><br><span class="line">List\&lt;HouseInfomationDO\&gt; houselist = houseimpl.getMasterAllHouse(uid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(houselist);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>房东查看某一条房源信息的详情编辑按钮，系统会弹出一个模态框，模态框将会展示该条房源的详细信息。房东可以对这条房源进行信息的维护更新；如果房源处于出租状态，房源信息无法更新，需要等房源租赁结束，状态为空闲时，房东才被允许维护房源信息。房源详情编辑“辅助介绍”步骤的界面如图5-24所示。</p><p>图5-24 房源编辑详情的模态框界面</p><h3 id="5-3-4-看房预约管理功能"><a href="#5-3-4-看房预约管理功能" class="headerlink" title="5.3.4 看房预约管理功能"></a>5.3.4 看房预约管理功能</h3><p>租客发起的看房预约都会被归纳到看房预约管理列表里。房东在侧栏单击预约管理按钮时，主栏会显示预约的信息列表。上门看房预约管理的界面如图5-25所示。</p><p>图5-25 上门看房预约管理列表的界面</p><p>系统会对不同状态的预约，开放相应的操作按钮。看房预约的处理的界面如图5-26所示。</p><p>图5-26预约详情的处理模态框界面</p><h3 id="5-3-5-合同管理功能"><a href="#5-3-5-合同管理功能" class="headerlink" title="5.3.5 合同管理功能"></a>5.3.5 合同管理功能</h3><p>租客在网站向自己的房源发起的所有租房申请都会被归纳到房东中心的合同列表里。房东可以对合同进行进一步的处理。如，发起合同、查看合同。合同管理的界面如图5-27所示。</p><p>图5-27 房东中心的合同管理列表界面</p><p>房东可以对租客发起的申请进行处理。单击“发起合同”按钮后，系统将会显示租客的信息和房源的信息供房东进行二次确认，并提供本次合同的相关数据。房东也可以点击“拒绝发起签约”拒绝该申请。房东发起合同的模态框界面如图5-28所示。</p><p>图5-28 房东发起合同的模态框界面</p><p>房东发起合同的主要代码如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">MasterUpdateContract</span>(<span class="params"></span>)</span>{</span><br><span class="line">masterPutContractInfo(updateformdata).then( res =\&gt; {</span><br><span class="line"><span class="keyword">if</span>(res.data.success == <span class="literal">true</span>){</span><br><span class="line"><span class="built_in">this</span>.\$message.success(<span class="string">"合同创建完成！等待租客阅读并同意签约合同！"</span>);</span><br><span class="line">Bus.\$emit(<span class="string">"launchNewContract"</span>,<span class="string">"success"</span>)</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">this</span>.\$message(<span class="string">"合同创建出现了问题"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">this</span>.isContractFormShow = <span class="literal">false</span>;</span><br><span class="line">})</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-6-收租功能"><a href="#5-3-6-收租功能" class="headerlink" title="5.3.6 收租功能"></a>5.3.6 收租功能</h3><p>房东点击我的收租按钮后，主栏会显示收租的列表。列表会显示已经收租的账单数据。对于未支付的账单，房东可以对其进行处理；对于已支付或者已取消的账单，房东也可以对账单进行再次的查看。房东也可点击“发起收租账单”按钮向租客发起账单。收租管理的界面如图5-29所示。</p><p>图5-29 房东的收租管理功能</p><p>房东点击“发起收租账单”按钮后，系统会拉出一个收租抽屉界面。该界面把收租的流程分为4步。在第一步时，需要房东选择收租的对象。收租的对象为签约并正在执行期内合同的所有租客；如果某一租客还存在未入账的账单，则无法对该租客进行重复收租。选择收租对象后，系统会读取相关的数据显示在界面上。在后续的步骤里，需要房东填入租客在这一周期使用的电度、水度和选填的额外的调节费用。系统会计算出相应的房租。房东选择收租截止日期、点击提交账单后，系统会将新的抄表信息更新到房源信息数据里，并且会把账单信息发送至租客的手机号上提醒租客及时缴交。收租抽屉界面如图5-30所示。</p><p>图5-30 发起收租账单的操作界面</p><p>房东发起账单的主要代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toNextStep</span>(<span class="params"></span>)</span> {</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.cId == <span class="string">""</span>) {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.\$message.warning(<span class="string">"请先选择收租的对象哦"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.launchBillStep == <span class="number">3</span>) {</span><br><span class="line"></span><br><span class="line">launchOrderInfo(<span class="built_in">this</span>.billform).then(res =\&gt; {</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res.data.data \&gt; <span class="number">0</span>) {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.launchSMSInfo();<span class="comment">//发送短信</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.updateHouseInfomation(); <span class="comment">//更新房屋水电信息</span></span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.\$message(<span class="string">"发起账单可能出现了问题，发起失败！"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.isPreBtnDisabled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (++<span class="built_in">this</span>.launchBillStep == <span class="number">3</span>) {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.btnLaunchName = <span class="string">"发起账单给租客"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算账单,(本次抄表-上次抄表)\*单价+其他费用</span></span><br><span class="line"></span><br><span class="line">oOrderMoney = ((oNowElectricNumber - oLastElectricNumber) \* oElectricPrice )+</span><br><span class="line">((oNowWaterNumber -oLastWaterNumber) \* oWaterPrice) + oHouseRentPrice +</span><br><span class="line"><span class="built_in">this</span>.billform.oAdjustFee;</span><br><span class="line"></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.btnLaunchName = <span class="string">"下一步"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>房东除了发起收租外，也可以查看其他向自己入账的账单信息。对于已支付或者已关闭状态的账单，房东可以查看；对于未支付状态的账单，房东可以选择取消这份账单。取消账单并确认取消后，系统会还原之前的水表和电表的读数，并且该账单会拦截，不让租客支付。如果租客以线下其他方式向房东缴租，房东可以选择线下收到房租。其界面如图5-31所示。</p><p>图5-31 租客中心的个人信息编辑界面</p><h3 id="5-3-7-房东中心的实名认证功能"><a href="#5-3-7-房东中心的实名认证功能" class="headerlink" title="5.3.7 房东中心的实名认证功能"></a>5.3.7 房东中心的实名认证功能</h3><p>房东在注册完账号进入自己的个人中心后，需要进行实名认证。实名认证的操作流程与租客的操作流程一致。</p><h3 id="5-3-8-房东中心的个人信息编辑功能"><a href="#5-3-8-房东中心的个人信息编辑功能" class="headerlink" title="5.3.8 房东中心的个人信息编辑功能"></a>5.3.8 房东中心的个人信息编辑功能</h3><p>房东可以在此页面修改自己的个人信息和头像。操作流程与租客的个人信息编辑功能一致。</p><h3 id="5-3-9-房东中心的密码修改功能"><a href="#5-3-9-房东中心的密码修改功能" class="headerlink" title="5.3.9 房东中心的密码修改功能"></a>5.3.9 房东中心的密码修改功能</h3><p>房东可以根据需要在此模块修改自己的登录密码。房东修改密码的流程与租客的密码修改流程一致。</p><h2 id="5-4-管理员模块"><a href="#5-4-管理员模块" class="headerlink" title="5.4 管理员模块"></a>5.4 管理员模块</h2><p>管理员从管理员登录页面输入账号，登录成功后会跳转到后台管理中心。</p><h3 id="5-4-1-用户实名信息审核"><a href="#5-4-1-用户实名信息审核" class="headerlink" title="5.4.1 用户实名信息审核"></a>5.4.1 用户实名信息审核</h3><p>网站的用户在自己的个人中心提交的实名信息，都会归纳到管理中心等待管理员审核。显示管理员审核实名信息的界面如图5-32所示。</p><p>图5-32 实名审核信息列表界面</p><p>管理员可以审核并无限查看某条实名信息。管理员可以点击图片全屏查看证件信息。对于需要审核的信息，模态框会开放处理选项。管理员需要选择结果后提交处理。实名信息审核方算完成审核。展示实名信息详情的界面如图5-33所示。</p><p>图5-33 审核实名信息的详情界面</p><h3 id="5-4-2-房源信息审核"><a href="#5-4-2-房源信息审核" class="headerlink" title="5.4.2 房源信息审核"></a>5.4.2 房源信息审核</h3><p>管理员需要审核用户发布的房源信息。通过审核的房源信息才可以在网站前端被用户搜索到。管理员的房源审核列表如图5-34所示。</p><p>图5-34 房源审核列表的界面</p><p>管理员点击房源详情时，会显示一个写着房源详情信息的模态框。如果是待审核的房源，模态框会开放处理选项供管理员处理。其如图5-35所示。</p><p>图5-35 管理员查看房源详情的界面</p><p>管理员审核房源信息的主要代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping("adminProcessHouseAuditState")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">adminProcessHouseAuditState</span><span class="params">(<span class="meta">@RequestBody</span> HouseInfomationDO</span></span></span><br><span class="line"><span class="params"><span class="function">record)</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = houseimpl.updateHouseInfo(record);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Result.create(i);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="第六章-系统测试"><a href="#第六章-系统测试" class="headerlink" title="第六章 系统测试"></a>第六章 系统测试</h1><h2 id="6-1-系统用例测试"><a href="#6-1-系统用例测试" class="headerlink" title="6.1 系统用例测试"></a>6.1 系统用例测试</h2><p>系统测试主要是功能测试，检测各功能模块是否能够正常运行，系统整体功能是否完善，运行过程是否顺利，界面是否整洁美观。</p><p>重置密码测试用例如表6-1所示。</p><p>表6-1 修改密码测试用例</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>CS01</td></tr><tr><td>用例名：</td><td>用户修改密码</td></tr><tr><td>输入信息：</td><td>原密码、新密码、确认新密码</td></tr><tr><td>输出信息：</td><td>密码成功修改后，提示用户修改结果</td></tr><tr><td>过程：</td><td>1）用户进入自己的个人中心界面，点击修改密码。 2）用户输入原密码一次，输入新密码两次。 3）点击“保存修改”按钮修改密码，成功后提示用户修改结果，并清空输入框。</td></tr></tbody></table><p>房东用户发起账单用例如表6-2所示。</p><p>表6-2 房东发起新账单测试用例</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>CS02</td></tr><tr><td>用例名：</td><td>房东发起新账单</td></tr><tr><td>输入信息：</td><td>输入标题、介绍、房源属性、价格、押付类型、上传图片。</td></tr><tr><td>输出信息：</td><td>上传成功后，提示用户上传结果。</td></tr><tr><td>过程：</td><td>1）进入房东中心，点击“发布房源”按钮 2）输入标题、介绍、房源属性、价格、押付类型 3）上传图片 4）点击“保存”按钮，成功后返回上传结果。</td></tr></tbody></table><p>用户发表文章评论测试用例如表6-3所示。</p><p>表6-3 租客评价房东测试用例</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>用例编号：</td><td>CS03</td></tr><tr><td></td><td>续表6-3</td></tr><tr><td>用例名：</td><td>租客评价房东</td></tr><tr><td>输入信息：</td><td>输入评价内容，选择评价分</td></tr><tr><td>输出信息：</td><td>评价成功，可以在合同查看评价信息</td></tr><tr><td>过程：</td><td>1）合同结束后，点击“合同详情”，再点击“评价TAA”按钮 2）输入评价的内容，选择评价的分数 3）点击“提交评价”按钮，进行评价。</td></tr></tbody></table><h2 id="6-2-测试结果"><a href="#6-2-测试结果" class="headerlink" title="6.2 测试结果"></a>6.2 测试结果</h2><p>“嘤嘤租房网”的所有功能的测试结果如下：</p><p>（1）前台。前台的用户登录、注册功能、搜索房源、提交申请与预约请求、实名认证、合同管理、预约管理、账单管理、租客、房源与房东评价、房源管理等模块均通过了测试。</p><p>（2）网站的管理员登录后台后，可以实现对房源的审核、实名信息的审核。以上模块均通过了测试。</p><h1 id="总-结"><a href="#总-结" class="headerlink" title="总 结"></a>总 结</h1><p>这一次毕业设计，是第三次自己规划并开发一个较为完整的网站。在开发“嘤嘤租房网”网站时，遇到了几个比较关键的问题。首先的是使用的技术。原本在构思课题时只考虑使用SSM框架，并以jsp页面进行内容的呈现；但在网络上搜集资料时，我逐渐发现前后端分离开发更加贴合现在主流的开发方式。在寻找前端时，发现了基于Vue技术的Element<br>UI框架。此框架简洁干净，也贴合租房这一商业性质网站的风格。综上所述，本课题的网站框架采用Vue与SSM，奠定了网站后续的开发方向。</p><p>有句话叫“万事开头难”。在网站的开发初期，没有接触过前后端分离开发的我遇到了瓶颈。比如：Vue里如何做到数据对接、数据没有及时到达页面造成排版异常等等。有些问题的原因单一，也有的问题原因多种多样；我无从下手，不知如何解决。在同学的指导下，我学会通过报错日志与浏览器控制台的报错信息来定位问题，从而寻找解决办法。</p><p>在后续的开发过程中，理所当然却也无可奈何地遇到了各式各样的问题。在解决这些问题时，最初只能求助网络，寻找类似问题的先例并在自己项目上逐步进行实践以解决当下的错误。长此以往，我发现，当相似的问题遇到一定量后，大脑内会形成一定的解决思路。这令我在往后遇到问题时能更有效率地去解决，我相信，这些经验在以后的工作实战里有着不小的帮助。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>王飞.论房屋租赁信息系统的设计与实现[J].电脑迷,2017(07):194-195.</li></ul><ol start="2"><li><p> 罗树立.加入WTO给中国房地产业带来的挑战及应对措施[J].中共成都市委党校学报,2002(6):35~36.</p></li><li><p> 巴民.国外的住房市场[J].重庆国土资源,2005(5):39~40.</p></li><li><p> 吴浪,高际家.房屋租赁市场的中美比较分析[J].青年科学,2010(2):197~198.</p></li><li><p> 沈克明.纽约政府如何补贴穷人住房[J].新财经,2006(8):80~81.</p></li><li><p> 冯博.中国廉租房制度与日本公营住房政策的比较研究[D].山西财经大学,2010.</p></li><li><p> 刘海洋,陈海.廉租房在国外[J].中州建设,2011(6):74~75.</p></li><li><p> 隋琛琛.廉租房制度国内外比较与借鉴[J].上海房地,2009,14(7):22~25.</p></li><li><p> 房屋租售管理系统的设计与实现[J].尹凌.计算机光盘软件与应用.2012(22)</p></li><li><p> 武海龙,李国平.基于SpringBoot的房屋租赁系统设计[J].电脑与信息术,2019,27(03):76-78.</p></li></ol><p>1 - 战松,郎妲妮.长租公寓现存问题分析及解决对策[J].辽宁经济,2019(11):70-71.</p><ol start="12"><li><p>Márcio Moraes Valença. Social rental housing in HK and the UK: Neoliberal<br> policy divergence or the market in the making?[J]. Habitat<br> International,2015,49.</p></li><li><p>Barton, Barbara. Earning Extra Income With Rent Houses[J]. Ranch and Rural<br> Living,2011,92(5).</p></li></ol><h1 id="致-谢"><a href="#致-谢" class="headerlink" title="致 谢"></a>致 谢</h1><p>本篇论文到了致谢部分，说明在自己的努力和大家的帮助下，我完成了论文的大部分内容。首先，我想感谢我的导师杨财英老师。毕业设计是第一次一个人独立完成一个较为完整的网站，从选题、设计数据库到开发，每一步都需要先慎重思考以避免无效努力。感谢她的指导，我才能更顺利地完成选题方面、逻辑方面等许多环节的任务；也感谢老师的督促，老师的负责也是我能按期完成网站不可少的要素。</p><p>接着，我想感谢我周围的同学与老师，感谢他们能在我碰到技术性的问题无法解决时，帮助我一起解决；也感谢我的朋友们能以使用者的角度给我提出使用的感想，让我能修改出目前最贴合生产环境里的操作界面与交互效果。也感谢他们在我碰到瓶颈时，能给我信心。在大学这段时间里，校园的视野让我能更投入地去学习自己的专业知识。感谢老师们这几年的教学，让我打下了一定的基础；在遇到问题时对比以往让我用不同的角度去看待并解决。</p><p>再次感谢大家的帮助与教诲。学无止境，今后走出象牙之塔，我仍会保持谦逊的态度，努力学习，提升自己，认真完成每一件事情！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 毕业设计 </tag>
            
            <tag> Vue </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记</title>
      <link href="2021/05/26/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/26/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1. React简介"></a>1. React简介</h2><blockquote><p>轻量级的视图层<strong>库</strong>！<em>A JavaScript library for building user interfaces</em></p><p>React不是一个完整的MVC框架，最多可以认为是MVC中的V（View），甚至React并不非常认可MVC开发模式；React 主要用于构建UI，可以简单地理解为React 将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p></blockquote><h3 id="1-1-组件化"><a href="#1-1-组件化" class="headerlink" title="1.1 组件化"></a>1.1 组件化</h3><ol><li><p><strong>什么是模块化：</strong>是从<strong>代码</strong>的角度来进行分析的；把一些可复用的代码，抽离为单个的模块；便于项目的维护和开发；</p></li><li><p><strong>什么是组件化：</strong> 是从 <strong>UI 界面</strong>的角度 来进行分析的；把一些可复用的UI元素，抽离为单独的组件；便于项目的维护和开发；</p><p><strong>组件化的好处：</strong>随着项目规模的增大，手里的组件越来越多；很方便就能把现有的组件，拼接为一个完整的页面；</p></li><li><p><strong>Vue是如何实现组件化的：</strong> 通过 <code>.vue</code> 文件，来创建对应的组件；</p><ul><li>template  结构</li><li>script        行为</li><li>style          样式</li></ul></li></ol><ol start="5"><li><strong>React如何实现组件化</strong>：大家注意，React中有组件化的概念，但是，并没有像vue这样的组件模板文件；React中，一切都是以js来表现的</li></ol><h3 id="1-2-移动APP"><a href="#1-2-移动APP" class="headerlink" title="1.2 移动APP"></a>1.2 移动APP</h3><ul><li>Vue，结合 Weex 实现移动端App开发</li><li>React，结合 ReactNative 实现移动端App开发</li></ul><h2 id="2-React的虚拟DOM"><a href="#2-React的虚拟DOM" class="headerlink" title="2. React的虚拟DOM"></a>2. React的虚拟DOM</h2><ul><li><p><strong>真实DOM：</strong>是浏览器中的概念是用JS对象来表示页面上的元素，并提供了操作 DOM 对象的API。</p></li><li><p><strong>虚拟DOM</strong>：是框架中的概念是用JS对象来模拟页面上的 DOM 和 DOM嵌套。</p><p><strong>本质：</strong> 用JS对象，来模拟DOM元素和嵌套关系</p><p><strong>目的：</strong> 就是为了实现页面元素的高效更新</p></li><li><p>React 高性能</p></li></ul><ul><li>React Fiber</li></ul><h2 id="3-React的特点和优势"><a href="#3-React的特点和优势" class="headerlink" title="3. React的特点和优势"></a>3. React的特点和优势</h2><ul><li><p>虚拟DOM</p></li><li><p>组件系统</p></li><li><p>单向数据流</p></li><li><p>jsx语法</p></li></ul><h2 id="4-快速构建React开发环境"><a href="#4-快速构建React开发环境" class="headerlink" title="4. 快速构建React开发环境"></a>4. 快速构建React开发环境</h2><ol><li><p>使用 create-react-app脚手架 快速构建 React 开发环境</p></li><li><p>引入react、react-dom</p></li><li><p>创建DOM元素渲染</p></li><li><p>元素与组件</p></li></ol><h2 id="5-JSX的语法"><a href="#5-JSX的语法" class="headerlink" title="5. JSX的语法"></a>5. JSX的语法</h2><ol><li>jsx介绍<ul><li>jsx 执行更快，因为它在编译为 JavaScript 代码后进行了优化。</li><li>它是类型安全的，在编译过程中就能发现错误。</li><li>使用 jsx编写模板更加简单快速。</li></ul></li><li>jsx的使用<ul><li>jsx语法中, 要把js代码写到{}号中</li></ul></li><li>jsx中的注意事项<ul><li>注释推荐使用<code>{ /* 这是注释 */ }</code></li><li>在jsx创建DOM的时候，所有的节点，必须有唯一的根元素进行包裹；</li><li>在 jsx 语法中，标签必须成对出现，如果是单标签，则必须自闭和</li></ul></li></ol><h2 id="6-React中创建组件"><a href="#6-React中创建组件" class="headerlink" title="6. React中创建组件"></a>6. React中创建组件</h2><ol><li><p>组件的创建方式</p><ol><li>函数式组件(<strong>首字母必须大写</strong>)</li><li>class关键字组件</li></ol></li><li><p> 两种组件的区别:</p></li></ol><ul><li><p>用<strong>函数</strong>创建出来的组件：叫做“无状态组件”</p></li><li><p>用<strong>class关键字</strong>创建出来的组件：叫做“有状态组件”</p></li><li><p>这两种组件<strong>本质区别</strong>就是：有无state属性</p></li></ul><ol start="3"><li>组件之间的组合和嵌套</li></ol><h2 id="7-JSX原理"><a href="#7-JSX原理" class="headerlink" title="7. JSX原理"></a>7. JSX原理</h2><ol><li><p>JS对象构建DOM结构</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'app'</span> id=<span class="string">'root'</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">'title'</span>&gt;</span>铁蛋儿很帅<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    昌平小白龙</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>上面这个 HTML 所有的信息我们都可以用 JavaScript 对象来表示：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">'div'</span>,</span><br><span class="line">  <span class="attr">attrs</span>: { <span class="attr">className</span>: <span class="string">'app'</span>, <span class="attr">id</span>: <span class="string">'root'</span>},</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">tag</span>: <span class="string">'h1'</span>,</span><br><span class="line">      <span class="attr">attrs</span>: { <span class="attr">className</span>: <span class="string">'title'</span> },</span><br><span class="line">      <span class="attr">children</span>: [<span class="string">'铁蛋很帅'</span>]</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">tag</span>: <span class="string">'p'</span>,</span><br><span class="line">      <span class="attr">attrs</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">children</span>: [<span class="string">'昌平小白龙'</span>]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">'123'</span></span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>React中构建DOM结构</p><p>React.createElement会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  type,</span><br><span class="line">  [props],</span><br><span class="line">  [...children]</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">  render () {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'app'</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">'title'</span>&gt;</span>欢迎铁蛋儿<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">         昌平小白龙</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>编译之后将得到的代码:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">  render () {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      React.createElement(</span><br><span class="line">        <span class="string">"div"</span>,</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">className</span>: <span class="string">'app'</span>,</span><br><span class="line">          <span class="attr">id</span>: <span class="string">'root'</span></span><br><span class="line">        },</span><br><span class="line">        React.createElement(</span><br><span class="line">          <span class="string">"h1"</span>,</span><br><span class="line">          { <span class="attr">className</span>: <span class="string">'title'</span> },</span><br><span class="line">          <span class="string">"铁蛋很帅"</span></span><br><span class="line">        ),</span><br><span class="line">        React.createElement(</span><br><span class="line">          <span class="string">"p"</span>,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          <span class="string">"昌平小白龙"</span></span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">React.createElement(App),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="8-组件中DOM样式"><a href="#8-组件中DOM样式" class="headerlink" title="8. 组件中DOM样式"></a>8. 组件中DOM样式</h2><ol><li><p>行内样式</p></li><li><p>使用class</p></li><li><p>classnames</p><blockquote><p>npm  install  classnames –save</p></blockquote></li><li><p>styled-components</p><blockquote><p>npm  install  styled-components –save</p></blockquote></li></ol><h2 id="9-组件的属性-props"><a href="#9-组件的属性-props" class="headerlink" title="9. 组件的属性(props)"></a>9. 组件的属性(props)</h2><ol start="2"><li>class组件的属性和默认属性</li><li>函数组件的属性和默认属性</li><li>组件的props.children属性</li><li>使用props-type检查props</li></ol><h2 id="10-组件的状态-state"><a href="#10-组件的状态-state" class="headerlink" title="10. 组件的状态(state)"></a>10. 组件的状态(state)</h2><ol><li><p>创建组件状态的两种方式</p><ul><li>普通方式</li><li>继承方式</li></ul></li><li><p>设置组件状态(setState)</p><p>setState方法(有两个参数)设置状态</p><ul><li><p>第一个参数可以是对象，也可以是方法return一个对象。</p><ul><li>参数是对象</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState({</span><br><span class="line">  <span class="attr">isBool</span>: !<span class="built_in">this</span>.state.isBool</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>参数是方法</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1是上一次的state, 参数2是props</span></span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">isBool</span>: !prevState.isBool</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>setState是异步的,所以想要获取最新的state, 没有办法获取,就有了第二个参数,这是一个可选的回调函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">isBool</span>: !prevState.isBool</span><br><span class="line">  }</span><br><span class="line">}, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'回调里的'</span>,<span class="built_in">this</span>.state.isBool)</span><br><span class="line">})</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setState外部的'</span>,<span class="built_in">this</span>.state.isBool)</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>渲染数据</p><ul><li>条件渲染</li><li>列表渲染</li><li>dangerouslySetInnerHTML方法</li></ul></li></ol><h2 id="11-属性-VS-状态"><a href="#11-属性-VS-状态" class="headerlink" title="11. 属性 VS 状态"></a>11. 属性 VS 状态</h2><p><strong>属性</strong></p><p><code>props</code> 的主要作用是让使用该组件的父组件可以传入参数来配置该组件。</p><p>它是外部传进来的配置参数，组件内部无法控制也无法修改。</p><p>除非外部组件主动传入新的 <code>props</code>，否则组件的 <code>props</code> 永远保持不变。</p><p><strong>状态</strong>    </p><p> <code>state</code> 的主要作用是用于组件保存、控制、修改自己的可变状态。</p><p> <code>state</code> 在组件内部初始化，可以被组件自身修改，而外部不能访问也不能修改。</p><p> <code>state</code> 是一个局部的、只能被组件自身控制的数据源。</p><p> <code>state</code> 中状态可以通过 <code>this.setState</code>方法进行更新，<code>setState</code> 会导致组件的重新渲染。 </p><blockquote><p>如果搞不清 <code>state</code> 和 <code>props</code> 的使用场景，记住一个简单的规则：**尽量少地用 <code>state</code>，多用 <code>props</code>**。</p><p>没有 state 的组件叫<strong>无状态组件</strong>，设置了 state 的叫做<strong>有状态组件</strong>。</p><p>组件的数据渲染是否被调用者传递的<code>props</code>完全控制，控制则为<strong>受控组件</strong>，否则<strong>非受控组件</strong>。</p><p>因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。</p><p>这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。</p></blockquote><h2 id="12-事件"><a href="#12-事件" class="headerlink" title="12. 事件"></a>12. 事件</h2><ol><li><p>绑定事件</p><blockquote><p>采用on+事件名的方式来绑定一个事件，React和原生的事件是有区别的，原生的事件全是小写<code>onclick</code>, React中的事件是驼峰<code>onClick</code>，<strong>React的事件并不是原生事件，而是合成事件</strong>。</p></blockquote></li><li><p>事件用法</p><ul><li>直接在render里写行内的箭头函数(不推荐)</li><li>在组件内使用箭头函数定义一个方法(推荐)</li><li>直接在组件内定义一个非箭头函数的方法，然后在render里直接使用<code>onClick={this.handleClick.bind(this)}</code>(不推荐) </li><li>直接在组件内定义一个非箭头函数的方法，然后在constructor里bind(this)(官方推荐)</li></ul></li><li><p>Event对象</p><blockquote><p>和普通浏览器一样，事件handler会被自动传入一个 <code>event</code> 对象，这个对象和普通的浏览器 <code>event</code> 对象所包含的方法和属性都基本一致。不同的是 React中的 <code>event</code> 对象并不是浏览器提供的，而是它自己内部所构建的。它同样具有<code>event.stopPropagation</code>、<code>event.preventDefault</code> 这种常用的方法</p></blockquote></li><li><p>事件的参数传递</p><ul><li>在<code>render</code>里调用方法的地方外面包一层箭头函数 </li><li>在<code>render</code>里通过<code>this.handleEvent.bind(this, 参数)</code>这样的方式来传递</li></ul></li></ol><h2 id="13-用户输入案例"><a href="#13-用户输入案例" class="headerlink" title="13. 用户输入案例"></a>13. 用户输入案例</h2><ol><li>创建用户输入组件</li><li>添加状态绑定事件</li><li>改变状态更新组件</li></ol><h2 id="14-组件的生命周期"><a href="#14-组件的生命周期" class="headerlink" title="14. 组件的生命周期"></a>14. 组件的生命周期</h2><p>React中组件也有生命周期，有很多钩子函数供我们使用, 组件的生命周期，分为四个阶段，初始化、运行中、销毁、错误处理(16.3之后)</p><h4 id="初始化执行"><a href="#初始化执行" class="headerlink" title="初始化执行"></a>初始化执行</h4><ol><li><p>constructor&nbsp;</p></li><li><p>componentWillMount()&nbsp;/&nbsp;UNSAFE_componentWillMount()</p><ul><li> 组件被挂载到页面之前，自动被执行</li></ul></li><li><p>render()&nbsp; </p><ul><li>渲染组件</li></ul></li><li><p>componentDidMount() </p><ul><li>组件被挂载到页面之后，自动被执行</li></ul></li></ol><h4 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h4><p><code>props</code>或<code>state</code>的改变可能会引起组件的更新，组件重新渲染的过程中会调用以下方法：</p><ol><li><p>componentWillReceiveProps()&nbsp;/&nbsp;UNSAFE_componentWillReceiveProps()&nbsp;</p><ul><li><p>子组件要从父组件接受参数，如果这个组件第一次存在于父组件中,不会执行</p><p>如果这个组件之前已经存在于父组件中，才会执行</p></li></ul></li><li><p>shouldComponentUpdate()&nbsp; </p><ul><li>组件被更新之前，自动执行返回true/false来决定 render是否更新  </li></ul></li><li><p>componentWillUpdate()&nbsp;/&nbsp;UNSAFE_componentWillUpdate()&nbsp;</p><ul><li><p>组件被更新之前它会自动执行但是在shouldComponentUpdate之后执行</p><p>shouldComponentUpdate返回true它才会执行，如果返回false，这个函数就不会被执行</p></li></ul></li><li><p>render()&nbsp;</p></li><li><p>componentDidUpdate()</p><ul><li>组件更新完成以后被执行</li></ul></li></ol><h4 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h4><ol><li>componentWillUnmount()<ul><li>组件即将被从页面中剔除的时候执行</li></ul></li></ol><h2 id="15-ref属性"><a href="#15-ref属性" class="headerlink" title="15. ref属性"></a>15. ref属性</h2><p>React提供的这个<code>ref</code>属性，表示对组件真正实例的引用，其实就是<code>ReactDOM.render()</code>返回的组件实例,<code>ref</code>可以挂载到组件上也可以是dom元素上。</p><ul><li>挂到组件(<code>class</code>声明的组件)上的ref表示对组件实例的引用。<strong>不能</strong>在函数式组件上使用 ref 属性，因为它们没有实例：</li><li>挂载到dom元素上时表示具体的dom元素节点。</li></ul><h2 id="16-组件通信"><a href="#16-组件通信" class="headerlink" title="16. 组件通信"></a>16. 组件通信</h2><h4 id="父组件与子组件通信"><a href="#父组件与子组件通信" class="headerlink" title="父组件与子组件通信"></a>父组件与子组件通信</h4><ul><li>父组件将自己的状态传递给子组件，子组件当做属性来接收，当父组件更改自己状态的时候，子组件接收到的属性就会发生改变</li><li>父组件利用<code>ref</code>对子组件做标记，通过调用子组件的方法以更改子组件的状态,也可以调用子组件的方法</li></ul><h4 id="子组件与父组件通信"><a href="#子组件与父组件通信" class="headerlink" title="子组件与父组件通信"></a>子组件与父组件通信</h4><ul><li>父组件将自己的某个方法传递给子组件，在方法里可以做任意操作，比如可以更改状态，子组件通过<code>this.props</code>接收到父组件的方法后调用。</li></ul><h4 id="跨组件通信"><a href="#跨组件通信" class="headerlink" title="跨组件通信"></a>跨组件通信</h4><p>在react没有类似vue中的事件总线来解决这个问题，我们只能借助它们共同的父级组件来实现，将非父子关系装换成多维度的父子关系。react提供了<code>context</code> api来实现跨组件通信, React 16.3之后的<code>context</code>api较之前的好用。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>实例，使用<code>context</code> 实现购物车中的加减功能</p><blockquote><p>复杂的非父子组件通信在react中很难处理，多组件间的数据共享也不好处理，在实际的工作中我们会使用flux、redux、mobx来实现</p></blockquote><h2 id="17-HOC-高阶组件"><a href="#17-HOC-高阶组件" class="headerlink" title="17. HOC(高阶组件)"></a>17. HOC(高阶组件)</h2><blockquote><p>高阶组件是一个函数接受一个组件作为参数，返回一个新的组件</p></blockquote><h2 id="18-React-Router"><a href="#18-React-Router" class="headerlink" title="18. React Router"></a>18. React Router</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><blockquote><p>React Router甚至大部分的前端路由都是依赖于<a href="https://github.com/browserstate/history.js"><code>history.js</code></a>的，它是一个独立的第三方js库。可以用来兼容在不同浏览器、不同环境下对历史记录的管理，拥有统一的API。</p><ul><li>老浏览器的history: 通过<code>hash</code>来存储在不同状态下的<code>history</code>信息，对应<code>createHashHistory</code>，通过检测<code>location.hash</code>的值的变化，使用<code>location.replace</code>方法来实现url跳转。通过注册监听<code>window</code>对象上的<code>hashChange</code>事件来监听路由的变化，实现历史记录的回退。</li><li>高版本浏览器: 利用HTML5里面的history，对应<code>createBrowserHistory</code>, 使用包括<code>pushState</code>， <code>replaceState</code>方法来进行跳转。通过注册监听<code>window</code>对象上的<code>popstate</code>事件来监听路由的变化，实现历史记录的回退。</li><li>node环境下: 在内存中进行历史记录的存储，对应<code>createMemoryHistory</code>。直接在内存里<code>push</code>和<code>pop</code>状态。</li></ul></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法:"></a>用法:</h3><p>React Router包含了四个包:</p><table><thead><tr><th>包名</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router"><code>react-router</code></a></td><td>React Router核心api</td></tr><tr><td><a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom"><code>react-router-dom</code></a></td><td>React Router的DOM绑定，在浏览器中运行不需要额外安装<code>react-router</code></td></tr><tr><td><a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-native"><code>react-router-native</code></a></td><td><a href="https://facebook.github.io/react-native/">React Native</a> 中使用，而实际的应用中，其实不会使用这个。</td></tr><tr><td><a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-config"><code>react-router-config</code></a></td><td>静态路由的配置</td></tr></tbody></table><p><strong>主要使用:</strong><code>react-router-dom</code> </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-router-dom --save  <span class="comment">// 5.x的版本主要是针对React Hook做更好的支持</span></span><br></pre></td></tr></tbody></table></figure><p>直接按照<a href="https://reacttraining.com/react-router/web/guides/quick-start">官网</a>的demo就理解 路由的使用方式:</p><blockquote><p>HashRouter、BrowserRouter、Route、Link、exact、404页面处理、Switch、NavLink、params、link的属性（pathname、search、hash、state)、redirect、push、replace、withRouter、prompt</p></blockquote><p>HashRouter和BrowserRouter</p><ul><li>HashRouter:锚点链接</li><li>BrowserRouter:H5的新特性（history）如果上线之后，需要后台做一些处理:<strong>重定向处理404bug</strong></li></ul><h2 id="19-redux"><a href="#19-redux" class="headerlink" title="19. redux"></a>19. redux</h2><h3 id="传统MVC框架的缺陷"><a href="#传统MVC框架的缺陷" class="headerlink" title="传统MVC框架的缺陷"></a>传统MVC框架的缺陷</h3><p><strong>什么是MVC？</strong></p><p><img src="img/mvc-base.png"></p><p><code>MVC</code>的全名是<code>Model View Controller</code>，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范。</p><p><code>V</code>即View视图是指用户看到并与之交互的界面。</p><p><code>M</code>即Model模型是管理数据 ，很多业务逻辑都在模型中完成。在MVC的三个部件中，模型拥有最多的处理任务。</p><p><code>C</code>即Controller控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。</p><p><strong>MVC只是看起来很美</strong></p><p>MVC框架的数据流很理想，请求先到Controller, 由Controller调用Model中的数据交给View进行渲染，但是在实际的项目中，又是允许Model和View直接通信的。然后就出现了这样的结果：</p><p><img src="img/defect-of-mvc.png"></p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>React 只是 DOM 的一个抽象层，并不是 Web 应用的完整解决方案。有两个方面，它没涉及。</p><ul><li>代码结构 </li><li>组件之间的通信</li></ul><p>2013年 Facebook 提出了 Flux 架构的思想，引发了很多的实现。2015年，Redux 出现，将 Flux 与<a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/">函数式编程</a>结合一起，很短时间内就成为了最热门的前端架构。</p><p>如果你不知道是否需要 Redux，那就是不需要它</p><p>只有遇到 React 实在解决不了的问题，你才需要 Redux</p><p>简单说，如果你的UI层非常简单，没有很多互动，Redux 就是不必要的，用了反而增加复杂性。</p><ul><li>用户的使用方式非常简单</li><li>用户之间没有协作</li><li>不需要与服务器大量交互，也没有使用 WebSocket</li><li>视图层（View）只从单一来源获取数据</li></ul><p><strong>需要使用Redux的项目:</strong></p><ul><li>用户的使用方式复杂</li><li>不同身份的用户有不同的使用方式（比如普通用户和管理员）</li><li>多个用户之间可以协作</li><li>与服务器大量交互，或者使用了WebSocket</li><li>View要从多个来源获取数据</li></ul><p><strong>从组件层面考虑，什么样子的需要Redux：</strong></p><ul><li>某个组件的状态，需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态</li></ul><p><strong>Redux的设计思想：</strong></p><ol><li>Web 应用是一个状态机，视图与状态是一一对应的。</li><li>所有的状态，保存在一个对象里面（唯一数据源）。</li></ol><blockquote><p>注意：flux、redux都不是必须和react搭配使用的，因为flux和redux是完整的架构，在学习react的时候，只是将react的组件作为redux中的视图层去使用了。</p></blockquote><p><strong>Redux的使用的三大原则：</strong></p><ul><li><p>Single Source of Truth(唯一的数据源)</p></li><li><p>State is read-only(状态是只读的)</p></li><li><p>Changes are made with pure function(数据的改变必须通过纯函数完成)</p><blockquote><p>什么是纯函数:</p><p>纯函数指的是 给定固定的输入就一定会有固定的输出，而且不会有任何副作用。</p><p>不固定的话像日期对象、ajax请求、异步操作就不是纯函数了</p><p>副作用是对接受的参数进行修改。我们可以复制一份修改复制的</p></blockquote></li></ul><h2 id="20-redux和react-redux区别"><a href="#20-redux和react-redux区别" class="headerlink" title="20. redux和react-redux区别"></a>20. redux和react-redux区别</h2><blockquote><p>redux:js的状态管理</p><p>react-redux:为了在react中方便实用redux</p></blockquote><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>教程:<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html</a></p><p><img src="img/3.jpeg"></p><ul><li><p>createStore:(创建store)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createStore} <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(Reducer)</span><br></pre></td></tr></tbody></table></figure></li><li><p>applyMiddleware:(处理中间件)</p><blockquote><p>一个关键问题没有解决：异步操作怎么办？Action 发出以后，Reducer 立即算出 State，这叫做同步；Action 发出以后，过一段时间再执行 Reducer，这就是异步。</p><p>怎么才能 Reducer 在异步操作结束后自动执行呢？这就要用到新的工具：中间件（middleware）</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">"redux-thunk"</span> <span class="comment">// 处理异步的中间件</span></span><br><span class="line"><span class="keyword">const</span>  store = createStore(Reducer, applyMiddleware(thunk)</span><br></pre></td></tr></tbody></table></figure><ul><li>引入react-thunk的异步操作（注意:异步一定要放在aciton操作)</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入react-thunk模块</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'react-thunk'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer,applyMiddleware(thunk))</span><br><span class="line"><span class="comment">// action里的异步操作 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrement = <span class="function"><span class="params">num</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="comment">// 因为是一个对象就不用return</span></span><br><span class="line">      dispatch({</span><br><span class="line">        <span class="attr">type</span>: <span class="string">"DECREMENT"</span>,</span><br><span class="line">        num</span><br><span class="line">      });</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">  };</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>注意:定时器、网络请求、事件监听、在组件被销毁前都应得到相应的处理</p></li></ul><h3 id="实战Redux实现TodoList"><a href="#实战Redux实现TodoList" class="headerlink" title="实战Redux实现TodoList"></a>实战Redux实现TodoList</h3><ol><li>使用Antd搭建todoList</li><li>创建store</li><li>创建action和reducer实现添加功能</li><li>实现删除功能 </li><li>actionTypes的拆分</li><li>使用actionCreators拆分action</li><li>UI组件和容器组件</li><li>无状态组件</li><li>redux中使用异步</li><li>redux-thunk</li><li>redux-sage</li></ol><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux:"></a>react-redux:</h3><p>注意版本问题:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"react"</span>: <span class="string">"^16.12.0"</span>,</span><br><span class="line"><span class="string">"react-dom"</span>: <span class="string">"^16.12.0"</span>,</span><br><span class="line"><span class="string">"react-redux"</span>: <span class="string">"^7.1.3"</span>,</span><br><span class="line"><span class="string">"react-scripts"</span>: <span class="string">"3.4.0"</span>,</span><br><span class="line"><span class="string">"redux"</span>: <span class="string">"^4.0.5"</span>,</span><br></pre></td></tr></tbody></table></figure><ul><li><p>Provider</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createStore} <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> { Provider } <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">{</span> <span class="attr">store</span> }&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Children</span> /&gt;</span>   // 子组件就可以接受store到 但是还不能直接用 </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><p>connect</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> { connect } <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">  <span class="comment">//.....</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 连接高级组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispachToProps)(Children) </span><br></pre></td></tr></tbody></table></figure><ul><li><p>mapStateToProps（将state映射到 UI 组件的参数（props))</p><blockquote><p>mapStateToProps是一个函数,它的作用是建立一个从（外部的）state对象到（UI 组件的props对象的映射关系,传入connect中相当于立即执行,返回一个对象,里面的每一个键值对就是一个映射</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mapStateToProps 可以传入两个参数state、ownProps（本组件的props）</span></span><br><span class="line"><span class="comment">// 第一个参数</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">todoList</span>: state.todoList</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 第二个参数</span></span><br><span class="line"><span class="comment">//    &lt;FilterLink filter="All"&gt;</span></span><br><span class="line"><span class="comment">//      All</span></span><br><span class="line"><span class="comment">//    &lt;/FilterLink&gt;</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, ownProps</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">active</span>: ownProps.filter === state.filter</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>mapDispachToProps（输出逻辑，即将用户对 UI 组件的操作映射成 Action。）</p><blockquote><p>mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</p></blockquote><ol><li><p>mapDispatchToProps为函数的用法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params"> dispatch, ownProps</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">          <span class="attr">onClick</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">            dispatch({ <span class="comment">// action</span></span><br><span class="line">              <span class="attr">type</span>: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">              <span class="attr">filter</span>: ownProps.filter</span><br><span class="line">            });</span><br><span class="line">          }</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 从上面代码可以看到，mapDispatchToProps作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了 UI 组件的参数怎样发出 Action。</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>mapDispatchToProps为对象的用法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果mapDispatchToProps是一个对象，它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，会被当作 Action creator ，返回的 Action 会由 Redux 自动发</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = {</span><br><span class="line">  <span class="attr">onClick</span>: <span class="function">(<span class="params">filter</span>) =&gt;</span> {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'SET_VISIBILITY_FILTER'</span>,</span><br><span class="line">    <span class="attr">filter</span>: filter</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 简化版</span></span><br><span class="line"><span class="keyword">import</span> {onClick} <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,{onClick})(App);</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ul></li><li><p>bindActionCreators:（作用是将一个或多个action和dispatch组合起来生成mapDispatchToProps需要生成的内容）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {increment,decrement}  <span class="keyword">from</span> <span class="string">"./actions"</span>;</span><br><span class="line"><span class="keyword">import</span> { bindActionCreators } <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">const</span> mapDispatchProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> {</span><br><span class="line">   <span class="comment">// 单个用法</span></span><br><span class="line">   <span class="comment">//return {</span></span><br><span class="line">      <span class="attr">increment</span>:bindActionCreators(increment,dispatch),</span><br><span class="line">      <span class="attr">decrement</span>:bindActionCreators(decrement,dispatch)</span><br><span class="line">  <span class="comment">// }</span></span><br><span class="line">  <span class="comment">// 多个用法</span></span><br><span class="line">  <span class="keyword">return</span> bindActionCreators({increment,decrement},dispatch)</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 注意：事件触发函数直接调用不用加() 假如要传递参数 事件要多加一层然后执行传入参数（参数）</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>combineReducers:（合并多个reducer）</p><blockquote><p>reducer存放过多的数据 可能造成代码的不可维护 最好把reducer拆分</p><p>用redux内置的combinReducers函数进行拆分</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入函数</span></span><br><span class="line"><span class="keyword">import</span> { combineReducers } <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="comment">// 合并reducer</span></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers({</span><br><span class="line">  reducer1,</span><br><span class="line">  reducer2</span><br><span class="line">});</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer; <span class="comment">// 导出</span></span><br><span class="line"><span class="comment">// 传入state合并好的reducer</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer);</span><br><span class="line"><span class="comment">// 在组件中调用reducer</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">counter</span>: state.reducer1,</span><br><span class="line">    <span class="attr">user</span>: state.reducer2</span><br><span class="line">  };</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="21-React-Hooks"><a href="#21-React-Hooks" class="headerlink" title="21. React Hooks"></a>21. React Hooks</h2><p>教程:<a href="http://www.ruanyifeng.com/blog/2019/09/react-hooks.html?tdsourcetag=s_pctim_aiomsg">http://www.ruanyifeng.com/blog/2019/09/react-hooks.html?tdsourcetag=s_pctim_aiomsg</a></p><p><strong>什么是hooks:</strong></p><blockquote><p>​    React一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有.</p><p>Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性.</p><p>如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks. 凡是 use 开头的 React API 都是 Hooks.</p></blockquote><h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1. useState"></a>1. useState</h3><p>  <code>useState</code>可以让我们在函数式组件中定义一个state和一个用来修改state的方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// count状态、setCount修改状态、useState(默认值)</span></span><br><span class="line"><span class="keyword">let</span> [ count,setCount ] = useState( count的初始值 )</span><br></pre></td></tr></tbody></table></figure><h3 id="2-useContext"><a href="#2-useContext" class="headerlink" title="2. useContext"></a>2. useContext</h3><h5 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h5><p>Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。<br> 有部分小伙伴应该使用props属性进行组件向下传值的操作。当多个组件嵌套时候。你就需要慢慢向上寻找最初的值是什么</p><p><strong>React.createContext：</strong>创建一个上下文的容器(组件), defaultValue可以设置共享的默认数据</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> {Provider, Consumer} = React.<span class="built_in">createContext</span>(defaultValue);</span><br></pre></td></tr></tbody></table></figure><p><strong>Provider(生产者)</strong>: 和它的名字一样。用于生产共享数据的地方。生产什么呢？ 那就看value定义的是什么了。value:放置共享的数据。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider <span class="keyword">value</span>={<span class="comment">/*共享的数据*/</span>}&gt;</span><br><span class="line">    <span class="comment">/*里面可以渲染对应的内容*/</span></span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>Consumer(消费者)</strong>:这个可以理解为消费者。 它是专门消费供应商(<strong>Provider</strong> 上面提到的)产生数据。Consumer需要嵌套在生产者下面。才能通过回调的方式拿到共享的数据源。当然也可以单独使用，那就只能消费到上文提到的defaultValue</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Consumer&gt;</span><br><span class="line">  {<span class="keyword">value</span> =&gt; <span class="comment">/*根据上下文  进行渲染相应内容*/</span>}</span><br><span class="line">&lt;/Consumer&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>useContext</strong></p><p>如果需要在组件之间共享状态，可以使用<code>useContext()</code>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">const</span> locale = useContext(LocaleContext);</span><br><span class="line">  <span class="keyword">const</span> theme = useContext(ThemeContext);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>useContext 的入参是某个 Provider 提供的 context，如果 context 发生变化的话，返回值也会立即发生变化。</p><h3 id="3-useReducer"><a href="#3-useReducer" class="headerlink" title="3. useReducer"></a>3. useReducer</h3><p>React 本身不提供状态管理功能，通常需要使用外部库。这方面最常用的库是 Redux。</p><p>Redux 的核心概念是，组件发出 action 与状态管理器通信。状态管理器收到 action 以后，使用 Reducer 函数算出新的状态，Reducer 函数的形式是<code>(state, action) =&gt; newState</code>。</p><p><code>useReducers()</code>钩子用来引入 Reducer 功能。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br></pre></td></tr></tbody></table></figure><p>上面是<code>useReducer()</code>的基本用法，它接受 Reducer 函数和状态的初始值作为参数，返回一个数组。数组的第一个成员是状态的当前值，第二个成员是发送 action 的<code>dispatch</code>函数。</p><h3 id="4-useEffect"><a href="#4-useEffect" class="headerlink" title="4. useEffect"></a>4. useEffect</h3><p><code>Effect Hook</code>可以使得你在函数组件中执行一些带有副作用的方法。</p><blockquote><p>数据获取，设置订阅以及手动更改<code>React</code>组件中的<code>DOM</code>都是副作用的示例。无论你是否习惯于将这些操作称为“副作用”（或仅仅是“效果”），但你之前可能已经在组件中执行了这些操作。</p><p><strong>提示：</strong> 如果你熟悉<code>React</code>类生命周期方法，则可以将<code>useEffect Hook</code>视为<code>componentDidMount</code>，<code>componentDidUpdate</code>和<code>componentWillUnmount</code>的组合。</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">()  =&gt;</span>  {</span><br><span class="line">  <span class="comment">// Async Action</span></span><br><span class="line">}, [dependencies])</span><br></pre></td></tr></tbody></table></figure><p><code>useEffect()</code>接受两个参数。第一个参数是一个函数，异步操作的代码放在里面。第二个参数是一个数组，用于给出 Effect 的依赖项，只要这个数组发生变化，<code>useEffect()</code>就会执行。第二个参数可以省略，这时每次组件渲染时，就会执行<code>useEffect()</code>。</p><h3 id="constructor-props"><a href="#constructor-props" class="headerlink" title="constructor(props)"></a>constructor(props)</h3><p>React组件的构造函数在挂载之前被调用。</p><p>在实现<code>React.Component</code>构造函数时，需要先在添加其他内容前，调用<code>super(props)</code>，</p><p>用来将父组件传来的<code>props</code>绑定到这个类中，使用<code>this.props</code>将会得到。</p><p>官方建议不要在<code>constructor</code>引入任何具有副作用和订阅功能的代码，这些应当使用<code>componentDidMount()</code>。</p><p><code>constructor</code>中应当做些初始化的动作，如：初始化<code>state</code>，将事件处理函数绑定到类实例上，但也不要使用<code>setState()</code>。如果没有必要初始化state或绑定方法，则不需要构造<code>constructor</code>，或者把这个组件换成纯函数写法。</p><p>当然也可以利用<code>props</code>初始化<code>state</code>，在之后修改<code>state</code>不会对<code>props</code>造成任何修改，但仍然建议大家提升状态到父组件中，或使用<code>redux</code>统一进行状态管理。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> {</span><br><span class="line">  <span class="built_in">super</span>(props);</span><br><span class="line">  <span class="built_in">this</span>.state = {</span><br><span class="line">    <span class="attr">isBool</span>: props.isBool</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="static-getDerivedStateFromProps-nextProps-prevState"><a href="#static-getDerivedStateFromProps-nextProps-prevState" class="headerlink" title="static getDerivedStateFromProps(nextProps, prevState)"></a>static getDerivedStateFromProps(nextProps, prevState)</h3><p><code>getDerivedStateFromProps</code> 是react16.3之后新增，在组件实例化后，和接受新的<code>props</code>后被调用。他必须返回一个对象来更新状态，或者返回null表示新的props不需要任何state的更新。</p><p>如果是由于父组件的<code>props</code>更改，所带来的重新渲染，也会触发此方法。</p><p>调用<code>setState()</code>不会触发<code>getDerivedStateFromProps()</code>。</p><p>之前这里都是使用<code>constructor</code>+<code>componentWillRecieveProps</code>完成相同的功能的</p><h3 id="componentWillMount-UNSAFE-componentWillMount"><a href="#componentWillMount-UNSAFE-componentWillMount" class="headerlink" title="componentWillMount() / UNSAFE_componentWillMount()"></a>componentWillMount() / UNSAFE_componentWillMount()</h3><p><code>componentWillMount()</code>将在React未来版本(官方说法 17.0)中被弃用。<code>UNSAFE_componentWillMount()</code>在组件挂载前被调用，在这个方法中调用<code>setState()</code>不会起作用，是由于他在<code>render()</code>前被调用。</p><p>为了避免副作用和其他的订阅，官方都建议使用<code>componentDidMount()</code>代替。这个方法是用于在服务器渲染上的唯一方法。这个方法因为是在渲染之前被调用，也是惟一一个可以直接同步修改state的地方。</p><h3 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h3><p>render()方法是必需的。当他被调用时，他将计算<code>this.props</code>和<code>this.state</code>，并返回以下一种类型：</p><ol><li>React元素。通过jsx创建，既可以是dom元素，也可以是用户自定义的组件。&nbsp;</li><li>字符串或数字。他们将会以文本节点形式渲染到dom中。&nbsp;</li><li>Portals。react 16版本中提出的新的解决方案，可以使组件脱离父组件层级直接挂载在DOM树的任何位置。&nbsp;</li><li>null，什么也不渲染&nbsp;</li><li>布尔值。也是什么都不渲染。</li></ol><p><code>render()</code>方法必须是一个纯函数，他不应该改变<code>state</code>，也不能直接和浏览器进行交互，应该将事件放在其他生命周期函数中。 </p><p>如果<code>shouldComponentUpdate()</code>返回<code>false</code>，<code>render()</code>不会被调用。</p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><p><code>componentDidMount</code>在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。</p><p><strong>通常在这里进行ajax请求</strong></p><p>如果要初始化第三方的dom库，也在这里进行初始化。只有到这里才能获取到真实的dom.</p><h3 id="componentWillReceiveProps-UNSAFE-componentWillReceiveProps-nextProps"><a href="#componentWillReceiveProps-UNSAFE-componentWillReceiveProps-nextProps" class="headerlink" title="componentWillReceiveProps()/UNSAFE_componentWillReceiveProps(nextProps)"></a>componentWillReceiveProps()/UNSAFE_componentWillReceiveProps(nextProps)</h3><p>官方建议使用<code>getDerivedStateFromProps</code>函数代替<code>componentWillReceiveProps</code>。当组件挂载后，接收到新的<code>props</code>后会被调用。如果需要更新<code>state</code>来响应<code>props</code>的更改，则可以进行<code>this.props</code>和<code>nextProps</code>的比较，并在此方法中使用<code>this.setState()</code>。</p><p>如果父组件会让这个组件重新渲染，即使<code>props</code>没有改变，也会调用这个方法。</p><p>React不会在组件初始化props时调用这个方法。调用<code>this.setState</code>也不会触发。</p><h3 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h3><p>调用<code>shouldComponentUpdate</code>使React知道，组件的输出是否受<code>state</code>和<code>props</code>的影响。默认每个状态的更改都会重新渲染，大多数情况下应该保持这个默认行为。</p><p>在渲染新的<code>props</code>或<code>state</code>前，<code>shouldComponentUpdate</code>会被调用。默认为<code>true</code>。这个方法不会在初始化时被调用，也不会在<code>forceUpdate()</code>时被调用。返回<code>false</code>不会阻止子组件在<code>state</code>更改时重新渲染。</p><p>如果<code>shouldComponentUpdate()</code>返回<code>false</code>，<code>componentWillUpdate</code>,<code>render</code>和<code>componentDidUpdate</code>不会被调用。</p><blockquote><p>官方并不建议在<code>shouldComponentUpdate()</code>中进行深度查询或使用<code>JSON.stringify()</code>，他效率非常低，并且损伤性能。</p></blockquote><h3 id="UNSAFE-componentWillUpdate-nextProps-nextState"><a href="#UNSAFE-componentWillUpdate-nextProps-nextState" class="headerlink" title="UNSAFE_componentWillUpdate(nextProps, nextState)"></a>UNSAFE_componentWillUpdate(nextProps, nextState)</h3><p>在渲染新的<code>state</code>或<code>props</code>时，<code>UNSAFE_componentWillUpdate</code>会被调用，将此作为在更新发生之前进行准备的机会。这个方法不会在初始化时被调用。</p><p>*不能在这里使用this.setState()*，也不能做会触发视图更新的操作。如果需要更新<code>state</code>或<code>props</code>，调用<code>getDerivedStateFromProps</code>。</p><h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate()"></a>getSnapshotBeforeUpdate()</h3><p>在react <code>render()</code>后的输出被渲染到DOM之前被调用。它使您的组件能够在它们被潜在更改之前捕获当前值（如滚动位置）。这个生命周期返回的任何值都将作为参数传递给componentDidUpdate（）。</p><h3 id="componentDidUpdate-prevProps-prevState-snapshot"><a href="#componentDidUpdate-prevProps-prevState-snapshot" class="headerlink" title="componentDidUpdate(prevProps, prevState, snapshot)"></a>componentDidUpdate(prevProps, prevState, snapshot)</h3><p>在更新发生后立即调用<code>componentDidUpdate()</code>。此方法不用于初始渲染。当组件更新时，将此作为一个机会来操作DOM。只要您将当前的props与以前的props进行比较（例如，如果props没有改变，则可能不需要网络请求），这也是做网络请求的好地方。</p><p>如果组件实现<code>getSnapshotBeforeUpdate()</code>生命周期，则它返回的值将作为第三个“快照”参数传递给<code>componentDidUpdate()</code>。否则，这个参数是<code>undefined</code>。</p><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h3><p>在组件被卸载并销毁之前立即被调用。在此方法中执行任何必要的清理，例如使定时器无效，取消网络请求或清理在<code>componentDidMount</code>中创建的任何监听。</p><h3 id="componentDidCatch-error-info"><a href="#componentDidCatch-error-info" class="headerlink" title="componentDidCatch(error, info)"></a>componentDidCatch(error, info)</h3><p>错误边界是React组件，可以在其子组件树中的任何位置捕获JavaScript错误，记录这些错误并显示回退UI，而不是崩溃的组件树。错误边界在渲染期间，生命周期方法以及整个树下的构造函数中捕获错误。</p><p>如果类组件定义了此生命周期方法，则它将成错误边界。在它中调用<code>setState()</code>可以让你在下面的树中捕获未处理的JavaScript错误，并显示一个后备UI。只能使用错误边界从意外异常中恢复; 不要试图将它们用于控制流程。</p><p>错误边界只会捕获树中下面组件中的错误。错误边界本身不能捕获错误。</p><h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><p><code>PureComponnet</code>里如果接收到的新属性或者是更改后的状态和原属性、原状态相同的话，就不会去重新render了<br>在里面也可以使用<code>shouldComponentUpdate</code>，而且。是否重新渲染以<code>shouldComponentUpdate</code>的返回值为最终的决定因素。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, { PureComponent } <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>{</span><br><span class="line">  ……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不错的文章: <a href="https://www.jianshu.com/p/514fe21b9914">https://www.jianshu.com/p/514fe21b9914</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教资中学科目一作文练手《以奋斗创造未来》</title>
      <link href="2021/03/10/zuowen/"/>
      <url>2021/03/10/zuowen/</url>
      
        <content type="html"><![CDATA[<h2 id="考题内容"><a href="#考题内容" class="headerlink" title="考题内容"></a>考题内容</h2><p>阅读下面的材料，按要求写作文。</p><h3 id="【材料一】"><a href="#【材料一】" class="headerlink" title="【材料一】"></a>【材料一】</h3><p>“人的一生应当这样度过，当他回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞耻……”《钢铁是怎样炼成的》主角保尔·柯察金以其钢铁般的意志和为理想而奋斗的精神，激励了一代代青年投身社会主义建设。</p><h3 id="【材料二】"><a href="#【材料二】" class="headerlink" title="【材料二】"></a>【材料二】</h3><p>“生活不能等待别人来安排，要自己去争取与奋斗！”，《平凡的世界》里的农村青年——孙少平，在苦难面前咬牙坚持，积极抗争，让一代代人从中获得精神的力量，增添了克服困难的勇气。</p><h3 id="写作要求"><a href="#写作要求" class="headerlink" title="写作要求"></a>写作要求</h3><p>1、综合上述材料所引发的思考和感悟，写一篇论说文。</p><p>2、用规范的现代汉语写作，角度自选，立意自定，题目自拟。</p><p>【字数要求】小学800字，中学1000字。</p><hr><h2 id="练手作文详情"><a href="#练手作文详情" class="headerlink" title="练手作文详情"></a>练手作文详情</h2><h3 id="《奋斗创造未来-》作者：chenlx"><a href="#《奋斗创造未来-》作者：chenlx" class="headerlink" title="《奋斗创造未来 》作者：chenlx"></a>《奋斗创造未来 》作者：chenlx</h3><p>古话说“少壮不努力，老大徒伤悲”，“长风破浪会有时，直挂云帆济沧海”。“奋斗”二字，从古至今都有文学写着关于这个词的描绘。对于我们来说，什么才是奋斗呢？ </p><p>奋斗，是一场考试前她的奋笔疾书认真备考，放榜时看到成绩的洋溢着喜悦的笑脸；奋斗，是农民在田野里辛勤地劳作挥洒着汗水，在火红的秋日里丰收时那捧在怀里的稻香；奋斗，是新中国成立后，先辈们通过艰苦拼搏反复尝试，后人们接力共同打造出如今的世界第二大经济体，让百姓可以安居乐业的生活。 </p><p>为什么需要依靠奋斗来创造未来？我们所渴望、所期待的未来生活多姿多样。我们畅想着，在未来，我们不用害怕路上的危险，不用担心敌人的欺凌，不用担心吃不饱穿不暖，不用担心不能在知识的汪洋里遨游。但这一切离不开实力，离不开通过奋斗积累出的实力。</p><p>在西汉年代，有一位特别有学问的人名叫匡衡。可匡衡小时候非常的贫穷，家里连根照明的蜡烛都买不起。但匡衡为了在夜里也可以读书，他得知隔壁人家有光后，便在墙上凿了一个洞，以此偷光读书。后来，匡衡的这个举动感动了他的邻居。后来在大家的帮助下，小少年匡衡终于学有所成。在汉元帝时期，匡衡也被封为了郎中。 </p><p>奋斗的故事在我们现代同样随处可见。2020 年，伴随着我国的北斗定位系统完成了最后一颗卫星的发射，至此，我国终于拥有了自己的全球定位系统。可是这一切，得来的并不容易。</p><p>在我们国家的科学家研发北斗系统之初，我们什么核心技术都没有掌握。在这个几乎等同于从零开始的情况之下，科学家们还必须在规定的时间之前先行发射一颗卫星上去使用定位系统的频段号，否则，国际组织就不承认这个频段号归属北斗所用。算法、硬件、原子钟…… 科学家们在有限的时间里艰苦奋斗，克服重重困难，终于发射出了中国的第一颗北斗。在往后的日子里，科学家们日以夜继，终于在去年完成了北斗系统的组网并成功投入使用。感动中国栏目中组曾这样评价道：“当第五十五颗吉星升上太空，北斗，照亮了中国人的梦”。 所以，美好的未来需要靠我们去努力奋斗。我们不必一口气再造出个北斗，也没有必要 凿光读书。在我们的生活中，每一件事情都值得去奋斗。我们可以勤加锻炼身体，保证奋斗 的基本；认真复习，迎接每一场考试。或者我们可以团结协作，夺得一份荣誉，也可以当志愿者服务百姓，为美好社会献上一份自己的力量。 需要奋斗的事情有很多很多，奋斗的方式也多种多样。奋斗的时间或许有长有短，但一定能通过自己的努力奋斗出满意的结果，创造出自己期望的美好的未来！</p><hr><h2 id="作文点评"><a href="#作文点评" class="headerlink" title="作文点评"></a>作文点评</h2><h3 id="预估分数：39"><a href="#预估分数：39" class="headerlink" title="预估分数：39"></a>预估分数：<strong>39</strong></h3><h3 id="写作亮点"><a href="#写作亮点" class="headerlink" title="写作亮点"></a>写作亮点</h3><ol><li>本文立意清楚，开头结合诗词直接引出立意，首尾呼应。</li><li>结构上层层递进，结合例子，流畅有力。</li></ol><h3 id="写作不足"><a href="#写作不足" class="headerlink" title="写作不足"></a>写作不足</h3><ol><li>不知道是不是电脑显示问题，文章分了8段，段落有些多，基本在4-6就可以了，一般5段最为完美，太多分 段会感觉很分散，可以开头-奋斗是什么-为什么奋斗-怎么去奋斗-结尾分为这五段。</li><li>怎样奋斗可以运用排比句的方式，①奋斗是勤加锻炼身体，奋斗是读书储备知识，奋斗是为社会做贡献， 奋斗可以是任何一件小事，奋斗努力的过程，就是小事迸发出最大的力量的过程。</li><li>结尾可以联系下材料，②奋斗是匡衡、北斗、、、然后加上原文需要到未来这部分会更好。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 作文 </tag>
            
            <tag> 教师资格证 </tag>
            
            <tag> 科目一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boot链接neo4j遇到的一些报错知识库</title>
      <link href="2021/03/01/boot%E9%93%BE%E6%8E%A5neo4j%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
      <url>2021/03/01/boot%E9%93%BE%E6%8E%A5neo4j%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%A5%E9%94%99%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>org.springframework.data.mapping.MappingException: Error mapping Record</p><p>Caused by: org.springframework.dao.TypeMismatchDataAccessException: Could not convert “” into java.util.List&lt;java.lang.String&gt;; nested exception is org.neo4j.driver.exceptions.value.NotMultiValued: STRING is not iterable</p><p>Caused by: org.neo4j.driver.exceptions.value.NotMultiValued: STRING is not iterable</p><p>解决办法：将该字段类型改成Object即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
